(function ($) {

    let settings = null;
    let visible = false;
    let shown = false;
    
    let capsLockOn = false;
    let shiftOn = false;

    function showActiveKeyValues() {
        if (shiftOn) {
            this.find("li.shiftable").each(function () {
                let $shiftable = $(this);
                if ($shiftable.hasClass("capitalizable") && capsLockOn) {
                    $shiftable.html($shiftable.attr("data-normal"));
                } else {
                    $shiftable.html($shiftable.attr("data-shift"));
                }
            });
        } else {
            this.find("li.shiftable").each(function () {
                let $shiftable = $(this);
                if ($shiftable.hasClass("capitalizable") && capsLockOn) {
                    
                    $shiftable.html($shiftable.attr("data-shift"));
                } else {
                    $shiftable.html($shiftable.attr("data-normal"));
                }
            });
        }
    }

    let methods = {
        init: function (options) {
            let $virtualKeyboard = this;
            settings = $.extend({
                onKeyPress: function (key) { },
                onSendKeyCombo: function (keys) { }
            }, options);

            this.find("li").off("click");
            this.find("li").mousedown(function (e) {
                e.stopPropagation(); //prevent dragging the keyboard while clicking a key
            });
            this.find("li").click(function (e) {
                let $li = $(this);                
                if ($li.hasClass("modifier")) {
                    if ($li.hasClass("down")) {
                        $li.removeClass("down");
                        if ($li.hasClass("windows") && $virtualKeyboard.find("li.modifier.down, li.shift.down").not(".windows").length == 0) { //manually releasing windows key
                            settings.onSendKeyCombo([91]);
                        }
                    } else {
                        $li.addClass("down");
                    }
                } else if ($li.hasClass("shift")) {
                    if (shiftOn) {
                        $li.removeClass("down");
                    } else {
                        $li.addClass("down");
                    }
                    shiftOn = !shiftOn;
                } else if ($li.hasClass("capslock")) {
                    if (capsLockOn) {
                        $li.removeClass("down");
                    } else {
                        $li.addClass("down");
                    }
                    capsLockOn = !capsLockOn;   
                } else {
                    let $key = $(this);
                    let keyCode = parseInt($key.attr("data-key"));

                    let $modifiers = $virtualKeyboard.find("li.modifier.down");

                    if ($modifiers.length > 0) {
                        let keys = [];
                        for (let $modifier of $modifiers) {
                            keys.push(parseInt($($modifier).attr("data-key")));
                        }
                        keys.push(parseInt($key.attr("data-key")));
                        settings.onSendKeyCombo(keys);
                        $virtualKeyboard.find("li.modifier").removeClass("down");
                        $virtualKeyboard.find("li.shift").removeClass("down");
                        shiftOn = false;
                    } else if (shiftOn) {
                        if ($key.hasClass("capitalizable")) {
                            if (capsLockOn) {
                                settings.onKeyPress(parseInt($key.attr("data-key")));
                            } else {
                                settings.onSendKeyCombo([16, keyCode]);
                            }
                        } else if ($key.hasClass("shiftable")) {
                            settings.onSendKeyCombo([16, keyCode]);
                        } else {
                            settings.onKeyPress(parseInt($key.attr("data-key")));
                        }
                        $virtualKeyboard.find("li.shift").removeClass("down");
                        shiftOn = false;
                    } else if ($key.hasClass("capitalizable") && capsLockOn) {
                        //settings.onTypeCharacter($key.attr("data-shift"));
                        settings.onSendKeyCombo([16, keyCode]);
                    } else {
                        settings.onKeyPress(parseInt($key.attr("data-key")));
                    }
                }
                showActiveKeyValues.apply($virtualKeyboard);
            });
            this.find(".closeButton").click(function () {
                methods.hideKeyboard.apply($virtualKeyboard);
            });
            visible = this.is(':visible');

            makeDraggable(this[0]);
        },

        toggle: function () {
            if (visible) {
                methods.hideKeyboard.apply(this);
            } else {
                methods.showKeyboard.apply(this);
            }
        },

        hideKeyboard: function () {
            this.fadeOut("fast", function () { $(this).hide(); });
            visible = false;
        },

        showKeyboard: function () {
            if (shown) {
                this.show();
            } else {
                let height = this.height();
                let windowHeight = $(window).height();
                this.css('top', height + windowHeight + "px")
                    .show()
                    .animate({ 'top': windowHeight - height - 50 }, 250);
            }
            visible = true;
            shown = true;
        }
    };

    $.fn.virtualKeyboard = function (methodOrOptions) {
        if (methods[methodOrOptions]) {
            return methods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
            // Default to "init"
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + methodOrOptions + ' does not exist on jQuery.virtualKeyboard');
            return this;
        }
    };

    function makeDraggable(element) {
        let isDragging = false;
        let offsetX, offsetY;

        element.addEventListener('mousedown', (e) => {
            isDragging = true;
            offsetX = e.clientX - element.getBoundingClientRect().left;
            offsetY = e.clientY - element.getBoundingClientRect().top;
        });

        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            e.preventDefault(); 

            let x = e.clientX - offsetX;
            if (x < 0) {
                x = 0;
            } else {
                let maxX = $(window).width() - $(element).width();
                if (x > maxX) x = maxX;
            }

            let y = e.clientY - offsetY;
            if (y < 0) {
                y = 0;
            } else {
                let maxY = $(window).height() - $(element).height();
                if (y > maxY) y = maxY;
            }

            element.style.left = x + 'px';
            element.style.top = y + 'px';
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
        });
    }

})(jQuery);