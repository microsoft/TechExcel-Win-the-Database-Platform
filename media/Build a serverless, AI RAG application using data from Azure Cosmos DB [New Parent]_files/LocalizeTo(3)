var labClient = function () {
    var complete = false;
    var disableNavigationWarning = false;
    var labData = null;
    var $labClient;
    var $instructionsContent;
    var $instructionsNavigation;
    var initialized = false;
    var timeWarningShown = false;
    var extensionPromptHasShown = false;
    var canExtend = true;
    var lastUnsyncedActivity = null;
    var childWindows = [];
    var remoteStateChangeInProgress = false;
    var fullScreenMessageShown = false;
    var pageIndex = 0;
    var mainMenuShown = false;
    var editWindow;
    var isChildClient = false; // Child content is used in VM/container-based labs, where instructions are iframed with other content.    
    let isSimulatingChildClient = false; // The "simulation" mode is only for learner preview (instructions editor).
    var isSplitWindowClient = false;
    var $allTasks = null; //cache for getting all tasks for progress tracking. also used when synchronizing task completion during monitoring
    var pauseServerSync = false;
    var enableZoom = true;
    var syncInterval;
    var _enoughTimeRemainsToSave = true;
    let aiCompletionId = 0;
    let isRtl = false;

    function initialize() {
        if (initialized) {
            return;
        }

        try {
            isChildClient = window?.parent && typeof window.parent.isClientWrapper === "function" && window.parent.isClientWrapper() === true;
        } catch {
            isChildClient = false;
        }

        if (isChildClient) {
            $("body").addClass("childClient");
        }

        try {
            isSplitWindowClient = window?.parent && typeof window.parent.isSplitWindowWrapper === "function" && window.parent.isSplitWindowWrapper() === true;
        } catch {
            isSplitWindowClient = false;
        }

        if (isChildClient && !isSplitWindowClient) {
            $("body").addClass("integrated-layout");
        }

        initialized = true;
        isRtl = window.getComputedStyle(document.getElementById('labClient'), null).getPropertyValue('direction') == 'rtl';
        $labClient = $("#labClient");
        $instructionsContent = $("#instructionsContent");
        $instructionsNavigation = $("#instructionsNavigation");
        $("#customSupport a").each(function () {
            $(this).attr("target", "_blank");
        });
        if (!isSplitWindowClient) {
            showFullScreenMessage({ title: "Loading your lab content", showLoadingImage: true });
        }

        instructionsProcessor.setProxyUrl(`/instructionsproxy/${model.id}`);

        let url = `/Instructions/Data/${model.key}`;

        if (model.monitor) {
            url += "?monitor=1";
        }

        if (model.isPreview) {
            url = `/instructions-preview/data/${model.previewKey}?instructionsSetId=${model.instructionsSetId}`;

            if (model.isThemePreview) {
                url += "&themePreview=true";
            }
        }

        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            if (!response?.Success) {
                let error = response?.Error ?? "";

                showFullScreenMessage({ title: "Sorry an error occurred", message: error, showCloseWindowButton: true });

                return;
            }

            labData = response.Data;
            canExtend = labData.CanExtend;

            if (model.isPreview && labData?.VirtualizationPlatform != -1) { // None Virt-Platform
                isSimulatingChildClient = true;

                $("body").addClass("childClient");
            }

            if (labData.EnableNavigationWarning === false) {
                disableNavigationWarning = true;
            }

            if (labData.MinutesRemaining > 0) {
                updateTimer(labData.MinutesRemaining, labData.IsShareExpiration);
            }

            if (labData.Resources && labData.Resources.length > 0) {
                displayExternalResources();
            }

            if (labData.InstructionsPageIndex) {
                pageIndex = labData.InstructionsPageIndex;
            }

            if (labData.InstructionsZoom) {
                setZoom(labData.InstructionsZoom);
            }

            labData.Replacements = parseReplacements(labData.ReplacementsJson);

            displayInstructions(labData.Instructions);

            if (labData.Variables) {
                processVariables();
            }

            if (labData.CloudCredentials) {
                displayCloudCredentials(labData.CloudCredentials);
            }

            if (labData.CloudResourceGroupInstances) {
                displayCloudResources(labData.CloudResourceGroupInstances);
            }

            if (labData.Containers && labData.Containers.length > 0) {
                displayContainers(labData.Containers);
            }

            if (sessionStorage.openCloudPortalWindow && sessionStorage.openCloudPortalWindow === true.toString() && labData.CloudPortalUrl && (!window.cloudPortalWindow || window.cloudPortalWindow.closed)) {
               referenceCloudPortalWindow();
            }

            if (labData.AiChats != null && labData.AiChats.length > 0) {
                for (let aiChat of labData.AiChats) {                    
                    if (aiChat.ChatId.indexOf("ai-practice") === 0) {                        
                        let $ai_practice = $(`.ai-practice[data-id="${aiChat.ChatId}"]`);
                        let $ai_practice_output = $ai_practice.find(".ai-practice-output");
                        let parameters = $ai_practice.data("parameters");

                        if (parameters == null) {
                            parameters = {};
                        }

                        if (parameters.messages == null) {
                            parameters.messages = [];
                        }

                        for (let message of aiChat.Messages) {
                            $ai_practice_output.show();

                            if (message.Role == "user") {
                                parameters.messages.push({ role: "user", content: message.Content });
                                $ai_practice_output.append(`<h1>${message.Content}</h1>`);
                            } else {
                                parameters.messages.push({ role: "assistant", content: message.Content });

                                let $ai_practice_response = $(`<div class='ai-practice-response'></div>`);

                                $ai_practice_response.appendTo($ai_practice_output);

                                displayAiMessage($ai_practice, $ai_practice_response, message.Content);
                            }
                        }
                    } else {
                        let $ai_chats = $(`.ai-chat[data-id="${aiChat.ChatId}"]`);

                        $ai_chats.each(function () {
                            let $ai_chat = $(this);

                            $ai_chat.find(".buttons").show();

                            let parameters = $ai_chat.data("parameters");

                            if (parameters == null) {
                                parameters = {};
                            }

                            if (parameters.messages == null) {
                                parameters.messages = [];
                            }

                            let $ai_output = $ai_chat.find(".ai-output");

                            $ai_output.show();

                            for (let message of aiChat.Messages) {
                                if (message.Role == "user") {
                                    parameters.messages.push({ role: "user", content: message.Content });

                                    let $userMessage = $(`<div class='message user'>${message.Content}</div>`);

                                    $userMessage.appendTo($ai_output);
                                } else {
                                    parameters.messages.push({ role: "assistant", content: message.Content });

                                    let $aiMessage = $(`<div class='message ai'></div>`);

                                    $aiMessage.appendTo($ai_output);

                                    displayAiMessage($ai_chat, $aiMessage, message.Content);
                                }
                            }

                            $ai_chat.data("parameters", parameters);
                        });
                    }
                }
            }

            setupUiEventHandlers();
            setupWindowEventHandlers();
            setupContentEventHandlers($("#resourcesTab"));

            if (isChildClient) {
                $labClient.show();

                window.parent.instructionsHaveLoaded();
            } else if (typeof initialize_theme_script !== 'undefined') {
                initialize_theme_script();                
            }

            if (!labData.IsVirtualizationClient && !model.isPreview) {
                startServerSync(10000);
            }

            if ($("#mainMenu .menuItem").length === 0) {
                $("#mainMenuButton").hide();
            }

            var disableFade = labData.State === 170;

            hideFullScreenMessage(function () {
                setZoomerLocation();
                setupKnowledgeExpanders();
                refreshTerminalIFrames();

                if (labData.InstructionsScrollTop) {
                    window.setTimeout(function () {
                        $instructionsContent.scrollTop(labData.InstructionsScrollTop);
                    }, 1);
                }

                if (labData.State === 170) { //scoring
                    showFullScreenMessage({ title: "Grading", showLoadingImage: true });
                }

                if (labData.HostIsOffline) {
                    showFullScreenMessage({
                        title: "Lost Connection",
                        message: "Sorry, we\'ve lost connectivity to your lab environment. This is most likely a temporary issue and will be resolved shortly.<br/>As soon as connectivity is restored, your lab will resume.",
                        showLoadingImage: true
                    });
                }

                $(".page.selected").find(".ai-chat").each(function () {
                    this.scrollTop = this.scrollHeight;
                    let $ai_output = $(this).find(".ai-output");
                    let $lastUserMessage = $ai_output.find(".message.user").last();

                    if ($lastUserMessage.length == 1) {
                        let ai_output = $ai_output[0];

                        ai_output.scrollTop = $lastUserMessage[0].offsetTop - 5;
                    }
                })
            }, disableFade);

            if (labData.AdIntroUrl) {
                showDialog({
                    url: labData.AdIntroUrl,
                    allowParentOverride: true,
                    minimumDisplaySeconds: labData.AdIntroMinimumDisplaySeconds,
                    close: function () {
                        if (labData.ShowIntroUrl) {
                            showDialog({
                                url: labData.IntroUrl,
                                allowParentOverride: true,
                                minimumDisplaySeconds: labData.IntroMinimumDisplaySeconds
                            });
                        }
                    }
                });
            } else if (labData.ShowIntroUrl) {
                showDialog({
                    allowParentOverride: true,
                    url: labData.IntroUrl,
                    minimumDisplaySeconds: labData.IntroMinimumDisplaySeconds
                });
            }

            if (window.parent) {
                try {
                    window.parent.postMessage({
                        action: "instructionsLoaded"
                    }, "*");
                } catch (e) {
                    console.error("Unable to communicate with parent window.", e);
                }
            };
        });
    }

    /**
     * Parses and filters a list of replacement objects to include only enabled replacements.
     *
     * @param {Array|String|undefined} replacements - The list of replacements to parse. Can be an array, a JSON string, or undefined.
     * @returns {Array} - A filtered array of replacement objects that are enabled.
     */
    function parseReplacements(replacements) {
        const parsedReplacements = Array.isArray(replacements)
            ? replacements
            : replacements ? JSON.parse(replacements) : [];

        return parsedReplacements.filter(replacement => replacement?.Enabled !== false);
    }

    function processVariables() {
        $("span.variable").each(function () {
            var $this = $(this);
            var name = $this.attr("data-name");
            if (name in labData.Variables) {
                $this[0].innerHTML = labData.Variables[name];
                return;
            }
            $this.text("<" + name + ">");
        });
        $("input.variableTextBox, textarea.variableTextBox, select.variableDropDownList").each(function () {
            var $this = $(this);
            var name = $this.attr("data-name");
            if (name in labData.Variables) {
                $this.val(labData.Variables[name]);
                return;
            }
            $this.val("");
        });
        $("code").each(function () {
            var originalHtml = this.originalHtml ? this.originalHtml : this.innerHTML;
            var newHtml = originalHtml;
            for (var name in labData.Variables) {
                var val = labData.Variables[name];
                var regex = new RegExp('<span class="nocode">&lt;' + name + '&gt;</span>', 'g');
                newHtml = newHtml.replace(regex, val);
            }
            if (originalHtml != newHtml || originalHtml != this.innerHTML) {
                this.originalHtml = originalHtml;
                this.innerHTML = newHtml;
            }
        });
        $(".display-by-variable").each(function () {
            var $element = $(this);
            var name = $element.attr("data-variable-name");
            var val = $element.attr("data-variable-value");
            if (name in labData.Variables && labData.Variables[name] === val) {
                $element.show();
                return;
            }
            $element.hide();
        });
        $("a.variable-link").each(function () {
            var $link = $(this);
            for (var name in labData.Variables) {
                if ($link.attr("data-variable") == name) {
                    $link.attr("href", labData.Variables[name]);
                    break;
                }
            }
        });

        $("[data-topic]").each((_index, target) => {
            // Assit AI Chat and Content with replaceing the topic value that contains any variables with te actual variable value
            let topicValue = $(target).attr("data-topic");

            let replacedTopicValue = topicValue.replace(/@lab\.Variable\((")?([a-zA-Z0-9_-]+)\1\)/g, (_fullMatch, _variableNameQuote, name) => labData.Variables.hasOwnProperty(name) ? labData.Variables[name] : "");

            $(target).attr('data-topic', replacedTopicValue);
        });
    }

    function handleVariablesObjectChanged(newVariables) {
        if (typeof api !== 'undefined') {
            for (let name in newVariables) {
                let newValue = newVariables[name];
                if (newValue != labData[name]) {
                    api.labVariableChanged(name, newValue);
                }
            }
        }
        labData.Variables = newVariables;
        applyVariablesToUi();
    }

    function applyVariablesToUi() {
        processVariables();
        $("include.hasVariableUrl").each(function () {
            instructionsProcessor.processInclude($(this), labData.ContentRoot, customDomProcessing, labData.Activities, labData.ActivityGroups, labData.ReplacementTokens, labData.Variables, processVariables, labData.Replacements, saveActivityDelivery);
        });
    }

    function setupTaskProgress() {
        $allTasks = $("#instructionsContent").find(".task-list-item");
        if (labData.RequireTasksCompletedInOrder) {
            if (labData.LastCompletedTaskIndex !== null && labData.LastCompletedTaskIndex >= 0) {
                if (labData.LastCompletedTaskIndex < $allTasks.length) {
                    for (let i = 0; i <= $allTasks.length; i++) {
                        $allTasks.eq(i).find("label.checkbox input[type='checkbox']").prop("checked", i <= labData.LastCompletedTaskIndex);
                    }
                }
            }
        } else {
            if (labData.CompletedTaskIndexes == null) {
                labData.CompletedTaskIndexes = labData.CompletedTasksJson != null ? JSON.parse(labData.CompletedTasksJson) : [];
            }
            for (let completedTaskIndex of labData.CompletedTaskIndexes) {
                $allTasks.eq(completedTaskIndex).find("label.checkbox input[type='checkbox']").prop("checked", true);
            }
        }
        if (labData.EnableTaskProgressTracking) {
            $instructionsContent.addClass("withTaskProgress");
            let numTasks = $allTasks.length;
            if (numTasks <= 0) {
                $("#taskProgressBar").hide();
            } else {
                $("#taskProgressBar").show();
            }
            let numTasksDone = 0;
            if (labData.RequireTasksCompletedInOrder) {
                if (labData.LastCompletedTaskIndex !== null) {
                    numTasksDone = labData.LastCompletedTaskIndex + 1;
                }
            } else {
                numTasksDone = labData.CompletedTaskIndexes?.length ?? 0;
            }
            updateTaskProgressBar(numTasksDone, numTasks);
        }
    }

    function displayAiMessage($aiControl, $messageElement, message) {
        $messageElement.html(instructionsProcessor.makeHtml(message));
        instructionsProcessor.doDomProcessing($messageElement, labData.ContentRoot, null, null, null, labData.ReplacementTokens, labData.Variables, processVariables, labData.Replacements, null);
        $messageElement.find("a.suggestion").on("click", function (e) {
            e.preventDefault();
            $aiControl.find(".ai-input").val($(this).text());
            $aiControl.find(".ai-submit").click();
        });
    }

    function refreshTerminalIFrames($container) {
        if (!$container) {
            $container = $("#pages .page.selected");
        }
        $container.find(".container-terminal").each(function () {
            var $iframe = $(this).find("iframe");
            if ($iframe.length === 1) {
                var labConsole = $iframe[0].contentWindow.labConsole;
                if (labConsole) {
                    labConsole.resizeTerminal();
                }
            }
        });
    }

    function setupKnowledgeExpanders($container) {
        if (!$container) {
            $container = $("#pages .page.selected");
        }
        if ($container.length === 0) return;
        $container.find(".knowledge").each(function () {
            var knowledge = this;
            var $knowledge = $(this);
            var $moreKnowledge = $knowledge.next();
            if ($moreKnowledge.is(".moreKnowledge")) {
                var maxHeight = 100;
                var leeway = 100;
                var diff = knowledge.scrollHeight - maxHeight;
                if (diff < leeway) {
                    $knowledge.removeClass("collapsed");
                    $moreKnowledge.find("a").hide();
                } else {
                    //this is tall content, let's show the 'more' link
                    $moreKnowledge.find("a").show();
                    $knowledge.addClass("collapsed");
                }
            }
        });
    }

    function formatAiQuiz($container, completionId) {
        $container.find(".output p").each(function () {
            let $p = $(this);
            $p.addClass("quiz-question");
            if ($p.text().length <= 1) { $p.remove(); } //occasionally, we see blank questions containing no text, or only a period.
        });
        let questionIndex = 0;
        $container.find(".output ul").each(function () {
            let $ul = $(this);
            $ul.append($("<div class='question-feedback'>&nbsp</div>"));
            $ul.find("li").each(function () {
                let $li = $(this);
                $li.addClass("quiz-answer");
                let text = $li.text().trim();
                if (text.indexOf("*") == text.length - 1) {
                    $li.data("correct", "true");
                    $li.html(`<label>${text.substring(0, text.length - 1)}</label>`);
                    $li.on("click", function () {
                        $li.closest("ul").find(".question-feedback").html("<span class='positive'>Correct!</span>");
                    });
                } else {
                    $li.data("correct", "false");
                    $li.html(`<label>${text}</label>`);
                    $li.on("click", function () {
                        $li.closest("ul").find(".question-feedback").html("<span class='negative'>Sorry, try again.</span>");
                    });
                }
                $li.find("label").prepend(`<input type="radio" name="${completionId}-${questionIndex}"/>`);
            });
            questionIndex++;
        });
    }

    function processAiContent($container) {
        if (!$container) {
            $container = $("#pages .page.selected");
        }
        $container.find(".ai-content").each(function () {
            let $aiContent = $(this);
            if ($aiContent.hasClass("processed")) return;
            $aiContent.addClass("processed");
            let topic = $aiContent.data("topic");
            let promptType = $aiContent.data("type");
            let prompt = $aiContent.data("prompt");
            if (prompt == null) {
                prompt = {};
            }

            if (model.isPreview) {
                $aiContent.addClass("preview");
                $aiContent.addClass("accent-background");
                $aiContent.attr("title", "AI-generated content");
                $aiContent.html(`${promptType.toUpperCase()}: ${topic}`);
                return;
            }

            $aiContent.html(`<div class="loading chat-response-loading"><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div></div><div class="output"></div>`);


            let completionId = $aiContent.attr("data-id");
            if (!completionId) {
                aiCompletionId += 1;
                completionId = aiCompletionId;
                $aiContent.attr("data-id", aiCompletionId);
            }

            $.ajax({
                type: "POST",
                dataType: "json",
                data: {
                    id: model.id,
                    text: topic,
                    prompt: JSON.stringify(prompt),
                    type: promptType
                },
                cache: false,
                url: `/instructions/aicompletion`
            }).always(function (response) {
                $aiContent.find(".loading").hide();
                if (!response?.Success) {
                    alert(response?.Error ? response.Error : "Sorry an error occurred");
                    $aiContent.find(".output").html("").hide();
                    return;
                }
                $aiContent.data("prompt-hash", response.PromptHash); //currently, no way to invalidate this, so cache value will always be used when it exists.

                let completion = promptType == "quiz"
                    ? response.Completion
                        .split('\n')
                        .map(line => line.trim()) //preceding whitespace can break mardkdown list formatting
                        .map(line => line.replace(/ - /g, "\n- ")) //AI often doesn't put answer list items on new lines.
                        .join('\n')
                    : response.Completion;

                $aiContent.find(".output").html(instructionsProcessor.makeHtml(completion)).hide().slideDown("fast");
                let codeBlocks = $aiContent.find(".output code");
                if (codeBlocks.length > 0) {
                    $aiContent.find(".output code").addClass("prettyprint");
                    PR.prettyPrint();
                }
                if (promptType == "quiz") {
                    formatAiQuiz($aiContent, completionId);
                }
            });

        });
    }

    var entityMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;',
        '`': '&#x60;',
        '=': '&#x3D;'
    };

    function escapeHtml(string) {
        return String(string).replace(/[&<>"'`=\/]/g, function (s) {
            return entityMap[s];
        });
    }

    function displayCloudCredentials(cloudCredentials) {
        var html = "";
        var numCredentials = cloudCredentials.length;
        for (var i = 0; i < numCredentials; i++) {
            html += getCloudCredentialHtml(cloudCredentials[i]);
        }
        $("#cloudCredentials").html(html);
    }

    function getCloudCredentialHtml(cloudCredential) {
        let html = `<div class="cloudCredential"><h2>${cloudCredential.DisplayName}</h2>`;
        if (cloudCredential.Message) {
            html += cloudCredential.Message;
        }
        html += '<table class="credentials fields">';
        if (cloudCredential.PortalUrl) {
            html += '<tr><td class="fieldName">URL</td>';
            html += `<td><a class="portalLink home icon-link special-action-link" href="${cloudCredential.PortalUrl}">${cloudCredential.PortalUrl}</span></td>`;
            html += "</tr>";
        }
        let properties = cloudCredential.Properties;
        let numProperties = properties.length;
        for (let i = 0; i < numProperties; i++) {
            let property = properties[i];
            let fieldName = getKeyLocalization(property.Key);
            let customFieldName = getCustomCloudCredentialPropertyFieldName(fieldName);

            html += `<tr><td class="fieldName">${customFieldName}</td>`;

            if (isChildClient) {
                html += `<td><span class="typeText" title="Type Text" tabindex="0" role="button" aria-description="${cloudCredential.DisplayName} Type Text ${fieldName}">${escapeHtml(property.Value)}</span></td>`;
            } else {
                html += `<td><span class="copyable" title="Copy to clipboard" tabindex="0" role="button" aria-description="${cloudCredential.DisplayName} Copy to clipboard ${fieldName}">${escapeHtml(property.Value)}</span></td>`;
            }
            //cloudCredential is overloaded, we only want to unassign CloudCredentialPool creds
            if (labData.CanUnassignCloudCredentials && cloudCredential.Id && !cloudCredential.DisplayName.includes("Portal") && cloudCredential.PortalUrl === null && i == 0) {
                html += '<td><input class="id" type="hidden" value="' + cloudCredential.Id + '"/><a href="#" class="cancelLink-s unassign">Unassign</a></td>';
            }
            html += "</tr>";
        }
        html += "</table></div>";
        return html;
    }

    function getKeyLocalization(key) {
        if (key in localizedKeyMap) {
            return localizedKeyMap[key];
        }
        else
            return key;
    }

    /**
     * Returns a formatted field name for custom cloud credential properties.
     * 
     * If the provided field name is found to have a custom field name, that's returned.
     * Otherwise, it returns the original field name unchanged.
     *
     * @param {string} fieldName - The name of the field to format.
     * @returns {string} - The formatted field name, potentially wrapped in an abbreviation tag.
     */
    function getCustomCloudCredentialPropertyFieldName(fieldName) {
        const normalizedFieldName = fieldName.toLowerCase().trim();

        if (normalizedFieldName === 'tap') {
            return `<abbr title="Temporary Access Pass">${fieldName}</abbr>`;
        }

        return fieldName;
    }

    const localizedKeyMap = {
        "Account": `Account`,
        "Subscription": `Subscription`,
        "Username": `Username`,
        "Password": `Password`,
        "TenantName": `Tenant Name`,
        "TenantPrefix": `Tenant Prefix`
    };

    function displayCloudResources(cloudResourceGroups) {
        var html = "";
        var numResourceGroups = cloudResourceGroups.length;
        for (var i = 0; i < numResourceGroups; i++) {
            var cloudResourceGroup = cloudResourceGroups[i];
            //if (cloudResourceGroup.ShowToStudent) {                
            html += getCloudResourceGroupHtml(cloudResourceGroup);
            //}
        }
        $("#cloudResources").html(html);
    }

    function getCloudResourceGroupHtml(cloudResourceGroup) {
        var title = `Resource Group`;
        if (labData.CloudPlatform == 11) {
            var title = `Stack`;
        }

        var html = `<div class="cloudResourceGroup"><h2>${title}<div class="description">${cloudResourceGroup.ResourceGroupName}</div></h2>`;
        var cloudResources = cloudResourceGroup.CloudResources;
        var numCloudResources = cloudResources.length;
        if (numCloudResources > 0) {
            html += '<table class="fields">';
            for (var i = 0; i < numCloudResources; i++) {
                var cloudResource = cloudResources[i];
                html += `<tr><td class="cloudResource" colspan="2">${cloudResource.Name}</td></tr>`;
                var parameters = cloudResource.Parameters;
                var numParameters = parameters.length;
                if (numParameters > 0) {
                    for (var j = 0; j < numParameters; j++) {
                        var parameter = parameters[j];
                        if (!parameter.ShowToStudent || parameter.Value === null) continue;
                        html += `<tr><td class="fieldName">${parameter.DisplayName}</td>`;
                        var parameterValue = processCloudResourceParameterValue(parameter.Value);
                        if (isChildClient) {
                            html += `<td><span class="typeText" title="Type Text" tabindex="0" role="button" aria-label="${parameter.DisplayName}">${parameterValue}</span></td>`;
                        } else {
                            html += `<td> <span class="copyable" title="Copy to clipboard" tabindex="0" role="button" aria-label="${parameter.DisplayName}>${parameterValue}</span></td>`;
                        }
                        html += "</tr>";
                    }
                }
                html += '<tr><td colspan="2">&nbsp;</td></tr>';
            }
            html += "</table>";
        }
        return html;
    }

    function processCloudResourceParameterValue(val) {
        var processedValue = val;
        if (labData.ReplacementTokens && labData.ReplacementTokens.length > 0) {
            for (var z = 0, numTokens = labData.ReplacementTokens.length; z < numTokens; z++) {
                var token = labData.ReplacementTokens[z];
                processedValue = replaceAll(processedValue, token.Token, token.Replacement);
            }
        }
        return processedValue;
    }

    function escapeRegExp(str) {
        return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    }

    function replaceAll(str, find, replace) {
        if (str === null) return null;
        if (replace === null) replace = "";
        return str.replace(new RegExp(escapeRegExp(find), 'ig'), replace);
    }

    function displayExternalResources(resources) {
        var externalResources = [];
        for (var i = 0; i < labData.Resources.length; i++) {
            var resource = labData.Resources[i];
            if (!resource.IsManual) {
                externalResources.push(resource);
            }
        }
        if (externalResources.length > 0) {
            var html = "<ul>";
            var numResources = externalResources.length;
            for (var j = 0; j < numResources; j++) {
                var externalResource = externalResources[j];
                html += "<li><a href='" + externalResource.Url + "' target='top'>" + externalResource.Name + "</a>";
                if (externalResource.Description) {
                    html += "<div class='description'>" + externalResource.Description + "</div>";
                }
                html += "</li>";
            }
            html += "</ul>";
            $("#externalResources").html(html);
        }
    }

    function appendExternalManualPages() {
        var externalManuals = [];
        for (var i = 0; i < labData.Resources.length; i++) {
            var resource = labData.Resources[i];
            if (resource.IsManual) {
                externalManuals.push(resource);
            }
        }
        if (externalManuals && externalManuals.length > 0) {
            $("#zoomWrapper").hide(); //zoom not compatible with all external content.
            enableZoom = false;
            var numPages = $("#pages .page").length;
            for (var j = 0; j < externalManuals.length; j++) {
                var externalManual = externalManuals[j];
                $("#pages").append("<div class='page externalManualWrapper' id='page" + numPages + "'><iframe class='externalManual' src='" + externalManual.Url + "'></iframe></div>");
                numPages += 1;
            }
        }
    }

    function displayContainers(containers) {
        var html = "";
        var numVisible = 0;
        for (var i = 0, numContainers = containers.length; i < numContainers; i++) {
            if (containers[i].IsStudentVisible || labData.ShowHiddenContainers) {
                html += getContainerHtml(containers[i]);
                numVisible += 1;
            }
        }
        $("#containers").html(html);
        if (numVisible === 1) {
            $(".container .openInNewWindow").hide();
        } else if (isSplitWindowClient) {
            var containerIds = window.parent.getContainersOpenInSeparateWindow();
            for (var j = 0; j < containerIds.length; j++) {
                $(".container[data-id='" + containerIds[j] + "'] .openInNewWindow").addClass("open").text("Close Window");
            }
        }
    }

    function getContainerHtml(container) {
        var selected = container.Id === labData.SelectedContainerImageId;
        var cssClass = selected ? "container accent-background selected" : "container accent-background";
        var name = container.DisplayName;
        if (!container.IsStudentVisible) {
            name += " <span class='hiddenLabel'>(Hidden)</span>";
        }
        return "<div class='" + cssClass + "' data-id='" + container.Id + "'><div class='name'>" + name + "</div><div class='controls' + " + (selected ? "" : "style='display:none;'") + "><div><a class='openInNewWindow open-in-new-window-link icon-link' href='#'>Open in New Window</a></div><div><a class='openTerminal' href='#'" + (container.DisplayType === 10 && labData.ShowHiddenContainers ? "" : "style='display:none;'") + ">Open Terminal</a></div><div><a class='reconnect' href='#'>Reconnect</a></div></div></div>";
    }

    function customDomProcessing($page) {
        setupContentEventHandlers($page); //consider moving this to document level "on" handlers
        setupTaskProgress();
        $page.find(".container-terminal").each(function () {
            var $terminal = $(this);
            $terminal.html("<iframe src='/ContainerClient/" + model.key + "?containerImageId=" + $terminal.attr("data-id") + "&forceTerminal=1' style='width:100%; border:none; height:100%'>");
            $terminal.removeAttr('data-id');
        });
    }

    function setupActivityGroupEvaluationButtons() {
        var $activityGroups = $instructionsContent.find(".activityGroup");
        if ($activityGroups.length === 0) return;
        $activityGroups.each(function () {
            var saveInProgress = false;
            var evalAvailable = false;
            var $activityGroup = $(this);
            var groupEvalButtonShown = false;
            var isEmpty = $activityGroup.find('.activity').length > 0 ? false : true;
            $activityGroup.find(".activity").each(function () {
                var $activity = $(this);
                var activity = getActivityByReplacementTokenAlias(labData.Activities, $activity.attr("data-alias"));
                if (activity.saving) {
                    saveInProgress = true;
                }
                var $evaluate = $activity.find(".evaluate");
                if ($evaluate.length > 0 && !$evaluate.prop("disabled")) {
                    evalAvailable = true;
                }
                if (activity.OnDemandEvaluation) {
                    groupEvalButtonShown = true;
                }
            });
            $activityGroup.find(".evaluateActivityGroup").prop("disabled", saveInProgress || !evalAvailable);
            if (isEmpty || !groupEvalButtonShown) {
                $activityGroup.find(".evaluateActivityGroup").hide();
            }
        });
    }

    function saveActivityDelivery() {
        var activityDelivery = {
            Activities: [],
            ActivityGroups: []
        };
        // find all activities that are NOT in a activityGroup.
        $("#instructionsContent").find(".activity").not(".activityGroup .activity").each(function () {
            var $activity = $(this);
            var activity = getActivityByReplacementTokenAlias(labData.Activities, $activity.attr("data-alias"));
            if (activity !== null) {
                var delivery = { Id: activity.Id };
                activityDelivery.Activities.push(delivery);
                if (activity.RandomizeAnswerSequence && (activity.Type === 0 || activity.Type === 10)) {
                    delivery.Answers = [];
                    $activity.find(".answer").each(function () {
                        delivery.Answers.push(parseInt($(this).attr("data-id")));
                    });
                }
            }
        });
        // find all activities that are in a activityGroup
        $("#instructionsContent").find(".activityGroup").each(function () {
            var $activityGroup = $(this);
            var activityGroup = getActivityGroupByAlias(labData.ActivityGroups, $activityGroup.attr("data-alias"));
            if (activityGroup !== null) {
                var activityGroupDelivery = { Id: activityGroup.Id, Activities: [] };
                activityDelivery.ActivityGroups.push(activityGroupDelivery);
                $activityGroup.find(".activity").each(function () {
                    var activity = getActivityByReplacementTokenAlias(labData.Activities, $(this).attr("data-alias"));
                    if (activity !== null) {
                        activityGroupDelivery.Activities.push(activity.Id);
                    }
                });
            }
        });
        var activityDeliveryJson = JSON.stringify(activityDelivery);
        if (activityDeliveryJson !== labData.ActivityDeliveryJson && !model.isPreview) {
            labData.ActivityDeliveryJson = activityDeliveryJson;
            var url = "/Instructions/SaveActivityDelivery/" + model.id;
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { activityDeliveryJson: activityDeliveryJson },
                cache: false,
                url: url
            }).always(function (response) {
                if (!response || !response.Success) {
                    var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
                    console.error("Error saving activity delivery. " + errorMessage);
                    return;
                }
            });
        }
        setupActivityGroupEvaluationButtons();
    }

    function displayInstructions(instructions) {
        if (instructions) {
            instructionsProcessor.process(
                instructions,
                "pages",
                labData.ContentRoot,
                labData.ReplacementTokens,
                customDomProcessing,
                labData.Activities,
                labData.ActivityGroups,
                labData.Variables,
                processVariables,
                labData.Replacements,
                saveActivityDelivery
            );
        }
        appendExternalManualPages();
        configureInstructionsPaging();
        saveActivityDelivery();
    }

    function showFullScreenMessage(options) {
        if (isChildClient) {
            return window.parent.showFullScreenMessage(options);
        }
        var $dialog = $("#fullScreenMessage");
        if (fullScreenMessageShown) {
            $("#fullScreenMessage").show();
        } else {
            $("#fullScreenMessage").fadeIn(function () {
                $labClient.show(); //lab client is initially hidden, this ensures it is visible underneath the message 
            });
        }
        fullScreenMessageShown = true;
        if (options) {
            $("#fullScreenMessageTitle").html(options.title ? options.title : "").removeAttr("tabindex");
            $("#fullScreenMessageText").html(options.message ? options.message : "");
            if (options.showLoadingImage) {
                $("#fullScreenMessage").addClass("withLoadingImage");
            } else {
                $("#fullScreenMessage").removeClass("withLoadingImage");
            }
            let $buttonWrapper = $("#fullScreenMessageButtonWrapper");
            if (options.buttons || (options.showCloseWindowButton && window.opener)) {
                $buttonWrapper.show();
                if (options.showCloseWindowButton && window.opener) {
                    $("#closeWindow").show();
                    if (options.buttons) {
                        $("#closeWindow").removeClass("primary");
                    } else {
                        $("#closeWindow").addClass("primary").focus();
                    }
                } else {
                    $("#closeWindow").hide();
                }
                let $buttons = $("#fullScreenMessageButtons");
                $buttons.html("");
                if (options.buttons) {
                    for (let i = 0; i < options.buttons.length; i++) {
                        let button = options.buttons[i];
                        let $button = $('<input type="button" value="' + button.text + '" />');
                        if (button.click) {
                            $button.click(button.click);
                        }
                        if (button.primary) {
                            $button.addClass("primary");
                        }
                        if (button.escape) {
                            $button.addClass("escape");
                        }
                        $buttons.append($button);
                    }
                    $buttonWrapper.find("input.escape").focus();
                }
            } else {
                $buttonWrapper.hide();
                $("#fullScreenMessageTitle").attr("tabindex", "0");
                $("#fullScreenMessageTitle")[0].blur(); //in case title already had focus, we need to remove focus so screen readers pick up the change in text
                $("#fullScreenMessageTitle")[0].focus();
            }
            if (options.open) {
                options.open();
            }
        }
        return {
            close: close,
            getElementById: function (elementId) {
                var $element = $dialog.find("#" + elementId);
                if ($element.length > 0) return $element[0];
                return null;
            }
        }
    }

    function hideFullScreenMessage(complete, disableFade) {
        if (isChildClient) {
            window.parent.hideFullScreenMessage();
            if (complete !== null && typeof complete === "function") {
                complete();
            }
        } else {
            if (disableFade) {
                if (complete !== null && typeof complete === "function") {
                    complete();
                }
            } else {
                $("#fullScreenMessage").fadeOut(function () {
                    if (complete !== null && typeof complete === "function") {
                        complete();
                    }
                });
            }
        }
        fullScreenMessageShown = false;
    }

    function getFullScreenMessage() {
        if (isChildClient) {
            return window.parent.getFullScreenMessage();
        }
        return $("#fullScreenMessage");
    }

    function truncate(input, maxLength, useWordBoundary) {
        if (input.length <= maxLength) { return input; }
        var subString = input.substr(0, maxLength - 1);
        return (useWordBoundary
            ? subString.substr(0, subString.lastIndexOf(' '))
            : subString) + "...";
    }

    function pauseInlineVideos() {
        var $selectedPage = $(".page.selected");
        if ($selectedPage.length > 0) {
            $selectedPage.find("video").each(function () {
                try {
                    if (this.currentTime > 0 && !this.paused && !this.ended && this.readyState > 2) {
                        this.pause();
                    }
                } catch (e) {
                    //
                }
            });
            $selectedPage.find('.youTubeVideo iframe').each(function () {
                try {
                    this.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
                } catch (e) {
                    //
                }
            });
        }
    }

    function gotoPage(newPageIndex, top) {
        pageIndex = newPageIndex;
        pageIndexChanged();
        pauseInlineVideos();
        configureInstructionsPaging();
        if (top) {
            $instructionsContent.scrollTop(top);
        } else {
            $instructionsContent.scrollTop(0);
        }
        savePageIndex(pageIndex);
    }

    function savePageIndex(pageIndex) {
        if (model.isPreview) return;
        var url = "/Instructions/SavePageIndex/" + model.id + "?pageIndex=" + pageIndex;
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        });
    }

    function configureInstructionsPaging() {
        if (labData == null) return;
        let numPages = $(".page").length;
        if (pageIndex > numPages - 1) { //in case pages have changed and the page the user was on is no longer available.
            pageIndex = 0;
        }

        if (pageIndex === 0) {
            $("#previous").addClass("disabled").attr("title", "").attr("tabindex", "-1").attr("aria-disabled", "true");
        } else {
            let previousPageTitle = "Previous";
            let $previousPageTitle = $("#page" + (pageIndex - 1) + " > :first-child");
            if ($previousPageTitle.length > 0 && $previousPageTitle.is(":header")) {
                previousPageTitle += ": " + $previousPageTitle.text();
            }
            $("#previous").removeClass("disabled").attr("title", previousPageTitle).attr("tabindex", "0").removeAttr("aria-disabled");
        }

        if (numPages <= pageIndex + 1) {
            if (labData.IsExam) {
                $("#next").text("Submit").attr("title", "Submit").removeClass("disabled");
            } else if ($("#exit").length > 0) {
                $("#next").text("End").attr("title", "End").removeClass("disabled");
            } else {
                $("#next").addClass("disabled").attr("title", "");
            }
        } else {
            let nextButtonText = "Next";
            let nextPageTitle = "Next";
            let $nextPageTitle = $("#page" + (pageIndex + 1) + " > :first-child");
            if ($nextPageTitle.length > 0 && $nextPageTitle.is(":header")) {
                nextPageTitle += ": " + $nextPageTitle.text();
            }
            if (model.layoutVersion === 1) {
                let pageWidth = $(window).width();
                if (pageWidth > 340) {
                    let maxLength = pageWidth >= 450 ? 40 : (pageWidth > 405 ? 33 : 28);
                    nextButtonText = truncate(nextPageTitle, maxLength, true);
                }
            }
            $("#next").text(nextButtonText).attr("title", nextPageTitle).removeClass("disabled");
        }

        $(".page").removeClass("selected");
        let $currentPage = $("#page" + pageIndex);
        $currentPage.addClass("selected");

        if (model.layoutVersion > 1 && !labData.EnableTaskProgressTracking) {
            if (numPages <= 1) {
                $("#taskProgressBar").hide();
            } else {
                $("#taskProgressBar").show();
            }
            let percentComplete = 0;
            let currentPageNum = pageIndex + 1;
            if (numPages > 0) {
                percentComplete = Math.round((currentPageNum / numPages) * 100);
            }
            $("#taskProgress").css("width", percentComplete + "%");
            $("#taskProgressBar").attr("title", "Page {0}/{1} ({2}%)".format(currentPageNum, numPages, percentComplete));
        }

        if ($currentPage.find("iframe.externalManual").length > 0) {
            $instructionsContent.addClass("externalManual");
        } else {
            $instructionsContent.removeClass("externalManual");
        }

        setupKnowledgeExpanders($currentPage);
        refreshTerminalIFrames($currentPage);
        processAiContent($currentPage);
        $instructionsNavigation.show();
        $instructionsContent.addClass("withNavigation");

        $currentPage.find(".virtual-machine-console").each(function () {
            var $vmConsole = $(this);
            if ($vmConsole.find("iframe").length === 0) {
                var vmId = $vmConsole.attr("data-id");
                var $existingInLab = $instructionsContent.find(".virtual-machine-console[data-id='" + vmId + "'] iframe");
                var $existingInPage = $currentPage.find(".virtual-machine-console[data-id='" + vmId + "'] iframe");
                var url = "/VirtualizationClient/" + model.key + "?autoFocus=0&vmonly=1&vmId=" + vmId;
                if ($existingInLab.length > 0) {
                    url += "&takeControl=1";
                }
                $vmConsole.html("<iframe src='' style='width:" + $vmConsole.attr("data-width") + "px; height:" + $vmConsole.attr("data-height") + "px; border:none;'>");
                window.setTimeout(function () {
                    $vmConsole.find('iframe').attr("src", url);
                }, $existingInPage.length * 100);
            }
        });

        $currentPage.find(".ai-chat").each(function () {
            this.scrollTop = this.scrollHeight;
            let $ai_output = $(this).find(".ai-output");
            let $lastUserMessage = $ai_output.find(".message.user").last();
            if ($lastUserMessage.length == 1) {
                let ai_output = $ai_output[0];
                ai_output.scrollTop = $lastUserMessage[0].offsetTop - 5;
            }
        })
    }

    function selectTab($tabHeading) {
        var unselectedTabs = $tabHeading.siblings(".tabHeading").not($tabHeading);
        unselectedTabs.removeClass("selected");
        unselectedTabs.attr("aria-selected", "false");
        unselectedTabs.attr("tabindex", "-1");
        $tabHeading.addClass("selected");
        $tabHeading.attr("aria-selected", "true");
        $tabHeading.attr("tabindex", "0");
        $(".tab").not($tab).hide();
        var $tab = $("#" + $tabHeading.attr("data-target"));
        $tab.show();
    }

    function showClickFeedbackMessageForElement($element, message, verticalOffset, horizontalOffset, duration) {
        if (duration == null) duration = 2000;
        if (verticalOffset == null) verticalOffset = -40;
        if (horizontalOffset == null) horizontalOffset = 0;
        let offset = $element.offset();
        let x = offset.left + horizontalOffset;
        let y = offset.top + verticalOffset;
        showClickFeedbackMessage(message, x, y, duration);
    }

    function showClickFeedbackMessage(text, x, y, duration) {
        let $message = $("<div class='clickFeedbackMessage noselect' role='alert'>" + text + "</div>");
        $message.appendTo($("body")).hide();
        $message.css({ left: x, top: y });
        $message.fadeIn("fast");
        window.setTimeout(function () {
            $message.fadeOut("fast", function () { $message.remove(); });
        }, duration);
    }

    function showRightOrientedClickFeedbackMessageForElement($element, message, verticalOffset, horizontalOffset, duration) {
        if (duration == null) duration = 2000;
        if (verticalOffset == null) verticalOffset = - 40;
        if (horizontalOffset == null) horizontalOffset = 15;
        let offset = $element.offset();
        let x = horizontalOffset;
        let y = offset.top + verticalOffset;
        showRightOrientedClickFeedbackMessage(message, x, y, duration);
    }

    function showRightOrientedClickFeedbackMessage(text, x, y, duration) {
        let $message = $("<div class='clickFeedbackMessage noselect' role='alert'>" + text + "</div>");
        $message.appendTo($("body")).hide();
        $message.css({ right: x, top: y });
        $message.fadeIn("fast");
        window.setTimeout(function () {
            $message.fadeOut("fast", function () { $message.remove(); });
        }, duration);
    }

    function endLab(markComplete) {
        if (isSplitWindowClient) {
            window.parent.opener.endLab(markComplete);
            return;
        }
        if (model.isPreview) {
            hideFullScreenMessage();
            showRightOrientedClickFeedbackMessageForElement(model.layoutVersion == 1 ? $("#mainMenuButton") : $("#exitMenuButton"), "Lab would now be ended", -10);
            return;
        }
        showFullScreenMessage({ title: "Ending Lab", message: "", showLoadingImage: true });
        let url = "/Lab/End/" + model.id;
        if (markComplete) {
            url += "?complete=1";
        }
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            if (!response || !response.Success) {
                var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
                showFullScreenMessage({ title: ":-(", message: errorMessage, buttons: [{ text: "OK", click: hideFullScreenMessage, primary: true, escape: true }] });
                return;
            }
            labIsComplete();
            gotoPostLabActivity("Lab Closed", "You can now close this window");
        });
    }

    function saveLab() {
        if (isSplitWindowClient) {
            window.parent.opener.saveLab();
            return;
        }
        if (model.isPreview) {
            showRightOrientedClickFeedbackMessageForElement(model.layoutVersion == 1 ? $("#mainMenuButton") : $("#exitMenuButton"), "Lab would now be saved", -10);
            hideFullScreenMessage();
            return;
        }
        showFullScreenMessage({ title: (labData.IsExam && model.layoutVersion === 1 ? "Your exam is saving" : "Your lab is saving"), message: "", showLoadingImage: true });
        let url = "/Lab/Save/" + model.id;
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            if (response && response.TooManySavedLabs) {
                var messageText = "<div>" + response.Error + "</div>";
                messageText += "<h4>Please select which previously saved lab to cancel :</h4>";
                messageText += "<form id='labToCancel'><table>"
                response.ExistingLabs.forEach(function (existingLab) {
                    messageText += "<tr><td><input type='radio' id='" + existingLab.id + "' name='labToCancel' value='" + existingLab.id + "'></td>";
                    messageText += "<td><label for='" + existingLab.id + "'><strong>" + existingLab.name + "</strong><br>" + existingLab.startedText + "<br>" + existingLab.saveExpiresText + "</label></td></tr>";
                });
                messageText += "</table></form>";
                messageText += "<h5>The selected saved lab will be gone forever and your open lab will be saved.</h5>";

                var $dialog = showFullScreenMessage({
                    title: "Too Many Saved Labs", message: messageText, buttons: [
                        {
                            text: "Submit",
                            click: function CancelExistingSaveAndMakeNewSave() {
                                var labToCancel = $($dialog.getElementById("labToCancel")).find("input[name='labToCancel']:checked").val();
                                $.ajax({
                                    type: "POST",
                                    dataType: "json",
                                    url: "/Lab/CancelExistingSave/",
                                    data: { id: labToCancel, currentLabId: model.id },
                                    cache: false
                                }).always(function (response) {
                                    if (!response || !response.Success) {
                                        showErrorMessage(response);
                                        return;
                                    }
                                    else {
                                        $.ajax({
                                            type: "POST",
                                            dataType: "json",
                                            url: "/Lab/Save/" + model.id,
                                            cache: false
                                        }).always(function (response) {
                                            if (!response || !response.Success) {
                                                showErrorMessage(response);
                                                return;
                                            }
                                            else {
                                                showLabSavedMessage();
                                            }
                                        });
                                    }
                                });
                            },
                            primary: true,
                            escape: false
                        },
                        { text: "Cancel", click: hideFullScreenMessage, primary: false, escape: true }
                    ]
                });
                return;
            }
            if (!response || !response.Success) {
                showErrorMessage(response);
                return;
            }
            labIsComplete();
            if (response.IsAnonymousSave) {
                showFullScreenMessageForAnonymousSave(response.ResumeUrl, response.QrCode);
            } else {
                showLabSavedMessage();
            }
        });
    }

    function showErrorMessage(response) {
        var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
        showFullScreenMessage({ title: ":-(", message: errorMessage, buttons: [{ text: "OK", click: hideFullScreenMessage, primary: true, escape: true }] });
    }

    function showLabSavedMessage() {
        if (labData.PostLabUrl) {
            if (isChildClient) {
                window.parent.location = labData.PostLabUrl;
            } else {
                window.location = labData.PostLabUrl;
            }
        } else {
            var expiration = new Date();
            expiration.setDate(expiration.getDate() + labData.MaxSaveDays);
            var title = labData.IsExam && model.layoutVersion === 1 ? "Your exam is saved" : "Your lab is saved";
            var message = labData.IsExam && model.layoutVersion === 1 ? "Your exam has been saved and will be available for you to resume for the next {0} days. It will expire {1}.".format(labData.MaxSaveDays, expiration.toLocaleString()) : "Your lab has been saved and will be available for you to resume for the next {0} days. It will expire {1}.".format(labData.MaxSaveDays, expiration.toLocaleString());
            showFullScreenMessage({ title: title, message: message, showCloseWindowButton: true });
        }
    }

    function showFullScreenMessageForAnonymousSave(resumeUrl, qrCode) {
        var expiration = new Date();
        expiration.setDate(expiration.getDate() + labData.MaxSaveDays);
        var text = "Your lab has been saved and will be available for you to resume for the next {0} days. It will expire {1}.".format(labData.MaxSaveDays, expiration.toLocaleString());
        text += "<div>Your lab can be resumed here:</div><div style='font-size:125%; margin:25px 0;'>" + resumeUrl + "</div>";
        text += "<div style='margin-top:15px'>You can e-mail this link to yourself.</div>";
        text += "<div style='margin-top:15px'><input id='anonymousResumeEmail' type='text' style='width:300px;' maxlength='256' placeholder='E-mail Address' /> <input type='button' id='sendAnonymousResumeEmail' value='Send'/> <span id='sendAnonymousResumeEmailMessage' style='margin-left:10px;'></span></div>"
        if (qrCode) {
            text += "<div style='margin-top:15px'>Or you can use this QR code to email the link to yourself from your smart phone. You may need to install a QR code scanner app on your device.</div>";
            text += "<div style='margin-top:15px'><img src='data:image/png;base64," + qrCode + "' /></div>";
        }
        if (labData.PostLabUrl) {
            showFullScreenMessage({
                title: "Your lab is saved",
                message: text,
                buttons: [{
                    text: "OK",
                    primary: true,
                    click: function () {
                        if (isChildClient) {
                            window.parent.location = labData.PostLabUrl;
                        } else {
                            window.location = labData.PostLabUrl;
                        }
                    }
                }]
            });
        } else {
            text += "<div style= 'margin-top:20px; border-top:solid 1px #ccc; padding-top:20px;' > Get here by mistake? You can resume right away...</div >";
            showFullScreenMessage({
                title: "Your lab is saved",
                message: text,
                showCloseWindowButton: true,
                buttons: [{
                    text: "Resume Lab",
                    click: resume
                }]
            });
        }
        var $anonymousResumeEmail = isChildClient ? $(parent.getElementById("anonymousResumeEmail")) : $("#anonymousResumeEmail");
        var $sendAnonymousResumeEmail = isChildClient ? $(parent.getElementById("sendAnonymousResumeEmail")) : $("#sendAnonymousResumeEmail");
        var $sendAnonymousResumeEmailMessage = isChildClient ? $(parent.getElementById("sendAnonymousResumeEmailMessage")) : $("#sendAnonymousResumeEmailMessage");

        $anonymousResumeEmail.focus();
        var sending = false;
        $sendAnonymousResumeEmail.on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (sending) return;
            var email = $anonymousResumeEmail.val();
            var valid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
            if (!valid) {
                $sendAnonymousResumeEmailMessage.html("Please enter a valid email address");
                return;
            }
            sending = true;
            $sendAnonymousResumeEmail.prop("disabled", true);
            $sendAnonymousResumeEmailMessage.html("Sending...");
            $.ajax({
                url: "/Lab/SendAnonyousResumeEmail/" + model.id,
                type: "POST",
                dataType: 'json',
                data: { email: email },
                cache: false
            }).always(function (response) {
                sending = false;
                $sendAnonymousResumeEmail.prop("disabled", false);
                if (response && response.Success) {
                    $sendAnonymousResumeEmailMessage.html("An email has been sent to " + email);
                    $anonymousResumeEmail.val("").focus();
                } else {
                    $sendAnonymousResumeEmailMessage.html(response && response.Error ? response.Error : "Sorry an error occurred");
                }
            });
        });
    }

    function referenceCloudPortalWindow() {
        // save a reference early, before the title has a chance to change. This will return a reference to the cloud portal window
        // that was opened by the cloud.js code file.
        window.cloudPortalWindow = window.open("", "cloudPortal");
        if (window.cloudPortalWindow) {
            window.cloudPortalWindow.focus();
        }
    }

    function closePortalWindow() {
        if (isChildClient || !labData.CloudPortalUrl) return;
        try {
            window.cloudPortalWindow?.close();
        } catch (e) {
            console.error('closePortalWindow', e);
        }
    }

    function closeWindow() {
        try {
            window.close();
        } catch (e) {
            console.error('closeWindow', e);
        }
    }

    function gotoPostLabActivity(title, message) {
        if (labData.EvaluationId) {
            showFullScreenMessage({ title: "Preparing Evaluation", showLoadingImage: true });
            window.setTimeout(function () {
                var evaluationUrl = labData.EvaluationServiceUrl + "/Evaluation/Submit/" + model.key;
                var hasQuery = false;

                if ($("#theme").length > 0) {
                    evaluationUrl += "?theme=" + encodeURIComponent($("#theme").val());
                    hasQuery = true;
                }

                evaluationUrl += (hasQuery ? "&" : "?") + "evaluationId=" + encodeURIComponent(labData.EvaluationId);

                if (isChildClient) {
                    window.parent.location = evaluationUrl;
                } else {
                    window.location = evaluationUrl;
                }
            }, 500);
        } else if (labData.PostLabUrl) {
            if (isChildClient) {
                window.parent.location = labData.PostLabUrl;
            } else {
                window.location = labData.PostLabUrl;
            }
        } else {
            showFullScreenMessage({ title: title, message: message, showCloseWindowButton: true });
        }
    }



    function setupWindowEventHandlers() {
        $(window).resize(function () {
            configureInstructionsPaging();
            setZoomerLocation();
            let $dialog = $("#instructionsDialog");
            if ($dialog.length > 0) {
                setupKnowledgeExpanders($dialog);
            }
        });
        $(window).on("unload", function () {
            closeAllChildWindows();
            if (isChildClient) {
                window.parent.childWindowClosing();
            }
        });
        window.onbeforeunload = function () {
            if (complete === true || model.monitor || disableNavigationWarning || model.isPreview) return;
            return "Your lab environment is still running. To exit, please make a choice from the Exit menu.";
        };

        if (model.isPreview) {
            window.addEventListener(
                "message",
                (event) => {
                    if (event.data.type === "themeSettings") {
                        let url = `/theme/generate-preview-stylesheet-v2?themeId=${event.data.themeId}&mode=${event.data.mode}&headerDisplayType=${event.data.headerDisplayType}`;
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: event.data.themeSettings,
                            cache: false,
                            url: url
                        }).always(function (response) {
                            if (response == null || !response.Success) {
                                let errorMessage = response?.Error ? response.Error : "Sorry an error occurred";
                                console.error(`Error processing theme preview data. ${errorMessage}`);
                                return;
                            }
                            $("#themeStylesheet").attr("href", response.StyleSheetUrl);
                        });
                    }
                },
                false,
            );
        }
    }

    function updateTimer(minutesRemaining, isShareExpiration) {
        if (complete) { return; }
        if (minutesRemaining <= 0) {
            $("#timer").html("");
            $("#timerWrapper").removeClass("expiring").removeClass("critical").removeClass("warning");
            if (!isShareExpiration && labData.State === 40) {
                handleTimeExpired();
            }
        } else {
            var m = minutesRemaining % 60;
            var h = Math.floor((minutesRemaining) / 60);
            if (h >= 1) {
                if (m > 0) {
                    $("#timer").html("{0} Hr {1} Min Remaining".format(h, m));
                } else {
                    if (h === 1) {
                        $("#timer").html("1 Hour Remaining");
                    } else {
                        $("#timer").html("{0} Hours Remaining".format(h));
                    }
                }
            } else {
                if (m === 1) {
                    $("#timer").html("1 Minute Remaining");
                } else {
                    $("#timer").html("{0} Minutes Remaining".format(m));
                }
            }
            if (isShareExpiration) {
                $("#timer").html($("#timer").html() + " (share expires)");
            }
            if (minutesRemaining <= 5) {
                $("#timerWrapper").addClass("expiring");
            } else {
                $("#timerWrapper").removeClass("expiring");
            }
            if (minutesRemaining <= 10) {
                $("#timer").removeClass("critical");
                $("#timer").addClass("warning");
                timeWarningShown = true;
            } else if (minutesRemaining <= 5) {
                $("#timer").removeClass("warning");
                $("#timer").addClass("critical");
                timeWarningShown = true;
            } else if (timeWarningShown) {
                $("#timer").removeClass("critical");
                $("#timer").removeClass("warning");
            }
            if (minutesRemaining < labData.MinimumLabMinutesRemainingToAllowSave) {
                _enoughTimeRemainsToSave = false;
            }
            if (canExtend && !isShareExpiration && labData.AllowTimeExtensions && minutesRemaining <= labData.PromptForExtensionMinutes && !extensionPromptHasShown && $labClient.is(":visible")) {
                showTimeExtensionNotification();
            }
        }
    }

    function waitForJob(job, pollInterval, timeout, onComplete, onError, onCancelled, onStale, attempt) {
        if (timeout <= 0) {
            if (onError) {
                job.Status = 30;
                job.Error = "The job timed out.";
                onError(job);
            }
            return;
        }
        switch (job.Status) {
            case 0:
                window.setTimeout(function () {
                    $.ajax({
                        url: "/Job/" + job.Id,
                        type: "POST",
                        dataType: "json",
                        data: {},
                        cache: false
                    }).always(function (response) {
                        if (response && response.Success) {
                            if (response.Job.Status == 0 && response.Stale && onStale) {
                                onStale(attempt + 1);
                            } else {
                                waitForJob(response.Job, pollInterval, timeout - pollInterval, onComplete, onError, onCancelled, onStale, attempt);
                            }
                        } else {
                            if (onError) onError(response);
                        }
                    });
                }, pollInterval);
                break;
            case 10:
                if (onComplete) onComplete(JSON.parse(job.ResultData));
                break;
            case 20:
                if (onCancelled) onCancelled(job);
                break;
            case 30:
                if (onError) onError(job);
                break;
        }
    }

    function setPauseServerSync(val) {
        pauseServerSync = val;
        if (labData.IsVirtualizationClient) {
            window.parent.pauseServerSync(val);
        }
    }

    function submitForScoring() {
        showFullScreenMessage({ title: "Grading", showLoadingImage: true });
        //Wait for activities to be submitted.
        var _submitForScoring = function (attemptCount) {
            var _activitySaving = false;
            for (var i = 0, numActivities = labData.Activities.length; i < numActivities; i++) {
                if (labData.Activities[i].saving) {
                    _activitySaving = true;
                    break;
                }
            }
            //We will wait up to 30 seconds for activities to be saved. After 30 scoring proceeds
            if ((syncInProgress || _activitySaving) && (attemptCount < 20)) {
                window.setTimeout(function () { _submitForScoring(attemptCount + 1); }, 1500);
                return;
            }

            $.ajax({
                url: "/Lab/SubmitForScoring/" + model.id,
                type: "POST",
                dataType: "json",
                data: {},
                cache: false
            }).always(function (response) {
                if (response && response.Success) {
                    labData.State = 170;
                    if (labData.IsVirtualizationClient) {
                        window.parent.setLabState(170);
                    }
                    window.setTimeout(function () {
                        setPauseServerSync(false);
                        //we can now speed the sync up
                        startServerSync(2000);
                    }, 1000);
                    // closePortalWindow is called in labIsComplete. Closing the portal window here
                    // will cause labIsComplete closePortWindow call to attempt to close the socring window.
                    //closePortalWindow();
                } else {
                    setPauseServerSync(false);
                    alert(response && response.Error ? response.Error : "Sorry an error occurred");
                    hideFullScreenMessage();
                }
            });
        }
        window.setTimeout(function () {
            //it may take a moment for the scoring to begin and the lab instance state change to flush in cache
            //to avoid the background sync from seeing the lab as running, we briefly pause the sync.
            setPauseServerSync(true);
            _submitForScoring(0);
        }, 2000);
    }

    function startServerSync(pollInterval) {
        if (labData.IsVirtualizationClient) {
            window.parent.startVirtualizationServerSync(pollInterval);
        } else {
            if (syncInterval) {
                window.clearInterval(syncInterval);
            }
            syncInterval = window.setInterval(function () { synchronizeWithServer(); }, pollInterval);
        }
    }

    function showExamResult() {
        $.ajax({
            url: "/Lab/GetExamScore/" + model.id,
            type: "POST",
            dataType: "json",
            data: {},
            cache: false
        }).always(function (response) {
            if (!response || !response.Success) {
                gotoPostLabActivity("Lab Closed", "Your lab has been closed.");
                return;
            }
            let buttons = null;
            let showCloseWindowButton = true;
            if (labData.EvaluationId || labData.PostLabUrl) {
                showCloseWindowButton = false;
                buttons = [{ text: "Next >", click: gotoPostLabActivity, primary: true }]
            }
            if (response.DisplayType == 40) {
                if (isChildClient) {
                    window.parent.location = "/ActivityGroupReport/" + model.key;
                } else {
                    window.location = "/ActivityGroupReport/" + model.key;
                }
            } else if (response.DisplayType == 30) {
                if (isChildClient) {
                    window.parent.location = "/SkillReport/" + model.key;
                } else {
                    window.location = "/SkillReport/" + model.key;
                }
            } else if (response.DisplayType === 20) {
                if (isChildClient) {
                    window.parent.location = "/Instructions/ExamResult/" + model.key;
                } else {
                    window.location = "/Instructions/ExamResult/" + model.key;
                }
            } else if (response.DisplayType === 10) {
                showFullScreenMessage({
                    title: response.Passed ? "Congratulations, you passed!" : "Sorry, you did not pass.",
                    message: "Your score: {0} / {1}".format(response.Score, response.PossibleScore),
                    showCloseWindowButton: showCloseWindowButton,
                    buttons: buttons
                });
            } else {
                showFullScreenMessage({
                    title: "Submitted For Grading",
                    message: "Your environment has been successfully submitted for grading. You can now close this browser window.",
                    showCloseWindowButton: showCloseWindowButton,
                    buttons: buttons
                });
            }
        });
    }

    function showTimeExtensionNotification() {
        extensionPromptHasShown = true;
        var minutesToExtend;

        $.ajax({
            url: "/Lab/ExtensionTime/" + model.id,
            type: "Post",
            dataType: "json",
            cache: false,
        }).done(function (response) {
            if (response.MinutesToExtend !== undefined && response.MinutesToExtend < labData.ExtensionMinutes) {
                if (response.MinutesToExtend < 1)
                    return;
                minutesToExtend = response.MinutesToExtend;
            }
            else {
                minutesToExtend = labData.ExtensionMinutes;
            }
            var content = "You now have less than {0} minutes left in your lab. Would you like to extend your lab by {1} minutes?".format(labData.PromptForExtensionMinutes, minutesToExtend) + "<div>";
            var notification = {
                hideCloseButton: true,
                content: content,
                buttons: [
                    {
                        text: "Yes",
                        primary: true,
                        closeNotification: true,
                        click: function () {
                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                data: {},
                                cache: false,
                                url: "/Lab/Extend/" + model.id
                            }).always(function (response) {
                                if (!response || !response.Success) {
                                    showNotification({ content: response && response.Error ? response.Error : "Sorry, an error occurred. Your lab time was not extended." });
                                    return;
                                }
                                extensionPromptHasShown = false;
                                var msg = "Your lab has been extended by {0} minutes.".format(labData.ExtensionMinutes);
                                if (response.message && response.message.trim().length > 0) {
                                    msg = response.message;
                                }
                                if (!response.CanExtend) {
                                    canExtend = false;
                                }
                                showNotification({ content: msg, autocloseTimeout: 5000 });
                                updateTimer(response.MinutesRemaining);
                            });
                        }
                    },
                    {
                        text: "No",
                        closeNotification: true
                    }
                ]
            };
            showNotification(notification);
        });
    }

    function handleTimeExpired() {
        if (labData.IsExam) {
            submitForScoring();
        } else {
            showFullScreenMessage({ title: "Closing Lab", showLoadingImage: true });
            setPauseServerSync(true); //just in case the request hangs, we don't want to end up here again on the next sync.
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {},
                cache: false,
                url: "/Lab/TimeExpired/" + model.id
            }).always(function (response) {
                setPauseServerSync(false);
                if (response.Saved) {
                    showFullScreenMessage({
                        title: labData.IsExam && model.layoutVersion === 1 ? "Saving Exam" : "Saving Lab",
                        message: labData.IsExam && model.layoutVersion === 1 ? "Your exam is being saved." : "Your lab is being saved.",
                        showLoadingImage: true
                    });
                } else {
                    labIsComplete();
                    gotoPostLabActivity("Lab Closed", "Your lab time has expired. ");
                }
            });
        }
    }

    function closeAllChildWindows() {
        for (var i = 0; i < childWindows.length; i++) {
            try {
                childWindows[i].close();
            } catch (e) {
                //
            }
        }
        childWindows = [];
    }

    function labIsComplete() {
        if (complete === true) return;
        complete = true;
        closeAllChildWindows();
        closePortalWindow();
        $("#modalDialog").remove();
        if (window.opener) {
            try {
                window.opener.postMessage("labDone", "*");
            } catch (e) {
                //
            }
        }
        try {
            if (window.parent && window.parent.labIsComplete) {
                window.parent.labIsComplete();
            }
        } catch (e) {
            //
        }
    }

    function resume() {
        showFullScreenMessage({
            title: "Resuming",
            message: labData.VirtualizationPlatform === 20 ? "This shouldn\'t take long" : "This can take several minutes.",
            showLoadingImage: true
        });
        var url = "/Lab/Resume/" + model.key;

        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            if (!response || !response.Success) {
                var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
                showFullScreenMessage({
                    title: ":-(",
                    message: errorMessage,
                    buttons: [{
                        text: "Resume Lab",
                        click: resume
                    }]
                });
                return;
            }
            if (isChildClient) {
                window.parent.location = response.Url;
            } else {
                window.location = response.Url;
            }
        });
    }

    var syncInProgress = false;
    var lastMonitorSync = null;

    function synchronizeWithServer() {
        if (complete || pauseServerSync || syncInProgress) {
            return;
        }
        syncInProgress = true;
        var url = "/Instructions/Sync/" + model.id;
        if (model.monitor) {
            url += "?monitor=1";
            if (lastMonitorSync) {
                url += "&lastMonitorSync=" + lastMonitorSync;
            }
        } else {
            if (lastUnsyncedActivity) {
                var la = new Date().valueOf() - lastUnsyncedActivity;
                url += "?la=" + la;
                lastUnsyncedActivity = null;
            }
        }
        url += (url.indexOf("?") >= 0 ? "&" : "?") + "userId=" + labData.UserId;
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            syncInProgress = false;
            if (!response || !response.Success || complete) {
                return;
            }
            if (response.AccountDisabled) {
                labIsComplete();
                showFullScreenMessage({ title: "Access Denied", message: "Your account has been disabled. If you believe this to be in error, please contact support.", showCloseWindowButton: true });
                return;
            }
            if (response.Transferred) {
                labIsComplete();
                showFullScreenMessage({ title: "Your lab instance has been transferred to another user", showCloseWindowButton: true });
                return;
            }
            if (response.ShareExpired) {
                labIsComplete();
                showFullScreenMessage({ title: "Your share has expired", showCloseWindowButton: true });
                return;
            }
            var previousState = labData.State;
            labData.State = response.State;
            switch (response.State) {
                case 0: //off
                case 110: //tearing down
                    labIsComplete();
                    if (previousState === 170 || labData.IsExam) {
                        showExamResult();
                    } else {
                        showFullScreenMessage({ title: "Lab Closed", message: "Your lab has been closed.", showCloseWindowButton: true });
                    }
                    return;
                case 40: //running
                    if (remoteStateChangeInProgress) {
                        remoteStateChangeInProgress = false;
                        hideFullScreenMessage();
                    }
                    if (previousState === 170) {
                        hideFullScreenMessage();
                    }
                    break;
                case 50: //saving
                    showFullScreenMessage({
                        title: labData.IsExam && model.layoutVersion === 1 ? "Saving Exam" : "Saving Lab",
                        message: labData.IsExam && model.layoutVersion === 1 ? "Your exam is being saved." : "Your lab is being saved.",
                        showLoadingImage: true
                    });
                    break;
                case 60: //saved
                case 150: //moving while saved
                    labIsComplete();
                    if (response.IsAnonymousSave) {
                        showFullScreenMessageForAnonymousSave(response.ResumeUrl, response.QrCode);
                    } else {
                        var expiration = new Date();
                        expiration.setDate(expiration.getDate() + labData.MaxSaveDays);
                        showFullScreenMessage({ title: "Lab Saved", message: "Your lab has been saved and will be available for you to resume for the next {0} days. It will expire {1}.".format(labData.MaxSaveDays, expiration.toLocaleString()), showCloseWindowButton: true, buttons: [{ text: "Resume Lab", primary: true, click: resume }] });
                    }
                    return;
                case 70: //resuming
                    if (!remoteStateChangeInProgress) {
                        remoteStateChangeInProgress = true;
                        showFullScreenMessage({
                            title: "Resuming",
                            message: labData.VirtualizationPlatform === 20 ? "This shouldn\'t take long" : "This can take several minutes.",
                            showLoadingImage: true
                        });
                    }
                    break;
                case 80: //creating snapshot
                case 90: //applying snapshot
                case 100: //saving diff disks
                case 120: //cloning
                case 130: //creating as clone
                case 140: //Moving
                case 160: //storing start state
                    //NA
                    break;
                case 170: //scoring
                    showFullScreenMessage({ title: "Grading", showLoadingImage: true });
                    break;
            }
            labData.CompletionStatus = response.CompletionStatus;
            updateTimer(response.Min, response.IsShareExpiration);

            if (model.monitor) {
                var $tabHeading = $(".tabHeading[data-id='" + response.SelectedNavigationTab + "'");
                if ($tabHeading.length > 0 && !$tabHeading.hasClass("selected")) {
                    selectTab($tabHeading);
                }
                if (response.SelectedContainerImageId) {
                    var $container = $(".container[data-id='" + response.SelectedContainerImageId + "']");
                    if ($container && !$container.hasClass("selected")) {
                        $container.click();
                    }
                }
                if (response.Theme && $("#theme").length > 0) {
                    var $option = $("#theme option[value='" + response.Theme + "']");
                    if ($option.length > 0 && !$option.prop('selected')) {
                        $option.prop('selected', 'selected');
                        $("#themeStylesheet").attr("href", "/css/" + $option.attr("data-name") + ".css?v=9");
                    }
                }
                if (response.InstructionsPageIndex !== null && pageIndex !== response.InstructionsPageIndex) {
                    pageIndex = response.InstructionsPageIndex;
                    pageIndexChanged();
                    configureInstructionsPaging();
                }
                if (response.InstructionsZoom !== null) {
                    setZoom(response.InstructionsZoom);
                }
                if (response.InstructionsScrollTop !== null && labData.InstructionsScrollTop !== response.InstructionsScrollTop) {
                    labData.InstructionsScrollTop = response.InstructionsScrollTop;
                    $instructionsContent[0].scrollTop = response.InstructionsScrollTop;
                }
                if (labData.RequireTasksCompletedInOrder && response.LastCompletedTaskIndex !== null) {
                    setLastCompletedTask(response.LastCompletedTaskIndex);
                }
                if (!labData.RequireTasksCompletedInOrder && response.CompletedTasksJson != labData.CompletedTasksJson) {
                    setCompletedTasksJson(response.CompletedTasksJson);
                }
                if (response.NavigationBarWidth && isChildClient) {
                    parent.setNavigationBarWidth(response.NavigationBarWidth);
                }
                lastMonitorSync = response.LastMonitorSync;
            }

            if (response.Notifications !== null && response.Notifications.length > 0) {
                var newNotifications = response.Notifications;
                var numNewNotifications = newNotifications.length;
                for (var i = 0; i < numNewNotifications; i++) {
                    var notification = newNotifications[i];
                    if (i === 0) {
                        showNotification({ id: notification.Id, content: notification.Text, created: notification.Created, persistent: true });
                    } else {
                        showNotificationWithDelay({ id: notification.Id, content: notification.Text, created: notification.Created, persistent: true }, i * 1000);
                    }
                }
            }
            if (response.Variables !== null) {
                handleVariablesObjectChanged(response.Variables);
            }
            if (response.HostIsOffline) {
                labData.HostIsOffline = true;
                showFullScreenMessage({
                    title: "Lost Connection",
                    message: "Sorry, we\'ve lost connectivity to your lab environment. This is most likely a temporary issue and will be resolved shortly.<br/>As soon as connectivity is restored, your lab will resume.",
                    showLoadingImage: true
                });
            } else if (labData.HostIsOffline) {
                labData.HostIsOffline = false;
                hideFullScreenMessage();
            }
            /* This is for live updating an instance, like for the lab monitoring page.
            if (response.CodeFabric != null) { //TODO DO
                //labData.CodeTests = response.CodeFabric.CodeTests; Don't need this? But we do need the number of test inputs.
                labData.CodeLanguages = response.CodeFabric.CodeLanguages;

                //TODO set codeClient
                if ((true || codeClient) && window.parent.consoleWindow.labConsole && typeof window.parent.consoleWindow.labConsole.codeFabricChanged === "function") {
                    window.parent.consoleWindow.labConsole.codeFabricChanged(response.CodeFabric.CodeTemplates, response.CodeFabric.CodeTests);
                }
            }*/
        });
    }

    function pageIndexChanged() {
        if (typeof api !== 'undefined') {
            api.instructionsPageChanged(pageIndex);
        }
    }

    function showNotificationWithDelay(notification, delay) {
        window.setTimeout(function () {
            showNotification(notification);
        }, delay);
    }

    function playNotificationSound() {
        var notificationAudio = document.createElement("audio");
        document.body.appendChild(notificationAudio);
        notificationAudio.setAttribute("autoplay", true);
        notificationAudio.setAttribute("src", "/images/notification.mp3");
        notificationAudio.addEventListener("ended", function () {
            notificationAudio.parentNode.removeChild(notificationAudio);
        });
    }

    var notificationCounter = 0;

    function showNotification(notification) {
        if (!notification) return;
        if (!notification.content && !notification.buttons) return;
        let $container = $("#notificationContainer");
        if (notification.id) {
            let $dupeNotification = $container.find(".notification[data-id='" + notification.id + "']");
            if ($dupeNotification.length > 0) {
                if ($dupeNotification.find(".notificationContent").text() === notification.content) {
                    // duplicate notification, don't do anything.
                    return;
                }
                else {
                    $dupeNotification.slideUp("fast", function () { $(this).remove(); });
                }
            }
        }
        if (notification.persistent) {
            $("#notificationsButton").addClass("active");
        }
        let labelDescriptionId = "notificationContent" + notificationCounter++;
        let $notification = $("<div class='notification primary-color-border' data-id='" + notification.id + "'><div tabindex='0' aria-describedby='" + labelDescriptionId + "'><span class='screen-reader-only'>Alert</span><div class='notificationContentTopPadding'></div><div class='notificationContent' role='alert' id='" + labelDescriptionId + "'></div></div><div class='closeNotification primary-color-icon' tabindex='0' aria-label='Close' title='Close'></div></div>");
        let close = function () {
            $notification.fadeOut("fast", function () {
                $notification.show().css({ visibility: "hidden" });
                $notification.animate({ height: 0, padding: 0, marginTop: 0 }, "fast", function () {
                    $notification.remove();
                    if (notification.close) {
                        notification.close();
                    }
                });
            });
        };
        let $notificationContent = $notification.find(".notificationContent");
        $notificationContent.append(notification.content);
        if (notification.hideCloseButton) {
            $notification.find(".closeNotification").hide();
        } else {
            $notification.find(".closeNotification").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                close();
            });
        }
        if (notification.buttons && notification.buttons.length > 0) {
            let $buttons = $("<div class='notificationButtonWrapper'></div>");
            let numButtons = notification.buttons.length;
            let buttons = notification.buttons;
            for (let i = 0; i < numButtons; i++) {
                let button = buttons[i];
                if (!button.text) return;
                let $button = $("<input type='button' value='" + button.text + "' />");
                if (button.primary) {
                    $button.addClass("primary");
                }
                if (button.click) {
                    $button.click(button.click);
                }
                if (button.closeNotification) {
                    $button.click(close);
                }
                $buttons.append($button);
            }
            $notificationContent.append($buttons);
        }

        $container.append($notification);
        let width = $notification.outerWidth();
        let height = $notification.outerHeight();
        let marginTop = parseInt($notification.css("marginTop"));
        $notification.hide();
        let $placeHolder = $("<div></div>");
        $placeHolder.css({ "visibility": "hidden", height: 0, width: 0 });
        $container.append($placeHolder);
        $placeHolder.animate({ height: height + marginTop, width: width }, "fast", function () {
            $placeHolder.remove();
            $notification.css({ "visibility": "hidden" }).show();
            let $slideInClone = $notification.clone(false);
            let initialCssProperties = { position: "absolute", bottom: 0, "visibility": "visible" };
            if (isRtl) {
                initialCssProperties.left = -width - 32;
            } else {
                initialCssProperties.right = -width - 32;
            }
            let finalCssPosition = isRtl
                ? { left: 0 }
                : { right: 0 };
            $slideInClone.css(initialCssProperties);
            $container.append($slideInClone);
            $slideInClone.animate(finalCssPosition, "fast", function () {
                $notification.css({ "visibility": "visible" });
                $slideInClone.remove();
                $notification.show();
                if (!dialogIsActive()) {
                    $notificationContent.find("input.primary").focus();
                }
            });
        });

        playNotificationSound();

        if (notification.autocloseTimeout) {
            window.setTimeout(function () {
                close();
            }, notification.autocloseTimeout);
        }

        var $notificationsDialog = $("#notificationsDialog");
        if ($notificationsDialog.length > 0 && notification.id) {
            $notificationsDialog.find(".listedNotification[data-id='" + notification.id + "']").slideUp("fast", function () { $(this).remove(); });
            var $listedNotification = $("<div data-id='" + notification.id + "' class='listedNotification'><div class='listedNotificationDate'>" + notification.created + "</div><div class='listedNotificationBody'>" + notification.content + "</div></div>");
            $notificationsDialog.prepend($listedNotification);
            $listedNotification.css({ "visibility": "hidden", "display": "none" }).slideDown("fast", function () {
                $listedNotification.css({ "visibility": "visible", "display": "none" }).fadeIn("fast");
            });
        }

    }

    function dialogIsActive() {
        if (isChildClient) {
            return window.parent.dialogIsActive();
        } else {
            return $("#modalDialog").length > 0;
        }
    }

    function writeCookie(name, value, days) {
        var cookie = name + "=" + value;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            cookie += "; expires=" + date.toGMTString();
        }
        cookie += "; path=/";
        document.cookie = cookie;
    }

    function readCookie(name) {
        var nameEq = name + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === " ") c = c.substring(1, c.length);
            if (c.indexOf(nameEq) === 0) return c.substring(nameEq.length, c.length);
        }
        return null;
    }

    /**
     * Handles clicks on copyable elements.
     *
     * @param {HTMLElement|jQuery} element - The clicked element that may contain copyable content.
     * @param {boolean} [strictCopy=false] - If true, forces the action to be copy-only, preventing the simulated typing action. Mainly for fenced code blocks with copy button.
     */
    function copyableClicked(element, strictCopy = false) {
        const $element = $(element);
        const text = $element.text();

        $("#copyInput").show();
        $("#copyInput").val(text).select();

        const offset = $element.offset();
        const x = offset.left;
        const y = offset.top - 40;

        if (model.isPreview) {
            const isInChildClient = isChildClient || isSimulatingChildClient;
            const hasTypeText = isInChildClient && (
                $element.hasClass('typeText') ||
                $element.hasClass('type-code-block') ||
                ($element.is(`code:not(.nocopy)`) && !strictCopy)
            );
            const message = hasTypeText
                ? `The following would be copied to your clipboard and typed into your active machine`
                : `The following would copy to your clipboard`;
            const duration = hasTypeText ? 5000 : 3500;

            showClickFeedbackMessage(message, x, y, duration);

            return;
        }

        try {
            const successful = document.execCommand("copy");

            if (successful) {
                showClickFeedbackMessage("Copied to clipboard", x, y, 2000);
            } else {
                showClickFeedbackMessage("Copying was unsuccessful", x, y, 2000);
            }
        } catch (err) {
            showClickFeedbackMessage("Copying was unsuccessful", x, y, 2000);

            console.error("Unable to copy. " + err);
        }

        $("#copyInput").hide();
    }

    function typeTextClicked(element, canUseVmClipboard) {
        const isInChildClient = isChildClient || isSimulatingChildClient;
        const $element = $(element);
        const offset = $element.offset();
        const x = offset.left;
        let y = offset.top - 40;
        let text = $element.text();

        if (model.isPreview) {
            const isChildClientCopyText = !isInChildClient && $element.is('code:not(.nocopy)');

            // Skip if element is handled by copyableClicked
            if (
                $element.hasClass('copy-code-block') ||
                $element.hasClass('copyable') ||
                isChildClientCopyText
            ) {
                return;
            }

            const message = isInChildClient
                ? "The following would be typed into your active machine"
                : "Cannot type: no active machine found.";

            const duration = isInChildClient ? 3500 : 2000;

            showClickFeedbackMessage(message, x, y, duration);
            return;
        }

        // Live lab or non-preview scenario
        if (!isInChildClient) {
            showClickFeedbackMessage("Cannot type: no active machine found.", x, y, 2000);
            return;
        }

        try {
            if (canUseVmClipboard) {
                text = text.replace(/[\r]/g, '\n');
                text = text.replace(/[\n]/g, '\r\n');
            }

            window.parent.typeText(text, canUseVmClipboard);

            if ($element.is(".copyable")) {
                y -= 40;
            }

            showClickFeedbackMessage(`Typing in active machine`, x, y, 2000);
        } catch (err) {
            showClickFeedbackMessage("Typing was unsuccessful", x, y, 2000);

            console.error("Unable to type in active machine. " + err);
        }
    }

    function showDialog(options) {
        if (!options) return;

        if (isChildClient && options.allowParentOverride) {
            return window.parent.showDialog(options);
        }
        var $dialog = $("#modalDialog");
        var isUpdatedContent = false;
        if ($dialog.length > 0) {
            $dialog.find(".dialogContent").html("");
            $dialog.find(".dialogButtons").html("");
            isUpdatedContent = true;
        } else {
            $dialog = $('<div id="modalDialog" class="dialog" role="dialog" aria-modal="true" aria-labelledby="dialogTitle"><div class="dialogMask"></div><div class="dialogBox primary-color-border"><div class="dialog-header"><div id="dialogTitle" class="dialogTitle"></div><div class="dialogCloseButton" role="button" aria-label="Close" tabindex="0"></div></div><div class="dialogContent"></div><div class="dialogButtons"></div></div></div>');
            $dialog.keydown(function (e) {
                if (e.which === 27) { //esc
                    close();
                }
                if (e.which === 9) { //tab
                    var $focusable = $dialog.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]').filter(":visible");
                    if ($focusable.length === 0) return;
                    if (e.shiftKey && document.activeElement === $focusable[0]) {
                        e.preventDefault();
                        $focusable[$focusable.length - 1].focus();
                    } else if (!e.shiftKey && document.activeElement === $focusable[$focusable.length - 1]) {
                        e.preventDefault();
                        $focusable[0].focus();
                    }
                }
            });
            $dialog.on("click keypress", ".dialogContent img, .dialogContent.imageLink", function (e) {
                if (!a11yClick(e)) return;
                let $this = $(this);
                if ($this.parent().is("a")) return;
                e.preventDefault();
                e.stopImmediatePropagation();
                let imgUrl = $this.hasClass("imageLink") ? this.href : this.src;
                let url = "/Instructions/Image/" + labData.LabProfileId + "/?url=" + encodeURIComponent(imgUrl);
                if (this.title) {
                    url += "&title=" + encodeURIComponent(this.title);
                }
                if (this.alt || this.text) {
                    url += "&altText=" + encodeURIComponent(this.alt ? this.alt : this.text);
                }
                let imageWindow = window.open(url, "imageWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
                childWindows.push(imageWindow);
                try {
                    imageWindow.focus();
                } catch (e) {
                    console.error("Error opening image window.", e);
                }
            });
        }
        var $dialogBox = $dialog.find(".dialogBox");
        var close = function () {
            if (options.suppressDefaultClose && options.close) {
                options.close();
            } else {
                var h = $dialogBox.outerHeight();
                var offset = $dialogBox.offset();
                $dialogBox.css("marginTop", 0).animate({ marginTop: -h - offset.top }, 300);
                $dialog.delay(200).fadeOut("fast", function () {
                    $dialog.remove();
                    if (options.close) {
                        options.close();
                    }
                });
            }
        };
        $dialog.find(".dialogCloseButton").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            close();
        });

        if (options.minimumDisplaySeconds > 0) {
            var $closeButton = $dialog.find(".dialogCloseButton").hide();
            var $countDown = $("<div class='dialogCloseCountDown'>" + "You can close this in {0} seconds...".format(options.minimumDisplaySeconds) + "</div>").insertAfter($closeButton);
            var secondsSpent = 0;
            var closeDialogInterval = window.setInterval(function () {
                secondsSpent += 1;
                $countDown.html("You can close this in {0} seconds...".format(options.minimumDisplaySeconds - secondsSpent) + "</div>");
                if (secondsSpent >= options.minimumDisplaySeconds) {
                    window.clearInterval(closeDialogInterval);
                    $countDown.hide();
                    $dialog.find(".dialogCloseButton").show();
                }
            }, 1000);
        }

        if (options.title) {
            $dialog.find(".dialogTitle").html(options.title).show();
        } else {
            $dialog.find(".dialogTitle").hide();
            $dialog.addClass("noTitle");
        }
        if (options.content) {
            $dialog.find(".dialogContent").removeClass("noScroll").append(options.content);
        } else if (options.url) {
            var urlLower = options.url.toLowerCase();
            if (urlLower.indexOf(".mp4") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<video src="' + options.url + '" controls autoplay></video>');
            } else if (urlLower.indexOf(".png") !== -1 || urlLower.indexOf(".jpg") !== -1 || urlLower.indexOf(".jpeg") !== -1 || urlLower.indexOf(".gif") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<img src="' + options.url + '"></iframe>');
            } else if (options.isInstructions || urlLower.indexOf(".md") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<div id="instructionsDialog"></div>');
                window.setTimeout(function () {
                    instructionsProcessor.processUrl(options.url, "instructionsDialog");
                    if (options.url.indexOf("#") >= 0) {
                        window.setTimeout(function () {
                            var hash = options.url.substr(options.url.indexOf("#"));
                            var $element = $("#instructionsDialog " + hash);
                            if ($element.length > 0) {
                                $dialog.find(".dialogContent").scrollTop($element.position().top);
                            }
                        }, 400); //leave time for the content to layout... the dialog takes 400ms to animate anyway, which should be sufficient.
                    }
                }, 1);
            } else {
                $dialog.find(".dialogContent").addClass("noScroll").append('<iframe id="contentDialogIFrame" src="' + options.url + '" style="width:100%;height:100%;border:none;" allowfullscreen></iframe>');
            }
        } else {
            $dialog.find(".dialogContent").hide();
        }
        if (options.buttons && options.buttons.length > 0) {
            $dialog.addClass("hasButtons");
            var $dialogButtons = $dialog.find(".dialogButtons");
            var numButtons = options.buttons.length;
            for (var i = 0; i < numButtons; i++) {
                var button = options.buttons[i];
                var $button = $('<input type="button" value="' + button.text + '" aria-label="' + button.text + '" />');
                if (button.click) {
                    $button.click(button.click);
                }
                if (button.primary) {
                    $button.addClass("primary");
                }
                if (button.closeDialog) {
                    $button.click(close);
                }
                if (button.disabled) {
                    $button.prop("disabled", true);
                }
                if (button.hidden) {
                    $button.hide();
                }
                $dialogButtons.append($button);
            }
        }
        if (!isUpdatedContent) {
            $labClient.append($dialog);
            $dialog.hide().fadeIn("fast", function () {
                var $inputs = $dialog.find(".dialogContent input");
                if ($inputs.length > 0) {
                    $inputs[0].focus();
                } else {
                    $primaryButton = $dialog.find(".dialogButtons input.primary");
                    if ($primaryButton.length > 0) {
                        $primaryButton.focus();
                    } else {
                        $dialog.find(".dialogCloseButton").focus();
                    }
                }
                if (options.open) {
                    options.open();
                }
            });
            var h = $dialogBox.outerHeight();
            var offset = $dialogBox.offset();
            $dialogBox.css("marginTop", -h - offset.top).animate({ marginTop: 0 }, 400, function () {
                setupKnowledgeExpanders($dialog);
            });
        } else if (options.open) {
            window.setTimeout(options.open, 1);
        }
        return {
            close: close,
            getElementById: function (elementId) {
                var $element = $dialog.find("#" + elementId);
                if ($element.length > 0) return $element[0];
                return null;
            },
            getElementByClass: function (elementClass) {
                var $element = $dialog.find("." + elementClass);
                if ($element.length > 0) return $element[0];
                return null;
            },
            setupDatepicker: function (elementId, options) {
                var $element = $dialog.find("#" + elementId);
                $element.datepicker(options);
            },
            setupTimepicker: function (elementId, options) {
                var $element = $dialog.find("#" + elementId);
                $element.timepicker(options);
            },
            getDateFromDatePicker: function (elementId) {
                var $element = $dialog.find("#" + elementId);
                return $element.datepicker("getDate");
            },
            getButtons: function () {
                return $dialog.find(".dialogButtons input[type='button']");
            },
            hideButtons: function () {
                return $dialog.find(".dialogButtons").hide();
            },
            showButtons: function () {
                return $dialog.find(".dialogButtons").show();
            },
            getContent: function () {
                return $dialog.find(".dialogContent");
            },
            show: function () {
                $dialog.show();
            },
            hide: function () {
                $dialog.hide();
            }
        };
    }

    function showChooserDialog(options) {
        if (!options || !options.url) return;
        if (isChildClient && options.allowParentOverride) {
            return window.parent.showChooserDialog(options);
        }

        let dialogHtml = "<div id='chooserDialog' class='dialog hasButtons' role='dialog' aria-modal='true' aria-labelledby='dialogTitle'><div class='dialogMask'></div><div class='dialogBox'></iframe>";
        if (model.layoutVersion == 2)
            dialogHtml += "<div class='dialog-header'><div class='dialogTitle'>Choose Lab Series</div><div class='dialogCloseButton' role='button' aria-label='Close' tabindex='0'></div></div>";
        else
            dialogHtml += "<div class='dialogCloseButton' role='button' aria-label='Close' tabindex='0'></div><div class='dialogTitle'></div>";
        dialogHtml += "<div class='dialogContent noScroll noPadding'><iframe class='contentDialogIFrame' style='width:100%;height:100%;border:none;' allowfullscreen></iframe></div><div class='dialogButtons'><input class='okButton primary' type='button' value='OK' aria-label='@Resources.Localization.Ok' /><input class='cancelButton'  type='button' value='Cancel' aria-label='Cancel' /></div><div class='dialogTabTrapper' tabindex='0' /></div></div>";
        let $dialog = $(dialogHtml);

        var getChoices = function (e) {
            if (e.data && e.data.command === "getChoices") {
                if (options.choicesMade) {
                    options.choicesMade(e.data.choices);
                }
            }
        };
        window.addEventListener("message", getChoices, false);
        var close = function () {
            $dialog.remove();
            window.removeEventListener("message", getChoices);
            if (options.close) {
                options.close();
            }
        }
        $dialog.find(".dialogCloseButton").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            close();
        });
        if (options.title) {
            $dialog.find(".dialogTitle").html(options.title).show();
        } else {
            $dialog.find(".dialogTitle").hide();
            $dialog.addClass("noTitle");
        }
        var $iframe = $dialog.find(".contentDialogIFrame");
        $iframe.attr("src", options.url);
        $okButton = $dialog.find(".dialogButtons .okButton").click(function () {
            $iframe[0].contentWindow.postMessage({ command: "getChoices" }, '*');
        });
        $dialog.find(".dialogButtons .cancelButton").click(function () {
            close();
        });
        $("body").append($dialog);
        var $inputs = $dialog.find(".dialogContent input");
        if ($inputs.length > 0) {
            $inputs[0].focus();
        } else {
            $primaryButton = $dialog.find(".dialogButtons input.primary");
            if ($primaryButton.length > 0) {
                $primaryButton.focus();
            } else {
                $dialog.find(".dialogCloseButton").focus();
            }
        }
        if (options.open) {
            options.open();
        }
        return {
            close: close,
            show: function () {
                $dialog.show();
            },
            hide: function () {
                $dialog.hide();
            }
        }
    }

    function showModalMenu(targetId) {
        let $modalMenu = $(`#${targetId}`);
        let $mask = $(".modal-menu-mask");
        if ($mask.length === 0) {
            $mask = $("<div class='modal-menu-mask'></div>");
            $("body").append($mask);
            $mask.hide();
            $mask.on("click", function () {
                let $visibleMenu = $(".modal-menu:visible");
                if ($visibleMenu.length > 0) {
                    hideModalMenu($visibleMenu.attr("id"));
                }
            });
        }

        let animationDuration = 320;
        $mask.fadeIn(animationDuration);
        let pageWidth = $("body").width();
        let modalWidth = pageWidth - 32;
        let startCss = isRtl
            ? { display: "initial", right: pageWidth + "px", "left": "inherit", width: modalWidth + "px" }
            : { display: "initial", left: pageWidth + "px", "right": "inherit", width: modalWidth + "px" }
        $modalMenu.css(startCss);
        let animateCss = isRtl
            ? { right: "16px" }
            : { left: "16px" };
        $modalMenu.animate(animateCss, animationDuration, function () {
            $modalMenu.css({ width: "initial", left: "16px", right: "16px" });
            $modalMenu.find(".close-modal-menu-button").focus();
        });
    }

    function hideModalMenu(targetId) {
        let $modalMenu = $(`#${targetId}`);
        let animationDuration = 320;
        $(".modal-menu-mask").fadeOut(animationDuration);
        let pageWidth = $("body").width();
        let modalWidth = pageWidth - 32;
        $modalMenu.css({ display: "initial", left: "16px", "right": "inherit", width: modalWidth + "px" });
        $modalMenu.animate({ left: pageWidth + "px" }, animationDuration, function () {
            $modalMenu.css({ display: "none", width: "initial", left: "16px", right: "16px" });
        });
        $(`.modal-menu-button[data-target="${targetId}"]`).focus();
    }

    function updateTaskProgressBar(numTasksDone, numTasks) {
        var percentComplete = 0;
        if (numTasks > 0) {
            percentComplete = Math.floor((numTasksDone / numTasks) * 100);
        }
        if (model.layoutVersion == 1) {
            $("#taskProgressText").html(percentComplete + "% " + "Tasks Complete");
        }
        $("#taskProgress").css("width", percentComplete + "%");
        $("#taskProgressBar").attr("title", numTasksDone + "/" + numTasks + " (" + percentComplete + "%) " + "Tasks Complete");
    }

    var taskSkipWarningShown = false;

    function setupContentEventHandlers($container) {
        //TODO: move as many of these as possible to a $("body").on("click") handler so they are registered once and work for content displayed in dialogs.
        $container.find(".task-list-item .checkbox input[type='checkbox']").on("keyup", function (e) {
            if (e.key === "Enter" || e.key === " ") {
                //Prevent checkbox from double checking when activated by keyboard
                e.preventDefault();
            }
        });
        $container.find(".task-list-item .checkbox  input[type='checkbox']").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let $checkbox = $(this);
            // Activate checkbox when key is pressed
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                $checkbox.prop("checked", !$checkbox.prop("checked"));
            }
            let userHasChecked = $checkbox.prop("checked");
            let $task = $checkbox.closest(".task-list-item");
            if ($allTasks === null) {
                $allTasks = $("#instructionsContent").find(".task-list-item");
            }

            let numTasks = $allTasks.length;
            
            let numTasksComplete = 0;
            let lastCompletedTaskIndex;            

            if (labData.RequireTasksCompletedInOrder) {

                let thisTaskIndex = $allTasks.index($task);
                numTasksComplete = thisTaskIndex;
                if (userHasChecked) {
                    numTasksComplete += 1;
                    lastCompletedTaskIndex = thisTaskIndex;
                } else {
                    //if tasks must be completed in order, auto-checking is off, and the the user has unchecked a task that is NOT the last completed task, reject the change
                    if (labData.RequireTasksCompletedInOrder && !labData.EnableTaskAutoChecking && labData.LastCompletedTaskIndex > thisTaskIndex) {
                        $checkbox.prop("checked", true);
                        return;
                    }
                    if (thisTaskIndex === 0) {
                        lastCompletedTaskIndex = null;
                    } else {
                        lastCompletedTaskIndex = thisTaskIndex - 1;
                    }
                }

                let lastItemToCheckIndex = lastCompletedTaskIndex === null ? -1 : lastCompletedTaskIndex;

                let previousUncheckedBoxes = [];
                for (let i = 0; i <= lastItemToCheckIndex; i++) {
                    let cbox = $allTasks.eq(i).find("label.checkbox input:checkbox");
                    if (!cbox.prop("checked")) {
                        previousUncheckedBoxes.push(cbox);
                    }
                }

                if (userHasChecked && previousUncheckedBoxes.length > 0) {
                    if (labData.EnableTaskAutoChecking) {
                        if (!taskSkipWarningShown) {
                            if (confirm("You have skipped ahead! Are you sure you want to continue? All previous tasks will be marked complete for you.")) {
                                taskSkipWarningShown = true;
                            } else {
                                $checkbox.prop("checked", false);
                                return;
                            }
                        }
                    } else {
                        alert("Please complete all previous tasks before marking this one complete.");
                        $checkbox.prop("checked", false);
                        return;
                    }
                }

                for (const element of previousUncheckedBoxes) {
                    element.prop("checked", true);
                }
                for (let k = lastItemToCheckIndex + 1; k < numTasks; k++) {
                    $allTasks.eq(k).find("label.checkbox input[type='checkbox']").prop("checked", false);
                }

                labData.LastCompletedTaskIndex = lastCompletedTaskIndex;

            } else {
                numTasksComplete = $allTasks.find(":checked").length;
            }                     

            let percentComplete = 0;
            if (numTasks > 0) {
                percentComplete = Math.floor((numTasksComplete / numTasks) * 100);
            }            

            if (labData.EnableTaskProgressTracking) {
                updateTaskProgressBar(numTasksComplete, numTasks);
            }

            if (model.isPreview) {
                return;
            }

            if (labData.RequireTasksCompletedInOrder) {
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false,
                    url: `/Instructions/MarkTaskComplete/${model.id}?taskIndex=${lastCompletedTaskIndex}&percentComplete=${percentComplete}`
                }).always(function (response) {
                    if (!response?.Success) {
                        console.error(`Error marking task complete. ${response?.Error}`);
                    }                    
                });
            } else {
                labData.CompletedTaskIndexes = [];
                $allTasks.each(function (taskIndex) {
                    if ($(this).find("label.checkbox input[type='checkbox']").prop("checked")) {
                        labData.CompletedTaskIndexes.push(taskIndex);
                    }                    
                });
                labData.CompletedTasksJson = JSON.stringify(labData.CompletedTaskIndexes);
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false,
                    url: `/Instructions/SaveCompletedTasks/${model.id}?completedTasksJson=${labData.CompletedTasksJson}&percentComplete=${percentComplete}`
                }).always(function (response) {
                    if (!response?.Success) {
                        console.error("Error saving completed task data.", response);
                    }
                });
            }
        });

        if (isChildClient) {
            $container.find(".selectMachineLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                let machineId = parseInt($(this).attr("data-data"));
                window.parent.selectMachineById(machineId);
            });
            $container.find(".selectEndpointLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                let endpointId = parseInt($(this).attr("data-data"));
                window.parent.selectEndpointById(endpointId);
            });
            $container.find(".loadMediaLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                var $loadMediaLink = $(this);
                var mediaId = parseInt($loadMediaLink.attr("data-data"));
                if ($loadMediaLink.hasClass("opticalMedia")) {
                    window.parent.loadOpticalMediaOnSelectedMachine(mediaId);
                } else {
                    window.parent.loadFloppyMediaOnSelectedMachine(mediaId);
                }
            });
            $container.find(".commandLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                var $commandLink = $(this);
                var options = $commandLink.attr("data-options");
                var target = $commandLink.attr("data-target");
                if (target) {
                    var $commandTextArea = $(".command[data-id='" + target + "'] textarea");
                    if ($commandTextArea.length === 0) {
                        alert('CONTENT ERROR: Unable to find reference code block "' + target + '"');
                        return;
                    }
                    var commandText = $commandTextArea.val();
                    if (commandText) {
                        window.parent.executeCommandOnSelectedMachine(commandText, options);
                    }
                } else {
                    var $hiddenInput = $commandLink.next();
                    if ($hiddenInput.hasClass("command")) {
                        window.parent.executeCommandOnSelectedMachine(decodeURIComponent($hiddenInput.val()), options);
                    }
                }
            });
            $container.find(".ctrlAltDeleteLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                window.parent.sendCtrlAltDelete();
            });

            $container.find(".keyComboLink").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                var keysArray = $.map($(this).attr("data-keys").split(','), Number);
                window.parent.sendKeyCombo(keysArray);
            });

            $container.find(".machine-new-window-link").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                e.preventDefault();
                let machineId = parseInt($(this).attr("data-data"));
                if (isChildClient) {
                    window.parent.openVirtualMachineInNewWindow(machineId);
                }
            });
        }

        $container.find(".tipLink").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            e.stopImmediatePropagation();
            var $tiplink = $(this);
            var $hiddenTip = $tiplink.next();
            var offset = $(this).offset();
            var x = offset.left;
            var y = offset.top + 25;
            showClickFeedbackMessage($hiddenTip.html(), x, y, 5000);
        });

        $container.find(".dialogLink").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            e.stopImmediatePropagation();
            var $dialogLink = $(this);
            var title = $dialogLink.attr("title");
            var target = $dialogLink.attr("data-target");
            if (target) {
                var $hiddenDialog = $("blockquote.referenceContent[data-id='" + target + "']");
                if ($hiddenDialog.length === 0) {
                    alert('CONTENT ERROR: Unable to find a reference content "' + target + '"');
                } else {
                    showDialog({ title: title, content: $hiddenDialog.html(), allowParentOverride: true });
                }
            }
            else {
                showDialog({ title: title, url: $dialogLink.attr("href"), allowParentOverride: true, isInstructions: $dialogLink.hasClass("instructions") });
            }
        });

        $container.find(".portalLink").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            e.stopImmediatePropagation();
            var url = this.href;
            var popUpWidth = Math.floor(screen.availWidth * .75);
            var popUpHeight = screen.availHeight;
            var options = "left=" + 0 + ",top=" + 0 + ", height=" + popUpHeight + ",width=" + popUpWidth + ",directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,scrollbars=1,resizable=1,fullscreen=0";
            if ($(this).hasClass("home")) {
                url = "/Setup/CloudPortalSignInRedirect/" + model.key;
            }
            window.open(url, "cloudPortal", options);
        });

        $container.find(".closePortalLink").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            closePortalWindow();
        });

        $container.find(".imageLink, img").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let $this = $(this);
            if ($this.parent().is("a")) return;
            e.preventDefault();
            e.stopImmediatePropagation();
            let imgUrl = $this.hasClass("imageLink") ? this.href : this.src;
            let url = "/Instructions/Image/" + labData.LabProfileId + "/?url=" + encodeURIComponent(imgUrl);
            if (this.title) {
                url += "&title=" + encodeURIComponent(this.title);
            }
            if (this.alt || this.text) {
                url += "&altText=" + encodeURIComponent(this.alt ? this.alt : this.text);
            }
            let imageWindow = window.open(url, "imageWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
            childWindows.push(imageWindow);
            try {
                imageWindow.focus();
            } catch (e) {
                console.error("Error opening image window.", e);
            }
        });

        $container.find(".videoLink, video").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            e.stopImmediatePropagation();
            let videoUrl = $(this).hasClass("videoLink") ? this.href : this.src;
            let url = "/Instructions/Video/" + labData.LabProfileId + "/?url=" + encodeURIComponent(videoUrl);
            if (this.title) {
                url += "&title=" + encodeURIComponent(this.title);
            }
            let videoWindow = window.open(url, "videoWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
            childWindows.push(videoWindow);
            try {
                videoWindow.focus();
            } catch (e) {
                console.error("Error opening video window.", e);
            }
        });

        $container.find("input.variableTextBox, textarea.variableTextBox, select.variableDropDownList").change(function () {
            var $control = $(this);
            var name = $control.attr("data-name");
            var val = $control.val();
            persistVariable(name, val);
        });

        $container.find(".ai-completion-prompt").on("click", function (e) {
            e.preventDefault();
            e.stopPropagation();
            let $promptLink = $(this);
            if (model.isPreview) {
                let offset = $promptLink.offset();
                showClickFeedbackMessage("AI prompt would now be processed.", offset.left, offset.top - 40, 2000);
                return;
            }
            let completionId = $promptLink.attr("data-id");
            if (!completionId) {
                aiCompletionId += 1;
                completionId = aiCompletionId;
                $promptLink.attr("data-id", aiCompletionId);
            }
            let $typeSelector = $(`.ai-completion-type-selector[data-id="${completionId}"]`);
            if ($typeSelector.length > 0) {
                if ($typeSelector.is(":visible")) {
                    $typeSelector.slideUp("fast");
                } else {
                    $typeSelector.css({ left: $promptLink.offset().left }).slideDown("fast");
                }
                return;
            }

            let promptData = $promptLink.data("prompt");
            let showTeachOption = true;
            let showShowOption = true;
            let showQuizOption = true;
            let showResourcesOption = true;
            if (promptData?.options != null) {
                try {
                    let optionsArray = promptData.options.split(",");
                    if (optionsArray.length > 0) {
                        showTeachOption = false;
                        showShowOption = false;
                        showQuizOption = false;
                        showResourcesOption = false;
                        for (let option of optionsArray) {
                            let optionTrimmed = option.trim().toLowerCase();
                            if (optionTrimmed == "teach") {
                                showTeachOption = true;
                            } else if (optionTrimmed == "show") {
                                showShowOption = true;
                            } else if (optionTrimmed == "quiz") {
                                showQuizOption = true;
                            } else if (optionTrimmed == "resources") {
                                showResourcesOption = true;
                            }
                        }
                    }
                } catch (ex) {
                    console.error("Unable to process AI prompt options", ex);
                    showTeachOption = true;
                    showShowOption = true;
                    showQuizOption = true;
                    showResourcesOption = true;
                }
            }

            let optionsHtml = `<div class="ai-completion-type-selector menu" data-id="${completionId}">`;
            if (promptData?.custom_options && promptData.custom_options.length > 0) {
                let index = 0;
                for (let customOption of promptData.custom_options) {
                    optionsHtml += `<div class="option custom menu-item" data-type="custom${index}">${customOption}</div>`;
                    index++;
                }
            }
            if (showTeachOption) {
                optionsHtml += '<div class="option teach menu-item" data-type="teach">Teach me</div>';
            }
            if (showShowOption) {
                optionsHtml += '<div class="option show menu-item" data-type="show">Show me</div>';
            }
            if (showQuizOption) {
                optionsHtml += '<div class="option quiz menu-item" data-type="quiz">Quiz me</div>';
            }
            if (showResourcesOption) {
                optionsHtml += '<div class="option resources menu-item" data-type="resources">Find resources</div>';
            }
            optionsHtml += "</div>";
            $typeSelector = $(optionsHtml);
            $typeSelector.css({ left: $promptLink.offset().left });
            $typeSelector.insertAfter($promptLink).hide().slideDown("fast");
            $typeSelector.on("click", function (e) {
                e.stopPropagation();
            });
            $(document).on("click", function () {
                if ($typeSelector.is(":visible")) {
                    $typeSelector.slideUp("fast");
                }
            });

            $typeSelector.find(".option").on("click", function () {
                $typeSelector.slideUp("fast");
                let $option = $(this);
                let promptType = $option.attr("data-type");
                let cssClass = promptType.startsWith("custom") ? "custom" : promptType;
                let $output = $(`.ai-output[data-id="${completionId}"]`);
                if ($output.length === 0) {
                    $output = $(`<div class="ai-output ${cssClass} accent-background" data-id="${completionId}"><div class="loading chat-response-loading"><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div></div><div class="buttons" style="display:none;"><span class="thumbs-up" title="Like"></span> <span class="thumbs-down" title="Dislike"></span> <span class="collapse" title="Collapse"></span></div><div class="collapsed-title" style="display:none;"></div><div class="output"></div></div>`);
                    let $parent = $promptLink.parent();
                    if ($parent.hasClass("page")) {
                        let $next = $typeSelector.next();
                        if ($next != null) {
                            $output.insertBefore($next);
                        } else {
                            $output.insertAfter($typeSelector);
                        }
                    } else {
                        let levels = 10;
                        while (!$parent.parent().hasClass("page") && levels < 10) {
                            let $parent = $parent.parent();
                            levels++;
                        }
                        let $next = $parent.next();
                        if ($next?.hasClass("ai-output")) {
                            $output.insertAfter($next);
                        } else {
                            $output.insertAfter($parent);
                        }
                    }

                    $output.find(".collapse").on("click", function () {
                        let $collapse = $(this);
                        if ($output.hasClass("collapsed")) {
                            $output.find(".collapsed-title").hide();
                            $output.find(".output").slideDown("fast");
                            $output.removeClass("collapsed");
                            $collapse.attr("title", "Collapse");

                        } else {
                            $output.find(".output").slideUp("fast", function () {
                                $output.find(".collapsed-title").show();
                            });
                            $output.addClass("collapsed");
                            $collapse.attr("title", "Expand");

                        }
                    });

                    $output.find(".thumbs-up").on("click", function () {
                        let $thumbsUp = $(this);
                        if ($thumbsUp.hasClass("selected")) {
                            $thumbsUp.removeClass("selected");
                        } else {
                            $thumbsUp.addClass("selected");
                            $thumbsUp.closest(".buttons").find(".thumbs-down").removeClass("selected");
                        }
                    });

                    $output.find(".thumbs-down").on("click", function () {
                        let $thumbsDown = $(this);
                        if ($thumbsDown.hasClass("selected")) {
                            $thumbsDown.removeClass("selected");
                            return;
                        }
                        $thumbsDown.addClass("selected");
                        $thumbsDown.closest(".buttons").find(".thumbs-up").removeClass("selected");
                        let promptHash = $thumbsDown.closest(".ai-output").data("prompt-hash");
                        if (promptHash) {
                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                data: {
                                    id: model.id,
                                    promptHash: promptHash
                                },
                                cache: false,
                                url: `/instructions/aicompletionreject`
                            }).always(function (response) {
                                if (!response || !response.Success) {
                                    console.error(response && response.Error ? response.Error : "Error down rating AI completion.");
                                }
                            });
                        }
                    });

                } else {
                    $output.removeClass(["teach", "show", "quiz", "resources"]).addClass(promptType);
                    $output.find(".output").slideUp("fast");
                    $output.find(".loading").show();
                    $output.find(".buttons").hide();
                    $output.find(".collapsed-title").hide();
                }

                let prompt = $promptLink.data("prompt");

                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {
                        id: model.id,
                        text: $promptLink.text(),
                        prompt: JSON.stringify(prompt),
                        type: promptType
                    },
                    cache: false,
                    url: `/instructions/aicompletion`
                }).always(function (response) {
                    $output.find(".loading").hide();
                    if (!response?.Success) {
                        alert(response?.Error ? response.Error : "Sorry an error occurred");
                        $output.find(".output").html("").hide();
                        return;
                    }
                    $output.find(".buttons").show();
                    $output.removeClass("collapsed");
                    $output.find(".collapse").attr("title", "Collapse");
                    if (!response.Cached) {
                        $output.find(".thumbs-up").removeClass("selected");
                        $output.find(".thumbs-down").removeClass("selected");
                    }
                    $output.data("prompt-hash", response.PromptHash);
                    $output.find(".collapsed-title").html(`${$option.text()}: ${$promptLink.text()}`);

                    let completion = promptType == "quiz"
                        ? response.Completion
                            .split('\n')
                            .map(line => line.trim()) //preceding whitespace can break mardkdown list formatting
                            .map(line => line.replace(/ - /g, "\n- ")) //AI often doesn't put answer list items on new lines.
                            .join('\n')
                        : response.Completion;


                    $output.find(".output").html(instructionsProcessor.makeHtml(completion)).hide().slideDown("fast");
                    let codeBlocks = $output.find(".output code");
                    if (codeBlocks.length > 0) {
                        $output.find(".output code").addClass("prettyprint");
                        PR.prettyPrint();
                    }
                    if (promptType == "quiz") {
                        formatAiQuiz($output, completionId);
                    }
                });
            });

        });

        $container.find(".ai-chat .ai-submit, .ai-chat .ai-submit-wrapper").on("click", function (e) {
            e.stopPropagation();
            let $thisChat = $(this).closest(".ai-chat");
            let user_message = $thisChat.find(".ai-input").val().trim();
            if (user_message == "") {
                return;
            }
            let chatId = $thisChat.attr("data-id");
            let parameters = $thisChat.data("parameters");
            if (parameters == null) {
                parameters = {};
            }
            parameters.id = $thisChat.attr("data-id");
            parameters.topic = $thisChat.attr("data-topic");
            if (parameters.messages == null) {
                parameters.messages = [];
            }
            let submissionId = new Date().getTime();
            parameters.messages.push({ role: "user", content: user_message });
            let $ai_chats = $(`.ai-chat[data-id="${chatId}"]`);
            $ai_chats.each(function () {
                let $ai_chat = $(this);
                let $ai_input = $ai_chat.find(".ai-input");
                $ai_input.val("");
                let $ai_output = $ai_chat.find(".ai-output");
                $ai_chat.find(".buttons").show();
                let $userMessage = $(`<div class='message user' data-submission-id="${submissionId}">${user_message}</div>`);
                $userMessage.appendTo($ai_output);
                let $aiMessage = $(`<div class='message ai' data-submission-id="${submissionId}"><div class="chat-response-loading"><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div></div></div></div>`);
                $aiMessage.appendTo($ai_output);
                $ai_output.slideDown("fast", function () {
                    $ai_output.animate({ scrollTop: $ai_output[0].scrollHeight }, 500);
                });
                $ai_chat.removeClass("collapsed");
                $ai_chat.data("parameters", parameters);

                if (model.isPreview) {
                    $aiMessage.html("AI response would be here.");
                    $ai_output.animate({ scrollTop: $ai_output[0].scrollHeight }, 500);
                }
            });
            $thisChat.find(".ai-input").focus();

            if (model.isPreview) {
                return;
            }

            $.ajax({
                type: "POST",
                dataType: "json",
                data: {
                    id: model.id,
                    message: user_message,
                    parameters: JSON.stringify(parameters)
                },
                cache: false,
                url: `/instructions/aichat`
            }).always(function (response) {
                if (response?.Success) {
                    parameters.messages.push({ role: response.Role, content: response.Content });
                }
                $ai_chats.each(function () {
                    let $ai_chat = $(this);
                    let $ai_output = $ai_chat.find(".ai-output");
                    let $userMessage = $ai_chat.find(`.message.user[data-submission-id="${submissionId}"]`);
                    let $aiMessage = $ai_chat.find(`.message.ai[data-submission-id="${submissionId}"]`);
                    let $ai_input = $ai_chat.find(".ai-input");
                    let $ai_submit = $ai_chat.find(".ai-submit");
                    if (!response || !response.Success) {
                        $aiMessage.html(response && response.Error ? response.Error : "Sorry an error occurred");
                        $ai_output.animate({ scrollTop: $ai_output[0].scrollHeight }, 500);
                        return;
                    }
                    $ai_chat.data("parameters", parameters);
                    displayAiMessage($ai_chat, $aiMessage, response.Content);
                    $ai_output.animate({ scrollTop: $userMessage[0].offsetTop - 5 }, 500);
                });
            });
        });

        $container.find(".ai-chat .ai-input").on("keypress", function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                $(this).closest(".ai-chat").find(".ai-submit").click();
            }
        });

        $container.find(".ai-chat .collapse").on("click", function () {
            let $collapse = $(this);
            let $ai_chat = $collapse.closest(".ai-chat");
            let $output = $ai_chat.find(".ai-output");
            if ($ai_chat.hasClass("collapsed")) {
                $output.slideDown("fast");
                $ai_chat.removeClass("collapsed");
                $collapse.attr("title", "Collapse");
            } else {
                $output.slideUp("fast");
                $ai_chat.addClass("collapsed");
                $collapse.attr("title", "Expand");
            }
        });

        $container.find(".ai-chat .clear").on("click", function () {
            if (confirm("Are you sure you want to clear this conversation?")) {
                let $thisChat = $(this).closest(".ai-chat");
                let chatId = $thisChat.attr("data-id");
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {
                        id: model.id,
                        chatId: chatId
                    },
                    cache: false,
                    url: `/instructions/clearaichat`
                }).always(function (response) {
                    if (!response || !response.Success) {
                        alert(response && response.Error ? response.Error : "Sorry an error occurred");
                        return;
                    }
                    let $ai_chats = $(`.ai-chat[data-id="${chatId}"]`);
                    $ai_chats.each(function () {
                        let $ai_chat = $(this);
                        $ai_chat.find(".message").remove();
                        $ai_chat.find(".ai-input").val("");
                        $ai_chat.find(".buttons").hide();
                        $ai_chat.find(".ai-output").hide();
                        let parameters = $ai_chat.data("parameters");
                        if (parameters.messages) {
                            for (let message of parameters.messages) {
                                if (message.role != "system") {
                                    parameters.messages = parameters.messages.filter(function (m) { return m !== message; });
                                }
                            }
                        }
                        $ai_chat.data("parameters", parameters);
                    });
                });
            }
        });

        $container.find(".ai-chat .suggest-topics").on("click", function (e) {
            e.preventDefault();
            let $ai_chat = $(this).closest(".ai-chat");
            $ai_chat.find(".ai-input").val("Suggest topics");
            $ai_chat.find(".ai-submit").click();
        });

        function typeWriterEffect(element, text) {
            let i = 0;
            let speed = 35;
            for (let i = 0; i < text.length; i++) {
                setTimeout(() => {
                    element.innerHTML += text.charAt(i);
                }, i * speed);
            }
        }

        $container.find(".ai-practice .ai-submit, .ai-practice .ai-submit-wrapper").on("click", function (e) {
            e.stopPropagation();
            let $ai_practice = $(this).closest(".ai-practice");
            let chatId = $ai_practice.attr("data-id");
            let user_message = $ai_practice.find(".ai-input").val().trim();
            if (user_message == "") {
                return;
            }
            let parameters = $ai_practice.data("parameters");
            if (parameters == null) {
                parameters = {};
            }
            parameters.id = $ai_practice.attr("data-id");
            parameters.topic = $ai_practice.attr("data-topic");
            if (parameters.messages == null) {
                parameters.messages = [];
            }
            let submissionId = new Date().getTime();
            parameters.messages.push({ role: "user", content: user_message });

            let $ai_input = $ai_practice.find(".ai-input");
            let $ai_practice_output = $ai_practice.find(".ai-practice-output");
            $ai_practice_output.show();
            $ai_input.val("");
            $userMessage = $(`<h2></h2>`);
            $ai_practice_output.append($userMessage);
            typeWriterEffect($userMessage[0], user_message);
            $ai_practice.find(".ai-practice-header").hide();
            $ai_practice.find(".ai-input-wrapper").hide();
            $ai_practice.find(".suggest-topics").hide();
            let $ai_practice_response = $(`<div class='ai-practice-response loading' data-submission-id="${submissionId}"><div class="chat-response-loading"><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div><div class="dot primary-color-background"></div></div></div></div>`);
            $ai_practice_response.appendTo($ai_practice_output);
            $ai_practice.data("parameters", parameters);
            $ai_practice_response[0].scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" }); //scroll the current page so the bottom of the AI practice element is visible

            if (model.isPreview) {
                $ai_practice_response.html($(`<div>AI response to "${user_message}" would display here.</div>`));
                $ai_practice.find(".ai-practice-header").show();
                $ai_practice.find(".ai-input-wrapper").show();
                $ai_practice.find(".suggest-topics").show();
                $ai_practice_response.removeClass("loading");
                return;
            }

            let $outputStyle = $ai_practice.find(".ai-practice-output-style");
            parameters.practice = true; //all three styles are pratice. learn and challenge are supplemental
            parameters.learn = $outputStyle.val() == "10";
            parameters.challenge = $outputStyle.val() == "20";

            $.ajax({
                type: "POST",
                dataType: "json",
                data: {
                    id: model.id,
                    message: user_message,
                    parameters: JSON.stringify(parameters)
                },
                cache: false,
                url: `/instructions/aichat`
            }).always(function (response) {
                $ai_practice.find(".ai-practice-header").show();
                $ai_practice.find(".ai-input-wrapper").show();
                $ai_practice.find(".suggest-topics").show();
                $ai_practice_response.removeClass("loading");
                if (response?.Success) {
                    parameters.messages.push({ role: response.Role, content: response.Content });
                }
                if (!response || !response.Success) {
                    $ai_practice_response.html(response && response.Error ? response.Error : "Sorry an error occurred");
                    return;
                }
                $ai_practice.data("parameters", parameters);
                displayAiMessage($ai_practice, $ai_practice_response, response.Content);
            });
        });

        $container.find(".ai-practice .ai-input").on("keypress", function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                $(this).closest(".ai-practice").find(".ai-submit").click();
            }
        });

        $container.find(".ai-practice .suggest-topics").on("click", function (e) {
            e.preventDefault();
            let $ai_practice = $(this).closest(".ai-practice");
            $ai_practice.find(".ai-input").val("Suggest topics");
            $ai_practice.find(".ai-submit").click();
        });
    }

    function persistVariable(name, val) {
        if (typeof api !== 'undefined') {
            if (labData.Variables[name] !== val) {
                api.labVariableChanged(name, val);
            }
        }
        if (val === null || val.length === 0) {
            if (name in labData.Variables) {
                delete labData.Variables[name];
            }
        } else {
            labData.Variables[name] = val;
        }

        applyVariablesToUi();
        if (model.isPreview) return;
        let url = "/Instructions/SaveVariable/" + model.id;
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {
                name: name,
                value: val
            },
            cache: false,
            url: url
        }).always(function (response) {
            if (!response || !response.Success) {
                let errorMessage = response && response.Error ? response.Error : "Sorry, your value couldn\'t be stored. You may have trouble accessing this value in the future.";
                alert(errorMessage);
            }
        });
    }

    function setZoomerLocation() {
        var tabsWidth = 0;
        $("#tabHeadings").children().each(function () {
            tabsWidth += $(this).outerWidth(true);
        });
        if (tabsWidth > $("#tabHeadings").width()) {
            $("#zoomWrapper").addClass("zoomInHeader");
        }
        else {
            $("#zoomWrapper").removeClass("zoomInHeader");
        }
    }

    function getActivityByReplacementTokenAlias(activities, replacementTokenAlias) {
        for (var i = 0, numActivities = activities.length; i < numActivities; i++) {
            if (activities[i].ReplacementTokenAlias === replacementTokenAlias) {
                return activities[i];
            }
        }
        return null;
    }

    function getActivityGroupByAlias(activityGroups, alias) {
        for (var i = 0, numActivityGroups = activityGroups.length; i < numActivityGroups; i++) {
            if (activityGroups[i].Alias === alias) {
                return activityGroups[i];
            }
        }
        return null;
    }

    function setupUiEventHandlers() {

        $(document).click(function () {
            lastUnsyncedActivity = new Date().valueOf();
            if (mainMenuShown) {
                $("#mainMenu").slideUp("fast");
                mainMenuShown = false;
            }
            if ($("#exitMenu").is(":visible")) {
                $("#exitMenu").slideUp("fast");
                $("#exitMenuButton").attr("aria-expanded", "false");
            }
        }).keydown(function (event) {
            lastUnsyncedActivity = new Date().valueOf();
            if (event.which === 8 && !$(document.activeElement).is("input:focus, textarea:focus, div[contenteditable='true']")) {
                event.preventDefault();
            }
        }).mousemove(function () {
            lastUnsyncedActivity = new Date().valueOf();
        });

        $("body").on("click keypress", ".copy-code-block", function (e) {
            if (!a11yClick(e)) return;
            let $codeBlock = $(this).closest("pre").find("code");
            copyableClicked($codeBlock[0], true);
        });

        $("body").on("click keypress", ".type-code-block", function (e) {
            if (!a11yClick(e)) return;
            let $codeBlock = $(this).closest("pre").find("code");
            typeTextClicked($codeBlock[0]);
        });

        if (isChildClient || isSimulatingChildClient) {
            $("body").on("click keypress", ".copyable", function (e) {
                if (!a11yClick(e)) return;
                copyableClicked(this);
            });

            $("body").on("click keypress", ".typeText", function (e) {
                if (!a11yClick(e)) return;
                typeTextClicked(this);
            });

            $("body").on("click keypress", "code:not(.nocopy)", function (e) {
                if (!a11yClick(e)) return;
                if (e.offsetX > 0 && $(this).is("code") && $(this).parent().is("pre")) return; //for code blocks, only fire if the click is on the pseudo-element icon
                typeTextClicked(this, true);
            });
        } else {
            $("body").on("click keypress", ".copyable, code:not(.nocopy)", function (e) {
                if (!a11yClick(e)) return;
                if (e.offsetX > 0 && $(this).is("code") && $(this).parent().is("pre")) return; //for code blocks, only fire if the click is on the pseudo-element icon
                copyableClicked(this);
            });

            $("body").on("click keypress", ".typeText", function (e) {
                if (!a11yClick(e)) return;
                typeTextClicked(this);
            });
        }

        $("body").on("click keypress", ".moreKnowledgeLink", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            var $link = $(this);
            var $knowledge = $link.parent().prev();
            if ($knowledge.hasClass("expanded")) {
                $knowledge.removeClass("expanded");
                $link.text("more...");
            } else {
                $knowledge.addClass("expanded");
                $link.text("...less");
            }
        });

        $instructionsContent.on("click keypress", "a", function (e) {
            if (!a11yClick(e)) return;
            var href = $(this).attr("href");
            if (!href) return;
            if (href.indexOf("#") === 0 && href.length > 1) {
                e.preventDefault();
                var $element = $instructionsContent.find(href);
                if ($element.length > 0) {
                    var $page = $element.closest(".page");
                    var newPageIndex = parseInt($page.attr("id").replace("page", ""));
                    if (newPageIndex != pageIndex) {
                        pageIndex = newPageIndex;
                        pageIndexChanged();
                        pauseInlineVideos();
                        configureInstructionsPaging();
                        savePageIndex(pageIndex);
                    }
                    var scale = parseInt($("#zoom").val()) / 100.00;
                    $instructionsContent[0].scrollTop = $element[0].offsetTop * scale;
                }
            }
        }).on("click keypress", ".activity input", function (e) {
            if (!a11yClick(e)) return;
            if (this.checked) {
                $(this).closest(".activity").removeClass("requiredError").find(".feedback").hide();
            }
        }).on("keyup", ".activity input", function (e) {
            if (this.type === "text" && this.value) {
                $(this).closest(".activity").removeClass("requiredError").find(".feedback").hide();
            }
        }).on("change", ".activity input", function (e) {
            if (model.isPreview) return;
            var $activity = $(this).closest(".activity");
            var activityIndex = parseInt($activity.attr("data-index"));
            var replacementTokenAlias = $activity.attr("data-alias");
            var activity = getActivityByReplacementTokenAlias(labData.Activities, replacementTokenAlias);
            if (activity !== null) {
                activity.Passed = false;
                var saveUserInput = function (attemptCount) {
                    if (activity.saving && attemptCount < 20) {
                        window.setTimeout(function () { saveUserInput(attemptCount + 1); }, 500);
                        return;
                    }
                    activity.saving = true;
                    if (activity.Type === 0 || activity.Type === 10) {
                        var $checkedItems = $activity.find("input:checked");
                        var answerIds = [];
                        for (var i = 0, numChecked = $checkedItems.length; i < numChecked; i++) {
                            var $checkedItem = $checkedItems.eq(i);
                            var answerId = parseInt($checkedItem.closest(".answer").attr("data-id"));
                            answerIds.push(answerId);
                        }
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: { activityId: activity.Id, answerIds: answerIds, activityIndex: activityIndex },
                            cache: false,
                            url: "/Instructions/SaveMultipleChoiceActivity/" + model.id
                        }).always(function (response) {
                            activity.saving = false;
                            if (!response || !response.Success) {
                                console.error(response && response.Error ? response.Error : "Sorry an error occurred");
                                return;
                            }
                            if (response.Variables) {
                                handleVariablesObjectChanged(response.Variables);
                            }
                            if (response.GoToPage !== null) {
                                gotoPage(response.GoToPage);
                            }
                            api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: null });
                        });
                    } else if (activity.Type === 20 || activity.Type === 30) {
                        text = $activity.find(".answerText").val();
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: { activityId: activity.Id, text: text, activityIndex: activityIndex },
                            cache: false,
                            url: "/Instructions/SaveTextActivity/" + model.id
                        }).always(function (response) {
                            activity.saving = false;
                            if (!response || !response.Success) {
                                console.error(response && response.Error ? response.Error : "Sorry an error occurred");
                                return;
                            }
                            if (response.Variables) {
                                handleVariablesObjectChanged(response.Variables);
                            }
                            if (response.GoToPage !== null) {
                                gotoPage(response.GoToPage);
                            }
                            api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: null });
                        });
                    }
                };
                saveUserInput(0);
            }
        }).on("click keypress", ".activity .evaluate", function (e) {
            if (!a11yClick(e)) return;
            if (model.isPreview) {
                showClickFeedbackMessageForElement($(this), "Activity would now be submitted for evaluation.");
                return;
            }
            var $evaluate = $(this);
            var $activity = $evaluate.closest(".activity");
            $activity.removeClass("requiredError");
            var activityIndex = parseInt($activity.attr("data-index"));
            var replacementTokenAlias = $activity.attr("data-alias");
            var activity = getActivityByReplacementTokenAlias(labData.Activities, replacementTokenAlias);
            if (activity !== null) {
                $evaluate.prop("disabled", true);
                var evaluateActivity = function (attemptCount) {
                    if (activity.saving && attemptCount < 20) {
                        window.setTimeout(function () { evaluateActivity(attemptCount + 1); }, 500);
                        return;
                    }

                    activity.saving = true;

                    var $feedback = $activity.find(".feedback");
                    if ($feedback.length === 0) {
                        $feedback = $("<div class='feedback' style='display:none' ></div>");
                        $activity.find(".feedbackHolder").append($feedback);
                    }
                    var $loading = $activity.find(".loading");
                    if (activity.Type === 0 || activity.Type === 10) {
                        var $checkedItems = $activity.find("input:checked");
                        var answerIds = [];
                        for (var i = 0, numChecked = $checkedItems.length; i < numChecked; i++) {
                            var $checkedItem = $checkedItems.eq(i);
                            var answerId = parseInt($checkedItem.closest(".answer").attr("data-id"));
                            answerIds.push(answerId);
                        }
                        if (answerIds.length === 0) {
                            if (!$evaluate.is(":visible")) {
                                $feedback.removeClass("positive").addClass("negative").html("Please choose an answer").show();
                            } else {
                                var offset = $evaluate.offset();
                                var y = offset.top - 5;
                                var x = offset.left + $evaluate.outerWidth() + 10;
                                showClickFeedbackMessage("Please choose an answer", x, y, 2000);
                            }
                            $evaluate.prop("disabled", false);
                            activity.saving = false;
                            return;
                        }
                        if ($evaluate.is(":visible")) {
                            $loading.show();
                        }
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: { activityId: activity.Id, answerIds: answerIds, activityIndex: activityIndex },
                            cache: false,
                            url: "/Instructions/EvaluateMutipleChoiceActivity/" + model.id
                        }).always(function (response) {
                            $loading.hide();
                            activity.saving = false;
                            if (!response || !response.Success) {
                                $feedback.removeClass("positive").addClass("negative").html(response && response.Error ? response.Error : "Sorry an error occurred").show();
                                return;
                            }
                            if (response.Correct) {
                                activity.Passed = true;
                                $feedback.removeClass("negative").addClass("positive").attr("aria-label", "Correct");
                            } else {
                                activity.Passed = false;
                                $feedback.removeClass("positive").addClass("negative").attr("aria-label", "Incorrect");
                            }
                            if ($feedback.not(":visible")) {
                                $feedback.slideDown({
                                    duration: "fast",
                                    start: function () {
                                        if (response.Correct) {
                                            $feedback.html(response.Response ? instructionsProcessor.makeHtml(response.Response) : "Correct");
                                        } else {
                                            $feedback.html(response.Response ? instructionsProcessor.makeHtml(response.Response) : "Incorrect");
                                        }
                                    }
                                });
                            }
                            if (response.AllowRetry) {
                                $evaluate.prop("disabled", false);
                            } else {
                                $activity.find(".answer input").prop("disabled", true);
                            }
                            activity.AlreadyEvaluated = true;
                            setupActivityGroupEvaluationButtons();
                            if (response.Variables) {
                                handleVariablesObjectChanged(response.Variables);
                            }
                            if (response.GoToPage !== null) {
                                gotoPage(response.GoToPage);
                            }
                            if (typeof api !== 'undefined') {
                                api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: response.Correct });
                            }
                        });
                    } else if (activity.Type === 20 || activity.Type === 30) {
                        text = $activity.find(".answerText").val();
                        if (text.length === 0) {
                            if (!$evaluate.is(":visible")) {
                                $feedback.removeClass("positive").addClass("negative").html("Please provide an answer").show();
                            } else {
                                var textEvalOffset = $evaluate.offset();
                                var textEvalOffsetY = textEvalOffset.top - 5;
                                var textEvalOffsetX = textEvalOffset.left + $evaluate.outerWidth() + 10;
                                showClickFeedbackMessage("Please provide an answer", textEvalOffsetX, textEvalOffsetY, 2000);
                            }
                            $evaluate.prop("disabled", false);
                            activity.saving = false;
                            return;
                        }
                        $loading.show();
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: { activityId: activity.Id, text: text, activityIndex: activityIndex },
                            cache: false,
                            url: "/Instructions/EvaluateTextActivity/" + model.id
                        }).always(function (response) {
                            $loading.hide();
                            activity.saving = false;
                            if (!response || !response.Success) {
                                $feedback.removeClass("positive").addClass("negative").html(response && response.Error ? response.Error : "Sorry an error occurred").show();
                                return;
                            }
                            if (response.Correct) {
                                activity.Passed = true;
                                $feedback.removeClass("negative").addClass("positive").attr("aria-label", "Correct");
                            } else {
                                activity.Passed = false;
                                $feedback.removeClass("positive").addClass("negative").attr("aria-label", "Incorrect");
                            }
                            if ($feedback.not(":visible")) {
                                $feedback.slideDown({
                                    duration: "fast",
                                    start: function () {
                                        if (response.Correct) {
                                            $feedback.html(response.Response ? instructionsProcessor.makeHtml(response.Response) : "Correct");
                                        } else {
                                            $feedback.html(response.Response ? instructionsProcessor.makeHtml(response.Response) : "Incorrect");
                                        }
                                    }
                                });
                            }
                            if (response.AllowRetry) {
                                $evaluate.prop("disabled", false);
                            } else {
                                $activity.find(".answer input").prop("disabled", true);
                            }
                            activity.AlreadyEvaluated = true;
                            setupActivityGroupEvaluationButtons();
                            if (response.Variables) {
                                handleVariablesObjectChanged(response.Variables);
                            }
                            if (response.GoToPage !== null) {
                                gotoPage(response.GoToPage);
                            }
                            if (typeof api !== 'undefined') {
                                api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: response.Correct });
                            }
                        });
                    } else if (activity.Type === 40 || activity.Type === 70) { //automated or screenshot
                        if (activity.DisplayScriptsAsTaskList) {
                            var $scriptTasks = $activity.find(".scriptTask");
                            if ($scriptTasks.length === 0) return;
                            var allowRetry = false;
                            var allScriptsPassed = true; //we will set to false when any scripts fail
                            var runScript = function (scriptIndex) {
                                if (scriptIndex >= $scriptTasks.length) { //we've executed all scripts
                                    activity.saving = false;
                                    if (allowRetry) {
                                        $evaluate.prop("disabled", false);
                                    }
                                    activity.AlreadyEvaluated = true;
                                    activity.Passed = allScriptsPassed;
                                    setupActivityGroupEvaluationButtons();
                                    if (typeof api !== 'undefined') {
                                        api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: allScriptsPassed });
                                    }
                                    return;
                                }
                                var $scriptTask = $scriptTasks.eq(scriptIndex);
                                var scriptId = $scriptTask.attr('data-id');
                                $scriptTask.addClass("running").removeClass("error").removeClass("pass").removeClass("fail");
                                $response = $scriptTask.find(".response");
                                $response.html("");
                                var onError = function (response) {
                                    activity.saving = false;
                                    $scriptTask.addClass("error");
                                    $response.hide().slideDown({
                                        duration: "fast",
                                        start: function () {
                                            $response.html(response && response.Error ? response.Error : "Sorry an error occurred")
                                        }
                                    });
                                    allScriptsPassed = false;
                                    $scriptTask.removeClass("running");
                                    runScript(scriptIndex + 1);
                                };
                                var onComplete = function (jobResponse) {
                                    var $thisResponse = $response;
                                    $scriptTask.removeClass("running");
                                    if (jobResponse.Pass) {
                                        $scriptTask.addClass("pass").attr("aria-label", "Correct");
                                    } else {
                                        allScriptsPassed = false;
                                        $scriptTask.addClass("fail").attr("aria-label", "Incorrect");
                                    }
                                    if (jobResponse.Response || jobResponse.ScriptResponse) {
                                        $thisResponse.hide().slideDown({
                                            start: function () {
                                                if (jobResponse.Response) {
                                                    $thisResponse.append($("<div class='textResponse'>" + instructionsProcessor.makeHtml(jobResponse.Response) + "</div>"));
                                                }
                                                if (jobResponse.ScriptResponse) {
                                                    $thisResponse.append($("<div class='scriptResponse'>" + jobResponse.ScriptResponse + "</div>"));
                                                }
                                            }
                                        });
                                    }
                                    allowRetry = jobResponse.AllowRetry;
                                    if ('Variables' in jobResponse && jobResponse.Variables !== null) {
                                        handleVariablesObjectChanged(jobResponse.Variables);
                                    }
                                    if ('GoToPage' in jobResponse && jobResponse.GoToPage !== null) {
                                        gotoPage(jobResponse.GoToPage);
                                    }
                                    runScript(scriptIndex + 1);
                                };
                                var run = function (attempt) {
                                    if (attempt >= 3) {
                                        onError();
                                        return;
                                    }
                                    if (model.isPreview) {
                                        onComplete({ Pass: true, Response: "This is a simulated script response. No scripts will be run.", AllowRetry: true });
                                        return;
                                    }
                                    $.ajax({
                                        type: "POST",
                                        dataType: "json",
                                        data: { activityId: activity.Id, activityIndex: activityIndex, scriptId: scriptId },
                                        cache: false,
                                        url: "/Lab/EvaluateAutomatedActivityScript/" + model.id
                                    }).always(function (response) {
                                        if (!response || !response.Success) {
                                            activity.saving = false;
                                            onError(response);
                                            return;
                                        }
                                        var timeout = 10 * 60 * 1000; //10 minutes
                                        var pollInterval = 500;
                                        waitForJob(
                                            response.Job,
                                            pollInterval,
                                            timeout,
                                            onComplete,
                                            onError,
                                            onError,
                                            run,
                                            attempt
                                        );
                                    });
                                }
                                run(0);
                            };
                            runScript(0);
                        } else {
                            if ($feedback.is(":visible")) {
                                $feedback.slideUp("fast");
                            }
                            var onError = function (response) {
                                $feedback.removeClass("positive").addClass("negative");
                                $feedback.slideDown({
                                    duration: "fast",
                                    start: function () {
                                        $feedback.html(response && response.Error ? response.Error : "Sorry an error occurred")
                                    }
                                });
                                $evaluate.prop("disabled", false);
                                $loading.hide();
                                activity.saving = false;
                            };
                            var onComplete = function (jobResponse) {
                                activity.saving = false;
                                $loading.hide();
                                activity.AlreadyEvaluated = true;
                                setupActivityGroupEvaluationButtons();
                                if (jobResponse.Passed) {
                                    activity.Passed = true;
                                    $feedback.removeClass("negative").addClass("positive").attr("aria-label", "Correct");;
                                } else {
                                    activity.Passed = false;
                                    $feedback.removeClass("positive").addClass("negative").attr("aria-label", "Incorrect");;
                                }
                                $feedback.slideDown({
                                    duration: "fast",
                                    start: function () {
                                        if (jobResponse.Response) {
                                            $feedback.html("<div class='textResponse'>" + instructionsProcessor.makeHtml(jobResponse.Response) + "</div>");
                                        } else {
                                            $feedback.html("");
                                        }
                                        if (jobResponse.ScriptResponse) {
                                            $feedback.append($("<div class='scriptResponse'>" + jobResponse.ScriptResponse + "</div>"));
                                        }
                                    }
                                });
                                if (jobResponse.AllowRetry) {
                                    $evaluate.prop("disabled", false);
                                }
                                if ('Variables' in jobResponse && jobResponse.Variables !== null) {
                                    handleVariablesObjectChanged(jobResponse.Variables);
                                }
                                if ('GoToPage' in jobResponse && jobResponse.GoToPage !== null) {
                                    gotoPage(jobResponse.GoToPage);
                                }
                                if (typeof api !== 'undefined') {
                                    api.activityCompleted({ id: activity.Id, alias: activity.ReplacementTokenAlias, activityType: activity.Type, passed: jobResponse.Passed });
                                }
                            };

                            $loading.show();

                            var run = function (attempt) {
                                if (attempt >= 3) {
                                    onError();
                                    return;
                                }
                                if (model.isPreview) {
                                    onComplete({ Passed: true, Response: "This is a simulated script response. No scripts will be run.", AllowRetry: true });
                                    return;
                                }
                                $.ajax({
                                    type: "POST",
                                    dataType: "json",
                                    data: { activityId: activity.Id, activityIndex: activityIndex },
                                    cache: false,
                                    url: "/Lab/EvaluateAutomatedActivity/" + model.id
                                }).always(function (response) {
                                    if (!response || !response.Success) {
                                        onError(response);
                                        return;
                                    }
                                    var timeout = 10 * 60 * 1000; //10 minutes
                                    var pollInterval = 500;
                                    waitForJob(
                                        response.Job,
                                        pollInterval,
                                        timeout,
                                        onComplete,
                                        onError,
                                        onError,
                                        run,
                                        attempt
                                    );
                                });
                            }
                            run(0);
                        }
                    }

                };
                evaluateActivity(0);
            }
        }).on("click keypress", ".activityGroup .evaluateActivityGroup", function (e) {
            if (!a11yClick(e)) return;
            var $evaluateActivityGroup = $(this);
            var $activityGroup = $evaluateActivityGroup.closest(".activityGroup");
            $activityGroup.find('.activity .evaluate').each(function () {
                if (!$(this).prop("disabled")) {
                    this.click();
                }
            });
            setupActivityGroupEvaluationButtons();
        });

        $("#fullScreenMessage").keydown(function (e) {
            if (e.which === 27) { //esc
                $("#fullScreenMessage").find(".escape").click();
            }
            if (e.which === 9) { //tab
                var $focusable = $("#fullScreenMessage").find('a[href]:not([tabindex^="-"]), area[href]:not([tabindex^="-"]), input:not([type="hidden"]):not([type="radio"]):not([disabled]):not([tabindex^="-"]), input[type="radio"]:not([disabled]):not([tabindex^="-"]):checked, select:not([disabled]):not([tabindex^="-"]), textarea:not([disabled]):not([tabindex^="-"]), button:not([disabled]):not([tabindex^="-"]), iframe:not([tabindex^="-"]), audio[controls]:not([tabindex^="-"]), video[controls]:not([tabindex^="-"]), [contenteditable]:not([tabindex^="-"]), [tabindex]:not([tabindex^="-"])').filter(":visible");
                if ($focusable.length === 0) {
                    e.preventDefault();
                    $("#fullScreenMessageTitle").focus();
                    return;
                }
                if (e.shiftKey && document.activeElement === $focusable[0]) {
                    e.preventDefault();
                    $focusable[$focusable.length - 1].focus();
                } else if (!e.shiftKey && document.activeElement === $focusable[$focusable.length - 1]) {
                    e.preventDefault();
                    $focusable[0].focus();
                }
            }
        });

        $("#previous").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (pageIndex === 0) { return; }
            pageIndex -= 1;
            pageIndexChanged();
            pauseInlineVideos();
            configureInstructionsPaging();
            $instructionsContent[0].scrollTop = 0;
            labData.InstructionsScrollTop = 0;
            savePageIndex(pageIndex);
            if (model.isPreview) {
                window.parent.postMessage({ action: "gotoPage", pageIndex: pageIndex }, "*");
            }
        });

        $("#next").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if ($(this).hasClass("disabled")) return;

            pauseInlineVideos();

            var activityBlockEncountered = processIncompleteActivities("page" + pageIndex, false, true);
            if (activityBlockEncountered) {
                var y = $("#next").offset().top - 40;
                showRightOrientedClickFeedbackMessage("Please complete all required activities", 15, y, 2000);
                return;
            }

            var numPages = $(".page").length;
            if (numPages <= pageIndex + 1) {
                if (labData.IsExam) {
                    if (processIncompleteActivities("instructionsContent", true, false)) {
                        showRightOrientedClickFeedbackMessage("Please complete all required activities", 15, $("#next").offset().top - 40, 2000);
                        return;
                    }
                    showFullScreenMessage({
                        title: "",
                        message: "Are you sure you want to submit for grading?", buttons:
                            [
                                { text: ("Yes"), click: submitForScoring, primary: true },
                                {
                                    text: "No, not yet",
                                    click: function () {
                                        hideFullScreenMessage();
                                        $("#next").focus();
                                    },
                                    escape: true
                                }
                            ]
                    });
                } else {
                    showExitOptions();
                }
                return;
            }

            pageIndex += 1;
            pageIndexChanged();
            configureInstructionsPaging();
            $instructionsContent[0].scrollTop = 0;
            labData.InstructionsScrollTop = 0;
            savePageIndex(pageIndex);
            if (model.isPreview) {
                window.parent.postMessage({ action: "gotoPage", pageIndex: pageIndex }, "*");
            }
        });

        function processIncompleteActivities(containerId, flagRequired, flagNavBlockers) {
            if (model.isPreview) return false;
            var $activities = $("#" + containerId + " .activity");
            var navigated = false;
            var flagFound = false;
            for (var i = 0, numActivities = $activities.length; i < numActivities; i++) {
                var $activity = $activities.eq(i);
                var activity = getActivityByReplacementTokenAlias(labData.Activities, $activity.attr("data-alias"));
                if (activity === null) { continue; }

                if ((flagRequired && activity.Required) || (flagNavBlockers && activity.BlocksNavigation)) {
                    if (activity.BlocksNavigationUntilPassed && activity.Passed !== true) {
                        $activity.addClass("requiredError");
                        flagFound = true;
                    } else if (activity.Type === 0 || activity.Type === 10) {
                        if ($activity.find("input:checked").length === 0) {
                            $activity.addClass("requiredError");
                            flagFound = true;
                        }
                    } else if (activity.Type === 20 || activity.Type === 30) {
                        if (!$activity.find(".answerText").val()) {
                            $activity.addClass("requiredError");
                            flagFound = true;
                        }
                    } else if (activity.Type === 40) {
                        if (activity.AlreadyEvaluated !== true) {
                            $activity.addClass("requiredError");
                            flagFound = true;
                        }
                    }
                }
                if (flagFound && !navigated) {
                    navigated = true;
                    var $page = $activity.closest(".page");
                    var newPageIndex = parseInt($page.attr("id").replace("page", ""));
                    if (newPageIndex != pageIndex) {
                        pageIndex = newPageIndex;
                        pageIndexChanged();
                        pauseInlineVideos();
                        configureInstructionsPaging();
                        savePageIndex(pageIndex);
                    }
                    var scale = parseInt($("#zoom").val()) / 100.00;
                    $instructionsContent[0].scrollTop = $activity[0].offsetTop * scale;
                }
            }
            return flagFound;
        }

        $(".container").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            var $container = $(this);
            if ($container.hasClass("selected")) return;
            var id = $(this).attr('data-id');
            if (!id) return;
            var containerImageId = parseInt(id);
            window.parent.selectContainerById(containerImageId);
        });

        $(".container .reconnect").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            var containerId = parseInt($(this).closest(".container").attr("data-id"));
            window.parent.reconnectContainer(containerId);
        });

        $(".container .openInNewWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            var containerImageId = parseInt($(this).closest(".container").attr("data-id"));
            if ($(this).hasClass("open")) {
                window.parent.closeContainerWindow(containerImageId);
            } else {
                window.parent.openContainerInNewWindow(containerImageId);
            }
        });

        $(".container .openTerminal").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            var containerImageId = parseInt($(this).closest(".container").attr("data-id"));
            var url = "/ContainerClient/" + model.key + "?containerImageId=" + containerImageId + "&forceTerminal=1";
            var windowId = "containerTerminalWindow" + containerImageId;
            var containerTerminalWindow = window.open(url, windowId, 'width=1024,height=768,status=no,resizable=1,scrollbars=0');
            childWindows.push(containerTerminalWindow);
        });

        $("#language-selector").on("change", function () {
            let url = `/Lab/SwitchLanguage/${model.id}/?instructionsSetId=${$(this).val()}`;
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {},
                cache: false,
                url: url
            }).always(function (response) {
                if (response?.Success) {
                    if (isChildClient) {
                        window.parent.disableNavigationWarning();
                        window.parent.location.reload();
                    } else {
                        disableNavigationWarning = true;
                        window.location.reload();
                    }
                } else {
                    console.error("Error switching language. " + response?.Error ? response?.Error : "");
                }
            });
        });

        $("#theme").change(function () {
            var themeId = parseInt(this.value);
            var $selectedOption = $(this).find(":selected");
            var themeName = $selectedOption.attr("data-name");
            writeCookie("Theme", themeId, 60);
            if (model.layoutVersion === 1) {
                $("#themeStylesheet").attr("href", "/Css/" + themeName + ".css");
                if (isChildClient) {
                    window.parent.themeChanged(themeName, themeId);
                }
            } else {
                let styleSheetUrl = $selectedOption.attr("data-style-sheet-url");
                $("#themeStylesheet").attr("href", styleSheetUrl);
                if (isChildClient) {
                    window.parent.themeChanged(themeName, themeId, styleSheetUrl);
                }
            }

            if (editWindow && !editWindow.closed) {
                editWindow.postMessage({ action: "setTheme", themeName: themeName }, "*");
            }
            if (window.opener) {
                try {
                    window.opener.postMessage({ action: "setTheme", themeId: themeId }, "*");
                } catch (e) {
                    //
                }
            }

            if (model.isPreview) {
                window.parent.postMessage({ action: "setTheme", themeId: themeId, themeName: themeName }, "*");
            } else {
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false,
                    url: "/Lab/SaveTheme/" + model.id + "/?theme=" + themeId
                }).always(function (response) {
                    if (response && response.Error) {
                        console.error("Error saving theme. " + response.Error);
                    }
                });
            }
        });

        var saveZoomTimeout = null;

        $("#zoom").on("input change", function () {
            setZoom(parseInt(this.value));
            if (model.isPreview) return;
            if (saveZoomTimeout !== null) {
                window.clearTimeout(saveZoomTimeout);
                saveZoomTimeout = null;
            }
            saveZoomTimeout = window.setTimeout(function () {
                var url = "/Instructions/SaveZoom/" + model.id + "?zoom=" + $("#zoom").val();
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false,
                    url: url
                });
            }, 2000);
        });

        $(".text-size-choice input").on("click", function (e) {
            if (!a11yClick(e)) return;
            let zoom = parseInt(this.value);
            setZoom(zoom);
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {},
                cache: false,
                url: `/Instructions/SaveZoom/${model.id}?zoom=${zoom}`
            });
        });

        let saveInstructionsScrollTopTimeout = null;

        $instructionsContent.scroll(function (e) {
            if (model.isPreview) return;
            if (saveInstructionsScrollTopTimeout !== null) {
                window.clearTimeout(saveInstructionsScrollTopTimeout);
                saveInstructionsScrollTopTimeout = null;
            }
            saveInstructionsScrollTopTimeout = window.setTimeout(function () {
                var scrollTop = $instructionsContent.scrollTop();
                if (labData.InstructionsScrollTop === scrollTop || scrollTop === null) { return; }
                labData.InstructionsScrollTop = scrollTop;
                var url = "/Instructions/SaveScrollTop/" + model.id + "?scrollTop=" + Math.floor(labData.InstructionsScrollTop);
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false,
                    url: url
                });
            }, 2000);
        });

        $(".tabHeading").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var $tabHeading = $(this);
            selectTab($tabHeading);
            var tabId = parseInt($tabHeading.attr("data-id"));
            $.ajax({
                url: "/Instructions/SaveNavTab/" + model.id + "/?tab=" + tabId,
                type: "POST",
                dataType: "json",
                data: {},
                cache: false
            });
            if (isChildClient) {
                window.parent.navigationTabChanged(tabId);
            }
        });

        $("#tabHolder").on("keyup", function (e) {
            var code = e.charCode || e.keyCode;
            if (code !== 37 && code !== 39) return;

            //Set next or previous tab on arrow key press
            if (code === 37 || code === 39) {
                var tabId = parseInt($(`.tabHeading.selected`).attr("data-id"));

                if (tabId === 0 && code === 37) tabId = 2;
                else if (tabId === 2 && code === 39) tabId = 0;
                else if (code === 37) tabId--;
                else if (code === 39) tabId++;

                $(`.tabHeading[data-id='${tabId}']`).click().focus();
                return;
            }
        });

        $("#tabHolder").focus(function (e) {
            $("#tabHolder").attr("tabindex", "-1");
            $(`.tabHeading.selected`).focus().attr("tabindex", "0");
        });

        function getNumSaveOptions() {
            var numSaveOptions = 0;
            if (labData.AllowSaveLabInstance) { numSaveOptions += 1; }
            if (labData.AllowUpdateLabProfile) { numSaveOptions += 1; }
            if (labData.AllowCreateNewLabProfile) { numSaveOptions += 1; }
            return numSaveOptions;
        }

        //v1 layout save button
        $("#save").on("click keypress", function (e) {
            e.stopPropagation();
            if (!a11yClick(e)) return;
            var numSaveOptions = getNumSaveOptions();
            if (numSaveOptions === 0) { return; }
            if (numSaveOptions === 1 && labData.AllowSaveLabInstance) {
                if (_enoughTimeRemainsToSave) {
                    showBasicSaveConfirmationDialog();
                }
                else {
                    showFullScreenMessage({
                        message: "Sorry, you cannot save a lab session with fewer than {0} minutes remaining.".format(labData.MinimumLabMinutesRemainingToAllowSave),
                        buttons: [{ text: "OK", click: function (e) { e.stopPropagation(); hideFullScreenMessage(function () { $('#save').focus() }) }, primary: true, escape: true }]
                    });
                }
            } //other save options handled separately
        });

        //v2+ layout save button
        $("#saveAndExit").on("click keypress", function (e) {
            e.stopPropagation();
            if (!a11yClick(e)) return;
            if (labData.AllowSaveLabInstance) {
                if (_enoughTimeRemainsToSave) {
                    showBasicSaveConfirmationDialog();
                }
                else {
                    showFullScreenMessage({
                        message: "Sorry, you cannot save a lab session with fewer than {0} minutes remaining.".format(labData.MinimumLabMinutesRemainingToAllowSave),
                        buttons: [{ text: "OK", click: function (e) { e.stopPropagation(); hideFullScreenMessage(function () { $('#saveAndExit').focus() }) }, primary: true, escape: true }]
                    });
                }
            }
        });

        function showBasicSaveConfirmationDialog() {
            var buttons = [
                {
                    text: labData.IsExam && model.layoutVersion === 1 ? "Yes, save my exam" : "Yes, save my lab",
                    click: saveLab,
                    primary: true
                },
                {
                    text: "No, not yet",
                    click: function (e) {
                        e.stopPropagation();
                        hideFullScreenMessage(function () {
                            if (model.layoutVersion === 1) {
                                $('#save').focus();
                            } else {
                                $('#saveAndExit').focus();
                            }
                        })
                    },
                    escape: true
                }
            ];
            let expiration = new Date();
            expiration.setDate(expiration.getDate() + labData.MaxSaveDays);
            let message;
            if (labData.IsExam && model.layoutVersion === 1) {
                message = labData.MaxSavedLabInstances
                    ? "Your exam will be saved for {0} days. It will expire on {1}. You can save up to {2} exams.".format(labData.MaxSaveDays, expiration.toLocaleString(), labData.MaxSavedLabInstances)
                    : "Your exam will be saved for {0} days. It will expire on {1}.".format(labData.MaxSaveDays, expiration.toLocaleString(), labData.MaxSavedLabInstances);
            } else {
                message = labData.MaxSavedLabInstances
                    ? "Your lab will be saved for {0} days. It will expire on {1}. You can save up to {2} labs. ".format(labData.MaxSaveDays, expiration.toLocaleString(), labData.MaxSavedLabInstances)
                    : "Your lab will be saved for {0} days. It will expire on {1}.".format(labData.MaxSaveDays, expiration.toLocaleString(), labData.MaxSavedLabInstances);
            }
            showFullScreenMessage({
                title: labData.IsExam && model.layoutVersion === 1 ? "Would you like to save your exam and close it for now?" : "Would you like to save your lab and close it for now?",
                message: message,
                buttons: buttons
            });
        }

        function showExitOptions() {
            var autoAssessedAsComplete = false;
            var $tasks = $("#instructionsContent").find(".task-list-item .checkbox input[type='checkbox']");
            if ($tasks.length > 0) {
                var numCheckedTasks = $tasks.filter(":checked").length;
                if (numCheckedTasks === $tasks.length) {
                    autoAssessedAsComplete = true;
                }
            }

            if (!autoAssessedAsComplete && labData.CanBeMarkedComplete) {
                showFullScreenMessage({
                    title: "End Lab",
                    message: "<div style='margin:25px 0 10px 0;'><span class='sr-only'>Please make a selection</span><div><label style='font-size:120%;'><input type='radio' name='endLabChoice' id='endLabComplete' checked/>End my lab and mark it as complete</label></div><div style='margin-top:16px;'><label style='font-size:120%;'><input type='radio' name='endLabChoice' id='endLabCancel'/>Cancel my lab</label></div><div id='endLabMakeSelection' style='margin-top:10px; visibility:hidden;' class='negative'>Please make a selection</div></div>",
                    buttons: [
                        {
                            text: "OK",
                            primary: true,
                            click: function () {
                                var $container = isSplitWindowClient
                                    ? window.parent.opener.getFullScreenMessageContainer()
                                    : isChildClient ? window.parent.getFullScreenMessageContainer() : $("#fullScreenMessage");
                                if ($container.find("#endLabComplete").prop("checked")) {
                                    if (labData.IsExam) {
                                        submitForScoring();
                                    } else {
                                        endLab(true);
                                    }
                                } else if ($container.find("#endLabCancel").prop("checked")) {
                                    endLab();
                                } else {
                                    $container.find("#endLabMakeSelection").css("visibility", "");
                                }
                            }
                        },
                        { text: "Cancel", click: function (e) { e.stopPropagation(); hideFullScreenMessage(function () { $('#exit').focus() }) }, escape: true }
                    ]
                });
            }
            else if (labData.IsSharedClassEnvironment) {
                showFullScreenMessage({
                    title: "Are you sure you want to end this lab? Ending this lab will also end all connected participants.",
                    message: "<span class='sr-only'>Please make a selection</span>",
                    buttons: [
                        { text: "Yes, end my lab", primary: true, click: function () { endLab(autoAssessedAsComplete); } },
                        { text: "No, not yet", click: function (e) { e.stopPropagation(); hideFullScreenMessage(function () { $('#exit').focus() }) }, escape: true }
                    ]
                });
            }
            else {
                showFullScreenMessage({
                    title: "Are you sure you want to end this lab?",
                    message: "<span class='sr-only'>Please make a selection</span>",
                    buttons: [
                        { text: "Yes, end my lab", primary: true, click: function () { endLab(autoAssessedAsComplete); } },
                        { text: "No, not yet", click: function (e) { e.stopPropagation(); hideFullScreenMessage(function () { $('#exit').focus() }) }, escape: true }
                    ]
                });
            }
        }

        $("#exit").on("click keypress", function (e) {
            e.stopPropagation();
            if (!a11yClick(e)) return;
            showExitOptions();
        });

        $("#disconnect").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            showFullScreenMessage({
                title: "Are you sure you want to disconnect?",
                message: "If you disconnect, your lab will continue to run while you’re gone. You can return to it any time before the timer expires ({0}).".format($("#timer").text()),
                buttons: [
                    {
                        text: "Yes, disconnect. I\'ll be back later.",
                        primary: true,
                        click: function () {
                            labIsComplete();
                            showFullScreenMessage({
                                title: "Disconnected",
                                message: "You have disconnected from your lab. You can now close this browser window.",
                                showCloseWindowButton: true
                            });
                        }
                    },
                    { text: "Nevermind, keep me connected.", click: hideFullScreenMessage, escape: true }
                ]
            });
        });

        $("#closeWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            closePortalWindow();
            closeWindow();
        });

        //v1 layout main menu
        $("#mainMenuButton").on("click", function (e) {
            if (!a11yClick(e)) return;
            e.stopPropagation();
            if (mainMenuShown) {
                $("#mainMenu").slideUp("fast");
                $(this).attr("aria-expanded", "false");
            } else {
                $("#mainMenu").slideDown("fast");
                $(this).attr("aria-expanded", "true");
            }
            mainMenuShown = !mainMenuShown;
        });

        $("#mainMenuButton, #mainMenu").keyup(function (e) {
            if (e.keyCode === 27 & mainMenuShown)
                $("#mainMenuButton").click().focus();
        });

        //v2+ layout exit menu
        $("#exitMenuButton").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            e.preventDefault();
            e.stopPropagation();
            if ($("#exitMenu").is(":visible")) {
                $("#exitMenu").slideUp("fast");
                $(this).attr("aria-expanded", "false");
            } else {
                $("#exitMenu").slideDown("fast");
                $(this).attr("aria-expanded", "true");
            }
        });

        $("#exitMenuButton, #exitMenu").on("keyup", function (e) {
            if (e.keyCode === 27 & $("#exitMenu").is(":visible")) {
                $("#exitMenuButton").click().focus();
            }
        });

        $("#exitMenuButton").on("keydown", function (e) {
            if (e.which === 38 || e.which === 40) {
                if ($("#exitMenu").is(":visible")) {
                    $("#exitMenu").find('.menu-item').eq(0).focus();
                } else {
                    $("#exitMenuButton").click();
                    $("#exitMenu").find('.menu-item').eq(0).focus();
                }
            }
        });

        $("#exitMenu").on("keydown", ".menu-item", function (e) {
            if (e.which === 9) { //tab
                let $focusable = $("#exitMenu").find('.menu-item').filter(":visible");
                if ($focusable.length === 0) return;
                if (e.shiftKey && document.activeElement === $focusable[0]) {
                    $("#exitMenu").slideUp("fast");
                } else if (!e.shiftKey && document.activeElement === $focusable[$focusable.length - 1]) {
                    $("#exitMenu").slideUp("fast");
                }
            } else if (e.which === 38) { //up arrow
                e.preventDefault();
                let $previousMenuItems = $(this).prevAll('.menu-item:visible');
                if ($previousMenuItems.length > 0) {
                    $previousMenuItems[0].focus();
                }
            } else if (e.which === 40) { //down arrow
                e.preventDefault();
                let $nextMenuItems = $(this).nextAll('.menu-item:visible');
                if ($nextMenuItems.length > 0) {
                    $nextMenuItems[0].focus();
                }
            }
        });

        $("#notificationsButton").on("click", function (e) {
            if (!a11yClick(e)) return;
            if (model.layoutVersion === 1) {
                showDialog({
                    title: "Notifications",
                    content: "<div id='notificationsDialog'><span class='loadingAnimation-medium'></span></div>",
                    buttons: [{ text: "OK", primary: true, closeDialog: true }]
                });
            }
            $.ajax({
                url: "/Lab/GetNotifications/" + model.id,
                type: "POST",
                dataType: "json",
                data: {},
                cache: false
            }).always(function (response) {
                if (response && response.Success) {
                    var notifications = response.Notifications;
                    var numNotifications = notifications.length;
                    var html = "";
                    if (numNotifications === 0) {
                        html += "<div class='noNotifications'>You have no notifications</div>";
                    } else {
                        for (var i = 0; i < numNotifications; i++) {
                            var notification = notifications[i];
                            html += "<div data-id='" + notification.Id + "' class='listedNotification'><div class='listedNotificationDate'>" + notification.Created + "</div><div class='listedNotificationBody'>" + notification.Text + "</div></div>";
                        }
                    }
                    if (model.layoutVersion === 1) {
                        var $notificationDialog = $("#notificationsDialog");
                        $notificationDialog.html(html);
                    } else {
                        $("#notifications-menu .modal-menu-content").html(html);
                    }
                } else {
                    $("#notificationsDialog").text(response && response.Error ? response.Error : "Sorry an error occurred");
                }
            });
        });

        $("#editInstructions").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (editWindow && !editWindow.closed) {
                editWindow.focus();
                return;
            }
            if (isSplitWindowClient) {
                var otherEditWindow = window.parent.getInstructionsEditWindow();
                if (otherEditWindow != null) {
                    return;
                }
            }
            var url = "/Instructions/Edit?Id=" + model.id;
            editWindow = window.open(url, "editWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
            childWindows.push(editWindow);
            editWindow.focus();
        });

        $("#developerToolsMenu").on("click keypress", "a", function (e) {
            hideModalMenu("settings-menu");
        });

        $("#editInstanceName").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            var dialogHtml = '<p>Rename your lab instance to make it easier to identify later.</p>';
            dialogHtml += '<input id="newInstanceName" type="text" maxlength="200" style="width:100%; max-width:600px;"> ';
            dialogHtml += '<span id="newInstanceNameValidation" class="error-message" style="display:none;"></span>';
            var dialog = showDialog({
                allowParentOverride: !isSplitWindowClient,
                title: "Rename Your Lab Instance",
                content: dialogHtml,
                open: function () {
                    dialog.getElementById("newInstanceName").value = $("#instanceName").text();
                },
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "OK",
                        primary: true,
                        click: function () {
                            var newInstanceNameElement = dialog.getElementById("newInstanceName");
                            var data = {
                                name: dialog.getElementById("newInstanceName").value
                            };
                            var validationElement = dialog.getElementById("newInstanceNameValidation");
                            if (!data.name) {
                                validationElement.style.display = "";
                                validationElement.innerHTML = "Required";
                                newInstanceNameElement.classList.add("validation-error");
                                newInstanceNameElement.focus();
                                return;
                            }
                            validationElement.style.display = "none";
                            newInstanceNameElement.classList.remove("validation-error");
                            if (model.isPreview) {
                                $("#instanceName").text(data.name);
                                document.title = data.name;
                                dialog.close();
                                return;
                            }
                            showDialog({
                                allowParentOverride: !isSplitWindowClient,
                                title: "Rename Your Lab Instance",
                                content: "<span class='loadingAnimation-medium'></span>"
                            });
                            $.ajax({
                                url: "/Lab/EditInstanceName/" + model.id,
                                type: "POST",
                                dataType: "json",
                                data: data,
                                cache: false
                            }).always(function (response) {
                                if (response && response.Success) {
                                    $("#instanceName").text(data.name);
                                    document.title = data.name;
                                    if (isChildClient) {
                                        window.parent.document.title = data.name;
                                    }
                                    if (isSplitWindowClient) {
                                        window.parent.opener.document.title = data.name;
                                    }
                                    dialog.close();
                                } else {
                                    showDialog({
                                        title: "Rename Your Lab Instance",
                                        allowParentOverride: !isSplitWindowClient,
                                        content: response && response.Error ? response.Error : "Sorry an error occurred",
                                        buttons: [{
                                            text: "OK",
                                            primary: true,
                                            closeDialog: true
                                        }]
                                    });
                                }
                            });
                        }
                    }
                ]
            });
        });

        $("#assign").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            var dialogHtml = "<p>Please provide the e-mail address of the user you would like to assign this lab to.</p>";
            dialogHtml += '<input id="externalAssignmentEmail" type="email" maxlength="512" style="width:300px;" placeholder="E-mail"> ';
            dialogHtml += '<span id="externalAssignmentEmailValidation" class="error-message" style="display:none;"></span>';

            var dialog = showDialog({
                allowParentOverride: true,
                title: "Create Lab Assignment",
                content: dialogHtml,
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "OK",
                        primary: true,
                        click: function () {
                            var data = {
                                email: dialog.getElementById("externalAssignmentEmail").value
                            };
                            var validationElement = dialog.getElementById("externalAssignmentEmailValidation");
                            if (!data.email) {
                                validationElement.style.display = "";
                                validationElement.innerHTML = "Required";
                                dialog.getElementById("externalAssignmentEmail").classList.add("validation-error");
                                dialog.getElementById("externalAssignmentEmail").focus();
                                return;
                            }
                            var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                            if (!regex.test(data.email)) {
                                validationElement.style.display = "";
                                validationElement.innerHTML = "Invalid Email Address";
                                dialog.getElementById("externalAssignmentEmail").classList.add("validation-error");
                                dialog.getElementById("externalAssignmentEmail").focus();
                                return;
                            }
                            validationElement.style.display = "none";
                            dialog.getElementById("externalAssignmentEmail").classList.remove("validation-error");
                            showDialog({
                                title: "Create Lab Assignment",
                                allowParentOverride: true,
                                content: "<span class='loadingAnimation-medium'></span>"
                            });
                            $.ajax({
                                url: "/Lab/CreateExternalAssignment/" + model.id,
                                type: "POST",
                                dataType: "json",
                                data: data,
                                cache: false
                            }).always(function (response) {
                                if (response && response.Success) {
                                    showDialog({
                                        title: "Create Lab Assignment",
                                        allowParentOverride: true,
                                        content: "The lab assignment was created successfully.",
                                        buttons: [{
                                            text: "OK",
                                            primary: true,
                                            closeDialog: true
                                        }]
                                    });
                                } else {
                                    showDialog({
                                        title: "Create Lab Assignment",
                                        allowParentOverride: true,
                                        content: response && response.Error ? response.Error : "Sorry an error occurred",
                                        buttons: [{
                                            text: "OK",
                                            primary: true,
                                            closeDialog: true
                                        }]
                                    });
                                }
                            });
                        }
                    }
                ]
            });
        });

        $("#share").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            var dialogHtml = "<div id='shareFormLoading'><span class='loadingAnimation-medium'></span></div>";
            dialogHtml += '<div id="shareForm" style="display:none;"><input id="shareEmail" type="email" maxlength="512" style="width:362px;" placeholder="E-mail"> <span id="shareEmailValidation" class="error-message" style="display:none;"></span>';
            dialogHtml += '<div style="margin:15px 0;">';
            dialogHtml += 'Expires <label><input type="radio" id="shareDoesNotExpire" name="shareExpiresType" value="0" checked="checked" />when the lab ends</label> <label><input id="shareExpires" type="radio" name="shareExpiresType" value="1" />at a particular time</label> <input type="text" style="visibility:hidden;" id="shareExpiresDate" class="datepicker" maxlength="200" /> <input type="text" id="shareExpiresTime" class="timepicker" maxlength="200" style="visibility:hidden;" /> <span id="shareExpiresValidation" class="error-message" style="display:none;"></span>';
            dialogHtml += '</div >';
            dialogHtml += '<div style="display:none;" id="permissions"><div style="margin-bottom:10px;">Permissions</div></div>';
            dialogHtml += "<div style='margin-left:1px; margin-top:20px;'> <input type='button' class='primary' id='createShare' value='Share' /> <span id='shareCreationInProgress' class='loadingAnimation-medium' style='margin-left:3px; display:none;'></span> <span id='shareResultMessage' style='display: inline-block; height:23px; margin-left:5px;'></span></div>";
            dialogHtml += "<h3 style='margin-top:40px;'>Existing Shares</h3><table id='existingShares' style='margin:20px 0;' class='simpleGrid'><thead><tr><th>Name</th><th>E-mail</th><th>Created</th><th>Expires</th><th></th></tr></thead><tbody></tbody></table><div id='noExistingShares' style='margin:20px 0;'>This lab instance currently isn\'t being shared with any other users.</p>";
            dialogHtml += "</div>";

            var dialog = showDialog({
                allowParentOverride: true,
                title: "Share this lab instance",
                content: dialogHtml,
                buttons: [
                    {
                        text: "Close",
                        closeDialog: true
                    }
                ]
            });

            $.ajax({
                url: "/Lab/PrepareShareLabInstanceDialog/" + model.id,
                type: "POST",
                dataType: "json",
                data: {},
                cache: false
            }).always(function (response) {
                if (response && response.Success) {
                    dialog.getElementById("shareFormLoading").style.display = "none";
                    dialog.getElementById("shareForm").style.display = "";
                    var $permissions = $(dialog.getElementById("permissions"));
                    var hasPermissions = false;
                    if (response.Permissions && response.Permissions.length > 0) {
                        $permissions.show();
                        hasPermissions = true;
                        for (var i = 0, numPermissions = response.Permissions.length; i < numPermissions; i++) {
                            $permissions.append('<div style="margin: 3px 0"><label><input type="checkbox" class="permission" data-id="' + response.Permissions[i].Id + '">' + response.Permissions[i].Name + '</label></div>');
                        }
                    }
                    var $existingShares = $(dialog.getElementById("existingShares"));
                    var $existingSharesTBody = $existingShares.find("tbody");
                    var $noExistingShares = $(dialog.getElementById("noExistingShares"));
                    if (response.Shares && response.Shares.length > 0) {
                        $existingShares.show();
                        $noExistingShares.hide();
                        for (var j = 0, numShares = response.Shares.length; j < numShares; j++) {
                            var share = response.Shares[j];
                            $existingSharesTBody.append('<tr data-id="' + share.Id + '" data-email="' + share.Email + '"><td>' + (share.Name ? share.Name : "") + '</td><td>' + share.Email + '</td><td>' + new Date(share.Created * 1000).toLocaleString() + '</td><td>' + (share.Expires ? new Date(share.Expires * 1000).toLocaleString() : "when the lab ends") + '</td><td class"editButtons"><a href="#" class="deleteLink">Delete</a></td></tr>');
                        }
                    } else {
                        $existingShares.hide();
                        $noExistingShares.show();
                    }
                    var $shareExpires = $(dialog.getElementById("shareExpires"));
                    var $shareExpiresDate = $(dialog.getElementById("shareExpiresDate"));
                    var $shareExpiresTime = $(dialog.getElementById("shareExpiresTime"));
                    var currentTimeFormat = new Date().toLocaleTimeString();
                    var timeFormat = "G:i";
                    if (currentTimeFormat.indexOf("AM") >= 0 || currentTimeFormat.indexOf("PM") >= 0) {
                        timeFormat = "g:ia";
                    }
                    dialog.setupDatepicker("shareExpiresDate");
                    dialog.setupTimepicker("shareExpiresTime", { timeFormat: timeFormat });
                    $shareExpires.click(function () {
                        $shareExpiresDate.css("visibility", "").focus().change(function () {
                            $shareExpiresTime.focus();
                        });
                        $shareExpiresTime.css("visibility", "");
                    });
                    $(dialog.getElementById("shareDoesNotExpire")).click(function () {
                        $shareExpiresDate.css("visibility", "hidden");
                        $shareExpiresTime.css("visibility", "hidden");
                    });
                    //$fullControl = $(dialog.getElementById("shareFullControl"));
                    //$fullControl.click(function () {
                    //    if (hasPermissions) {
                    //        $permissions.slideDown("fast");
                    //    }
                    //});
                    //$(dialog.getElementById("shareViewOnly")).click(function () {
                    //    $permissions.slideUp("fast");
                    //});
                    var $createShareButton = $(dialog.getElementById("createShare"));
                    $createShareButton.click(function () {
                        var $shareEmailValidation = $(dialog.getElementById("shareEmailValidation"));
                        var $shareEmail = $(dialog.getElementById("shareEmail"));
                        $shareEmailValidation.hide();
                        $shareResultMessage = $(dialog.getElementById("shareResultMessage"));
                        $shareResultMessage.hide().removeClass("error-message").removeClass("positive");
                        $shareEmail.removeClass("validation-error");
                        var $shareExpiresValidation = $(dialog.getElementById("shareExpiresValidation"));
                        $shareExpiresValidation.hide();
                        var $shareCreationInProgress = $(dialog.getElementById("shareCreationInProgress"));
                        var expires = null;
                        if ($shareExpires.prop("checked") && $shareExpiresDate.val()) {
                            var expiresDate = dialog.getDateFromDatePicker("shareExpiresDate");
                            if ($shareExpiresTime.val()) {
                                expiresDate = $shareExpiresTime.timepicker('getTime', expiresDate);
                            }
                            if (expiresDate < new Date()) {
                                $shareExpiresValidation.html("Please pick a date in the future").show();
                                $shareExpiresDate.focus();
                                return;
                            }
                            expires = expiresDate.getTime() / 1000;
                        }
                        var permissions = [];
                        $permissions.find(".permission:checked").each(function () {
                            var permissionId = parseInt($(this).attr("data-id"));
                            permissions.push(permissionId);
                        });
                        var data = {
                            id: model.id,
                            email: $shareEmail.val(),
                            permissions: permissions,
                            expires: expires,
                            //fullControl: $fullControl.prop("checked")
                            fullControl: true
                        };
                        if (!data.email) {
                            $shareEmailValidation.html("Required").show();
                            $shareEmail.addClass("validation-error");
                            $shareEmail.focus();
                            return;
                        }
                        var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        if (!regex.test(data.email)) {
                            $shareEmailValidation.html("Invalid Email Address").show();
                            $shareEmail.addClass("validation-error");
                            $shareEmail.focus();
                            return;
                        }
                        $shareCreationInProgress.show();
                        $createShareButton.prop("disabled", true);
                        $.ajax({
                            url: "/Lab/CreateLabInstanceShare",
                            type: "POST",
                            dataType: "json",
                            data: data,
                            cache: false
                        }).always(function (response) {
                            $shareCreationInProgress.hide();
                            $createShareButton.prop("disabled", false);
                            if (response && response.Success) {
                                $existingShares.show();
                                $noExistingShares.hide();
                                $existingSharesTBody.append('<tr data-id="' + response.Id + '" data-email="' + response.Email + '"><td>' + (response.Name ? response.Name : "") + '</td><td>' + response.Email + '</td><td>' + new Date(response.Created * 1000).toLocaleString() + '</td><td>' + (response.Expires ? new Date(response.Expires * 1000).toLocaleString() : "when the lab ends") + '</td><td class"editButtons"><a href="#" class="deleteLink">Delete</a></td></tr>');
                                $shareEmail.focus().val("");
                                $shareResultMessage.addClass("positive").show().html("Shared to {0}".format(response.Email));
                            } else {
                                if (response && response.EmailError) {
                                    $shareEmailValidation.html(response.EmailError).show();
                                } else {
                                    $shareResultMessage.addClass("error-message").show().html(response && response.Error ? response.Error : "Sorry an error occurred");
                                }
                            }
                        });
                    });

                    $existingShares.on("click", ".deleteLink", function () {
                        var $row = $(this).closest("tr");
                        if (!confirm("Are you sure you want to delete the share with {0} ?".format($row.attr("data-email")))) return;

                        var shareId = parseInt($row.attr("data-id"));
                        $.ajax({
                            url: "/Lab/DeleteLabInstanceShare",
                            type: "POST",
                            dataType: "json",
                            data: { id: model.id, shareId: shareId },
                            cache: false
                        }).always(function (response) {
                            if (response && response.Success) {
                                $row.remove();
                                if ($existingSharesTBody.find("tr").length === 0) {
                                    $existingShares.hide();
                                    $noExistingShares.show();
                                }
                            } else {
                                alert(response && response.Error ? response.Error : "Sorry an error occurred");
                            }
                        });
                    });

                } else {
                    $(dialog.getElementById("shareFormLoading")).html(response && response.Error ? response.Error : "Sorry an error occurred")
                }
            });
        });

        $("#transfer").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            var dialogHtml = '<div id="transferInputPage">';

            dialogHtml += '<p>' + "You can transfer your lab instance to another user by providing an e-mail address." + '</p><p style="font-weight:bold;">' + "If you continue, you will lose access to this lab instance." + '</p>';
            dialogHtml += '<input id="transferEmail" type="email" maxlength="512" style="width:362px;" placeholder="E-mail">';
            dialogHtml += '<div id="transferEmailValidation" class="error-message" style="display:none; margin-top:5px;"></div>';
            if (model.allowUserTransferSaves) {
                dialogHtml += '<div style="margin-top:10px;"><label><input type="checkbox" id="transferSave"  />' + "Save this lab instance" + '</label></div>';
            }
            dialogHtml += '</div>';
            dialogHtml += '<span id="transferProgressPage" class="loadingAnimation-medium" style="display:none;"></span>';
            dialogHtml += '<div id="transferConfirmationPage" style="display:none;"></div>';
            var validated = false;

            var showTransferInputPage = function (dialog, errorMessage) {
                var $buttons = dialog.getButtons();
                $buttons.eq(0).prop("disabled", false).show();
                $buttons.eq(1).hide();
                $buttons.eq(2).prop("disabled", false).show().val("Next >");
                $(dialog.getElementById("transferInputPage")).show();
                $(dialog.getElementById("transferConfirmationPage")).hide();
                $(dialog.getElementById("transferProgressPage")).hide();
                $(dialog.getElementById("transferEmail")).focus();
                var $transferEmailValidation = $(dialog.getElementById("transferEmailValidation"));
                if (errorMessage) {
                    $transferEmailValidation.html(errorMessage).show();
                } else {
                    $transferEmailValidation.hide();
                }
            };

            var showTransferProgressPage = function (dialog) {
                var $buttons = dialog.getButtons();
                $buttons.eq(0).prop("disabled", true);
                $buttons.eq(1).prop("disabled", true);
                $buttons.eq(2).prop("disabled", true);
                $(dialog.getElementById("transferInputPage")).hide();
                $(dialog.getElementById("transferConfirmationPage")).hide();
                $(dialog.getElementById("transferProgressPage")).show();
            };

            var showTransferConfirmationPage = function (dialog, confirmationMessage) {
                var $buttons = dialog.getButtons();
                $buttons.eq(0).prop("disabled", false).show();
                $buttons.eq(1).prop("disabled", false).show();
                $buttons.eq(2).prop("disabled", false).show().val("Transfer");
                $(dialog.getElementById("transferInputPage")).hide();
                $(dialog.getElementById("transferConfirmationPage")).show().html(confirmationMessage);
                $(dialog.getElementById("transferProgressPage")).hide();
            };

            var dialog = showDialog({
                allowParentOverride: true,
                title: "Transfer this lab instance to someone else",
                content: dialogHtml,
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "< Previous",
                        hidden: true,
                        click: function () {
                            validated = false;
                            showTransferInputPage(dialog);
                        }
                    },
                    {
                        text: "Next >",
                        primary: true,
                        click: function () {
                            var $transferEmailValidation = $(dialog.getElementById("transferEmailValidation"));
                            var $transferEmail = $(dialog.getElementById("transferEmail"));
                            var transferSave = dialog.getElementById("transferSave");
                            $transferEmailValidation.hide();
                            $transferEmail.removeClass("validation-error");
                            var data = {
                                id: model.id,
                                save: transferSave !== null ? transferSave.checked : false,
                                email: $transferEmail.val()
                            };
                            if (!data.email) {
                                $transferEmailValidation.html("Required").show();
                                $transferEmail.addClass("validation-error");
                                $transferEmail.focus();
                                return;
                            }
                            var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                            if (!regex.test(data.email)) {
                                $transferEmailValidation.html("Invalid Email Address").show();
                                $transferEmail.addClass("validation-error");
                                $transferEmail.focus();
                                return;
                            }

                            showTransferProgressPage(dialog);

                            if (!validated) {

                                $.ajax({
                                    url: "/Lab/ValidateTransferLabInstance/" + model.id,
                                    type: "POST",
                                    dataType: "json",
                                    data: data,
                                    cache: false
                                }).always(function (response) {
                                    if (response && response.Success) {
                                        validated = true;
                                        var confirmationMessage = "Are you sure you want to transfer this lab instance to <strong>{0}</strong> ({1})?".format(response.Name, response.Email);
                                        showTransferConfirmationPage(dialog, confirmationMessage);
                                    } else {
                                        showTransferInputPage(dialog, response && response.Error ? response.Error : "Sorry an error occurred");
                                    }
                                });

                            } else {
                                dialog.getButtons().eq(0).prop("disabled", true);
                                dialog.getButtons().eq(1).prop("disabled", true);
                                setPauseServerSync(true);
                                var url = "/Lab/TransferLabInstance/" + model.id;
                                if (model.takeControl) {
                                    url += "?isTakeControl=1";
                                }
                                $.ajax({
                                    url: url,
                                    type: "POST",
                                    dataType: "json",
                                    data: data,
                                    cache: false
                                }).always(function (response) {
                                    if (response && response.Success) {
                                        var transferMessage = "Your lab has been transferred to {0}.".format(response.Name);
                                        if (model.takeControl) {
                                            dialog.close();
                                            alert(transferMessage);
                                        } else {
                                            dialog.close();
                                            labIsComplete();
                                            showFullScreenMessage({ title: transferMessage, message: "", showCloseWindowButton: true });
                                        }
                                    } else {
                                        validated = false;
                                        setPauseServerSync(false);
                                        showTransferInputPage(dialog, response && response.Error ? response.Error : "Sorry an error occurred");
                                    }
                                });

                            }


                        }
                    }
                ]
            });
        });

        $("#extendExpiration").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var dialogHtml = '<div id="extendExpireFormLoading"><span class="loadingAnimation-medium"></span></div>';
            dialogHtml += '<div id="extendExpireForm" style="display: none;">';
            dialogHtml += ' <span id="ExtendExpirationTime" style="display: none;">' + "Your lab instance has already been extended by {0} hours.".format(labData.ExtendExpirationTime) + '</span></div>';
            dialogHtml += '<table class="fields" style="margin:15px 0;">';
            dialogHtml += '<tr><input type="text" id="extendExpireDate" class="datepicker" maxlength="200" aria-label="' + "Lab Expiration Date" + '"/><input type="text" id="extendExpireTime" class="timepicker" maxlength="200" aria-label="' + "Lab Expiration Time" + '" /> <span id="extendExpiresValidation" class="error-message" style="display:none;" role="alert"></span></td></tr>';
            dialogHtml += '</table >';
            dialogHtml += '<div style="margin-left:1px; margin-top:20px;">';
            dialogHtml += '<span id="extendExpireInProgress" class="loadingAnimation-medium" style="margin-left:3px; display:none;"></span> <span id="extendExpireResultMessage" role="alert" style="display: inline-block; height:23px; margin-left:5px;"></span></div>';
            dialogHtml += '</div>';

            var dialog = showDialog({
                allowParentOverride: true,
                title: "Change when my lab ends",
                content: dialogHtml,
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "OK",
                        primary: true,
                        click: function () {

                            var $extendExpiresValidation = $(dialog.getElementById("extendExpiresValidation"));
                            var $extendExpireInProgress = $(dialog.getElementById("extendExpireInProgress"));
                            $extendExpireResultMessage = $(dialog.getElementById("extendExpireResultMessage"));
                            $extendExpireResultMessage.hide().removeClass("error-message").removeClass("positive");

                            var expires = null;
                            if ($extendExpireDate.val()) {
                                var expiresDate = dialog.getDateFromDatePicker("extendExpireDate");
                                if ($extendExpireTime.val()) {
                                    expiresDate = $extendExpireTime.timepicker('getTime', expiresDate);
                                }
                                if (expiresDate < new Date()) {
                                    $extendExpiresValidation.html("Please pick a date in the future").show();
                                    $extendExpireDate.focus();
                                    return;
                                }
                                expires = expiresDate.getTime() / 1000;
                            } else if (!$extendExpireTime.val()) {
                                $extendExpiresValidation.html("Please pick a date in the future").show();
                                $extendExpireDate.focus();
                                return;
                            }

                            var data = {
                                id: model.id,
                                expires: expires,
                            };

                            $extendExpiresValidation.hide();
                            $extendExpireInProgress.show();
                            dialog.getElementById("extendExpireFormLoading").style.display = "";
                            dialog.getElementById("extendExpireForm").style.display = "none";

                            $.ajax({
                                url: "/Lab/ExtendExpiration",
                                type: "POST",
                                dataType: "json",
                                data: data,
                                cache: false
                            }).always(function (response) {
                                $extendExpireInProgress.hide();
                                //$extendExpireButton.prop("disabled", false);
                                dialog.getElementById("extendExpireFormLoading").style.display = "none";
                                dialog.getElementById("extendExpireForm").style.display = "";
                                if (response && response.Success) {
                                    labData.ExtendExpirationTime = response.totalTimeExtendedHours;
                                    $(dialog.getElementById("ExtendExpirationTime")).html(labData.ExtendExpirationTime);
                                    updateTimer(response.MinutesRemaining);
                                    var newExpiration = new Date(response.Expires * 1000);
                                    showDialog({
                                        title: "Change when my lab ends",
                                        allowParentOverride: true,
                                        content: "Your lab has been extended until {0}.".format(newExpiration),
                                        buttons: [{
                                            text: "OK",
                                            primary: true,
                                            closeDialog: true
                                        }]
                                    });
                                } else {
                                    $extendExpireResultMessage.addClass("error-message").show().html(response && response.Error ? response.Error : "Sorry an error occurred");
                                }
                            });
                        }
                    }
                ]
            });

            if (labData.ExtendExpirationTime !== "0:0") {
                $("#ExtendExpirationTime").show();
            }

            var $extendExpireDate = $(dialog.getElementById("extendExpireDate"));
            var $extendExpireTime = $(dialog.getElementById("extendExpireTime"));
            var currentTimeFormat = new Date().toLocaleTimeString();
            var timeFormat = "G:i";
            if (currentTimeFormat.indexOf("AM") >= 0 || currentTimeFormat.indexOf("PM") >= 0) {
                timeFormat = "g:ia";
            }
            dialog.setupDatepicker("extendExpireDate", { maxDate: "+45d", minDate: new Date() });
            dialog.setupTimepicker("extendExpireTime", { timeFormat: timeFormat, scrollDefault: "now" });

            window.setTimeout(function () { // Need dialog to slide down before focusing so the datepicker is in the right location
                dialog.getElementById("extendExpireFormLoading").style.display = "none";
                dialog.getElementById("extendExpireForm").style.display = "";
                $extendExpireDate.blur().focus();
            }, 500);
        });

        $("#bugReport").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var html = "<div id='bugReport'><div style='float:right;'><div style='font-size:18px; float:left;'>* </div> = Required</div><h2 style='margin-top:0;'><label for='bugReportName'>Please enter a one-line summary *</label></h2><input type='text' id='bugReportName' style='width:100%;' /><h2><label for='bugReportReproductionSteps'>Steps to reproduce the problem *</label></h2><textarea id='bugReportReproductionSteps' style='width:100%;' rows='4'>1. \n2. \n3. </textarea><h2><label for='bugReportExpectedBehavior'>Expected behavior</label></h2><textarea id='bugReportExpectedBehavior' style='width:100%;' rows='4'></textarea><h2><label for='bugReportActualBehavior'>What went wrong? *</label></h2><textarea id='bugReportActualBehavior' style='width:100%;' rows='4'></textarea><h2><label for='bugReportComments'>Any other comments?</label></h2><textarea id='bugReportComments' style='width:100%;' rows='4'></textarea></div>";
            var selectedMachineId = null;
            var includeScreenshot = false;
            var screenWidth = 0;
            var screenHeight = 0;
            if (labData.IsVirtualizationClient) {
                var selectedMachine = window.parent.getSelectedMachine();
                selectedMachineId = selectedMachine !== null ? selectedMachine.ProfileId : null;
                if (selectedMachineId !== null) {
                    html += "<div><input type='checkbox' checked='checked' id='bugReportIncludeScreenshot'><label for='bugReportIncludeScreenshot'>Include a screenshot of my currently selected machine</label></div>";
                }
            }
            var dialog = showDialog({
                allowParentOverride: true,
                content: html,
                title: "Report a bug",
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "Submit Bug Report",
                        primary: true,
                        click: function () {
                            if (labData.IsVirtualizationClient) {
                                var bugReportIncludeScreenshot = dialog.getElementById("bugReportIncludeScreenshot");
                                if (bugReportIncludeScreenshot !== null) {
                                    var vmSize = window.parent.getVmSize();
                                    screenWidth = vmSize.width;
                                    screenHeight = vmSize.height;
                                    includeScreenshot = bugReportIncludeScreenshot.checked;
                                }
                            }
                            var data = {
                                name: dialog.getElementById("bugReportName").value,
                                reproductionSteps: dialog.getElementById("bugReportReproductionSteps").value,
                                expectedBehavior: dialog.getElementById("bugReportExpectedBehavior").value,
                                actualBehavior: dialog.getElementById("bugReportActualBehavior").value,
                                comments: dialog.getElementById("bugReportComments").value,
                                machineId: selectedMachineId,
                                screenWidth: screenWidth,
                                screenHeight: screenHeight,
                                includeScreenshot: includeScreenshot
                            };
                            if (data.name.length === 0) {
                                alert("Please provide a one-line summary");
                                return;
                            }
                            if (data.reproductionSteps.length === 0) {
                                alert("Please provide steps to reproduce the problem");
                                return;
                            }
                            if (data.actualBehavior.length === 0) {
                                alert("Please provide a description of what went wrong");
                                return;
                            }
                            showDialog({
                                title: "Report a bug",
                                allowParentOverride: true,
                                content: "<span class='loadingAnimation-medium'></span>"
                            });
                            if (model.isPreview) {
                                dialog.close();
                                let offset = $("#bugReport").offset();
                                showClickFeedbackMessage("Bug report would now be submitted.", offset.left, offset.top - 40, 3000);
                                return;
                            }
                            $.ajax({
                                url: "/Lab/SubmitBugReport/" + model.id,
                                type: "POST",
                                dataType: "json",
                                data: data,
                                cache: false
                            }).always(function (response) {
                                if (response && response.Success) {
                                    showDialog({
                                        title: "Report a bug",
                                        allowParentOverride: true,
                                        content: "Your bug report has been successfully submitted. Thanks for your feedback!",
                                        buttons: [{
                                            text: "OK",
                                            primary: true,
                                            closeDialog: true
                                        }]
                                    });
                                } else {
                                    dialog.close();
                                    alert(response && response.Error ? response.Error : "Sorry an error occurred");
                                }
                            });
                        }
                    }
                ]
            });
        });

        $("#resourcesTab").on("click", "a.unassign", function (e) {
            e.preventDefault();
            let $link = $(this);
            let $column = $link.closest("td");
            let credId = $column.find(".id").val();
            if (confirm("Are you sure you want to unassign this credential?")) {
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: {
                        id: model.id,
                        credId: credId
                    },
                    cache: false,
                    url: "/Lab/UnassignCredential"
                }).always(function (response) {
                    if (response.Success)
                        $link.parents(".cloudCredential").hide();
                    else
                        showClickFeedbackMessageForElement($link, response?.Error ? response.Error : "Sorry an error occurred");
                });
            }
        });

        $("#resourcesTab").on("click", "a.editVirtualMachineInstance", function (e) {
            e.preventDefault();
            if (!a11yClick(e)) return;

            var $machine = $(this).closest(".machine");
            var machineId = parseInt($machine.attr("id").replace("machine", ""));
            var machine = window.parent.getMachineById(machineId);
            var ram = machine.Ram;
            var ramUnit = 0;
            if (ram >= 1024 & ram % 1024 === 0) {
                ram = ram / 1024;
                ramUnit = 10;
            }
            var content = "<div class='edit-form'>";
            content += "    <div style='margin-bottom:20px;'>Changes made to your virtual machine will depend on resource availability on the host server. To help ensure your changes take effect, please make the smallest adjustments you believe you will need.</div>";
            content += "    <table class='fields'>";
            content += "        <tr><td class='fieldName'>RAM</td><td><input type='number' class='ram' min='0' max='3891200' maxlength='7' value='" + ram + "' validation-required-message='RAM is required' validation-format-message='RAM must be a number' /> <select class='ramUnit' name='ramUnit'><option value='0'>MB</option><option value='10' " + (ramUnit === 10 ? "selected='selected'" : "") + ">GB</option></select ></td></tr>";
            content += "        <tr><td class='fieldName'># Processors</td><td><input type='number' class='numProcessors' value='" + machine.NumProcessors + "' max='128' maxlength='3' min='1' style='width: 60px;' validation-required-message='# Processors is required' validation-format-message='# Processors must be a number' /></td></tr>";
            if (labData.VirtualizationPlatform === 3) {
                content += "        <tr><td class='fieldName'># Cores Per Processor</td><td><input type='number' class='numCoresPerProcessor' value='" + machine.NumCoresPerProcessor + "' max='128' maxlength='3' min='1' style='width: 60px;' validation-required-message='# Cores per Processor is required' validation-format-message='# Cores per Processor must be a number'/></td></tr>";
            }
            content += "    </table>";
            content += '    <div class="errorSummary negative" style="margin-top: 20px;"></div>';
            if (labData.VirtualizationPlatform === 2) {
                content += "    <div class='negative vCpuUpdateShutDownWarning' style='margin-top: 20px; display:none;'>Warning: Your virtual machine will be shut down in order to apply your processor changes.</div>";
            } else if (labData.VirtualizationPlatform === 3) {
                content += "    <div class='negative' style='margin-top: 20px;'>Warning: Your virtual machine will be shut down in order to apply your changes.</div>";
            }
            content += "</div>";
            content += "<div class='saving' style='display:none;'><span class='loadingAnimation-medium'></span> Saving</div>";

            var dialog = showDialog({
                allowParentOverride: true,
                title: "Edit Virtual Machine - " + machine.DisplayName,
                content: content,
                open: function () {
                    if (labData.VirtualizationPlatform === 2) {
                        var $dialogContent = dialog.getContent();
                        $dialogContent.find('.numProcessors').change(function () {
                            if (parseInt(this.value) !== machine.NumProcessors) {
                                $dialogContent.find(".vCpuUpdateShutDownWarning").show();
                            } else {
                                $dialogContent.find(".vCpuUpdateShutDownWarning").hide();
                            }
                        });
                    }
                },
                buttons: [
                    {
                        text: "Cancel",
                        closeDialog: true
                    },
                    {
                        text: "Save",
                        primary: true,
                        click: function () {

                            var $dialogContent = dialog.getContent();
                            var errors = [];
                            var ram = 0;
                            var $ram = $dialogContent.find('.ram');
                            if (validateRequiredField($ram, errors) && validateNumericField($ram, errors)) {
                                ram = parseInt($ram.val());
                                if ($dialogContent.find(".ramUnit").val() === "10") {
                                    ram = ram * 1024;
                                }
                            }
                            var numProcessors = 0;
                            var $numProcessors = $dialogContent.find('.numProcessors');
                            if (validateRequiredField($numProcessors, errors) && validateNumericField($numProcessors, errors)) {
                                numProcessors = parseInt($numProcessors.val());
                            }
                            var numCoresPerProcessor = 1;
                            if (labData.VirtualizationPlatform === 3) {
                                var $numCoresPerProcessor = $dialogContent.find('.numCoresPerProcessor');
                                if (validateRequiredField($numCoresPerProcessor, errors) && validateNumericField($numCoresPerProcessor, errors)) {
                                    numCoresPerProcessor = parseInt($numCoresPerProcessor.val());
                                }
                            }
                            if (errors.length > 0) {
                                $dialogContent.find(".errorSummary").show().html(errors.join(""));
                                return;
                            } else {
                                $dialogContent.find(".errorSummary").hide();
                            }


                            $dialogContent.find('.edit-form').hide();
                            $dialogContent.find('.saving').show();
                            dialog.hideButtons();

                            var data = {
                                machineId: machineId,
                                ram: ram,
                                numProcessors: numProcessors,
                                numCoresPerProcessor: numCoresPerProcessor
                            };

                            var onError = function (response) {
                                window.parent.setIgnoreVirtualMachineStateDuringSync(false);
                                hideFullScreenMessage();
                                dialog.show();
                                $dialogContent.find(".edit-form").show();
                                $dialogContent.find(".saving").hide();
                                $dialogContent.find(".errorSummary").show().html(response && response.Error ? response.Error : "Sorry an error occurred");
                                $dialogContent.animate({ scrollTop: $dialogContent.find(".errorSummary").offset().top }, 500);
                                dialog.showButtons();
                            }

                            window.parent.setIgnoreVirtualMachineStateDuringSync(true);

                            $.ajax({
                                url: "/Lab/EditVirtualMachineInstance/" + model.id,
                                type: "POST",
                                dataType: "json",
                                data: data,
                                cache: false
                            }).always(function (response) {
                                if (!response || !response.Success) {
                                    onError(response);
                                    return;
                                }
                                dialog.hide();
                                showFullScreenMessage({ title: "Committing your changes", showLoadingImage: true });
                                var timeout = 10 * 60 * 1000; //10 minutes
                                waitForJob(response.Job, 1000, timeout,
                                    function () {
                                        window.parent.setIgnoreVirtualMachineStateDuringSync(false);
                                        hideFullScreenMessage();
                                        machine.Ram = ram;
                                        machine.NumProcessors = numProcessors;
                                        machine.NumCoresPerProcessor = numCoresPerProcessor;
                                        var displayRam = ram;
                                        var displayRamUnit = "MB";
                                        if (ram >= 1024 & ram % 1024 === 0) {
                                            displayRam = displayRam / 1024;
                                            displayRamUnit = "GB";
                                        }
                                        $machine.find(".ram").html(displayRam + " " + displayRamUnit);
                                        $machine.find(".numVcpus").html(numCoresPerProcessor * numProcessors);
                                        dialog.show();
                                        dialog.showButtons();

                                        window.parent.reconnectToSelectedMachine();

                                        showDialog({
                                            title: "Edit Virtual Machine - " + machine.DisplayName,
                                            allowParentOverride: true,
                                            content: "Your virtual machine has been successfully updated.",
                                            buttons: [{
                                                text: "OK",
                                                primary: true,
                                                closeDialog: true
                                            }]
                                        });
                                    },
                                    onError,
                                    onError
                                );
                            });

                        }
                    }
                ]
            });
        });

        $(".modal-menu-button").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let targetId = $(this).attr("data-target");
            showModalMenu(targetId);
        });

        $(".close-modal-menu-button").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let $modalMenu = $(this).closest(".modal-menu");
            hideModalMenu($modalMenu.attr("id"));
        });

        $(".modal-menu").keydown(function (e) {
            let $menu = $(this);
            if (e.which === 27) { //esc
                hideModalMenu($menu.attr("id"));
            } else if (e.which === 9) { //tab
                let $focusable = $menu.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]').filter(":visible");
                if ($focusable.length === 0) return;
                if (e.shiftKey && document.activeElement === $focusable[0]) {
                    e.preventDefault();
                    $focusable[$focusable.length - 1].focus();
                } else if (!e.shiftKey && document.activeElement === $focusable[$focusable.length - 1]) {
                    e.preventDefault();
                    $focusable[0].focus();
                }
            }
        });
    }

    function validateRequiredField($element, errors) {
        if ($element.length === 0) return false;
        var val = $element.val();
        if (!val) {
            if (errors.length === 0) { $element.focus(); }
            $element.addClass("validation-error");
            var message = $element.attr("validation-required-message");
            if (message) {
                errors.push("<div>" + message + "</div>");
            } else {
                errors.push("<div>A required field is missing</div>");
            }
            return false;
        }
        $element.removeClass("validation-error");
        return true;
    }

    function validateNumericField($element, errors) {
        if ($element.length === 0) return false;
        var val = $element.val();
        if (!val) {
            return true;
        }
        if (isNaN(val)) {
            if (errors.length === 0) { $element.focus(); }
            $element.addClass("validation-error");
            var message = $element.attr("validation-format-message");
            if (message) {
                errors.push("<div>" + message + "</div>");
            } else {
                errors.push("<div>A numeric field is invalid</div>");
            }
            return false;
        }
        $element.removeClass("validation-error");
        return true;
    }

    function setZoom(zoom) {
        if (!enableZoom) return;
        $("#zoomValue").html(zoom + "%");
        $("#zoom").attr("aria-valuenow", zoom);
        let input = zoom;
        let scale = input / 100.00;
        let width = (10000 / input);
        $(".zoomable").css({
            "-webkit-transform": "scale(" + scale + ")",
            "-moz-transform": "scale(" + scale + ")",
            "-ms-transform": "scale(" + scale + ")",
            "-o-transform": "scale(" + scale + ")",
            "transform-origin": "top " + (isRtl ? "right" : "left"),
            "width": width + "%"
        });
        if ($("#zoom").val() != zoom) {
            $("#zoom").val(zoom);
        }
    }

    var firstUpdate = true;
    var disableInstructionsCachingOnNextUpdate = false;

    window.addEventListener("message", receiveMesage, false);

    function receiveMesage(event) {
        if (!event.data.action) return;
        switch (event.data.action) {
            case "updateInstructions":
                updateInstructions(event.data.instructions, event.data.bubbleToParent, event.data.currentPageOnly);
                break;
            case "takeScreenshot":
                takeScreenshot();
                break;
            case "addActivity":
                addActivity(event.data.activity);
                break;
            case "updateActivity":
                updateActivity(event.data.activity);
                break;
            case "removeActivity":
                removeActivity(event.data.id);
                break;
            case "sortActivities":
                sortActivities();
                break;
            case "addActivityGroup":
                addActivityGroup(event.data.activityGroup);
                break;
            case "updateActivityGroup":
                updateActivityGroup(event.data.activityGroup);
                break;
            case "disableInstructionsCachingOnNextUpdate":
                disableInstructionsCachingOnNextUpdate = true;
                break;
            case "updateOptions":
                updateOptions(event.data);
                break;
            case "updateVariablesAndReplacements":
                labData.Variables = event.data.variables;
                labData.Replacements = parseReplacements(event.data.replacements);
                break;
            case "updateReplacementTokenValue":
                for (let token of labData.ReplacementTokens) {
                    if (token.Token == event.data.name) {
                        token.Replacement = event.data.value;
                        break;
                    }
                }
                break;
            case "sendInstructionsPageTitles":
                let pageTitles = [];
                $instructionsContent.find(".page").each(function () {
                    let $firstChild = $(this).children().first();
                    if ($firstChild.length > 0 && $firstChild.is(":header")) {
                        pageTitles.push($firstChild.text());
                    } else {
                        pageTitles.push("");
                    }
                });
                event.source.postMessage({
                    action: "receiveInstructionsPageTitles",
                    instructionsPageTitles: pageTitles,
                    elementId: event.data.elementId,
                    value: event.data.value
                }, "*");
                break;
            case "gotoPage":
                if (pageIndex != event.data.pageIndex || event.data.top !== undefined) {
                    gotoPage(event.data.pageIndex, event.data.top);
                }
                break;
        }
    }

    function getMarkdownForPage(sourceMarkdown, pIndex) {
        let pagesRegex = /^\s*===\s*$/gm;
        let numPageBreakMatches = 0;
        let currentPageCharacterStartIndex = 0;
        let desiredPageMarkdown = null;
        while (match = pagesRegex.exec(sourceMarkdown)) {
            if (numPageBreakMatches == pIndex) { //this is the desired page               
                desiredPageMarkdown = sourceMarkdown.substring(currentPageCharacterStartIndex, match.index);
            }
            numPageBreakMatches += 1;
            currentPageCharacterStartIndex = pagesRegex.lastIndex;
        }
        //if is the desired page is the last page of markdown, the above loop won't have assigned desiredPageMarkdown
        if (desiredPageMarkdown == null && currentPageCharacterStartIndex > 0) {
            desiredPageMarkdown = sourceMarkdown.substring(currentPageCharacterStartIndex, sourceMarkdown.length);
        }
        if (numPageBreakMatches < pIndex) { //if we are asked for a page that doesn't exist, return null
            return null;
        } else if (numPageBreakMatches == 0) { //if this was just one page of markdown (no page breaks found), return the whole thing
            return {
                numPages: 0,
                index: 0,
                markdown: sourceMarkdown
            };
        } else {
            return {
                numPages: numPageBreakMatches + 1, //we include the total number of pages found because the caller may want to compare to the number of expected pages
                index: pIndex,
                markdown: desiredPageMarkdown
            };
        }
    }

    function updateInstructions(rawContent, bubbleToParent, currentPageOnly) {
        let pageMarkdownResult = null;
        let processOnlyCurrentPage = false;
        let numRenderedPages = $("#pages .page").length;
        if (numRenderedPages > 0 && currentPageOnly && pageIndex !== null) {
            pageMarkdownResult = getMarkdownForPage(rawContent, pageIndex);
            if (pageMarkdownResult !== null && pageMarkdownResult.numPages > 0 && pageMarkdownResult.markdown != null) {
                if (pageMarkdownResult.numPages == numRenderedPages) { //if the number of pages in the markdown matches the number of pages rendered, we can process only the current page
                    processOnlyCurrentPage = true;
                }
            }
        }

        if (processOnlyCurrentPage) {
            instructionsProcessor.process(pageMarkdownResult.markdown, `page${pageIndex}`, labData.ContentRoot, labData.ReplacementTokens,
                function ($page) {
                    customDomProcessing($page);
                },
                labData.Activities,
                labData.ActivityGroups,
                labData.Variables,
                processVariables,
                labData.Replacements,
                saveActivityDelivery
            );
        } else {
            instructionsProcessor.process(rawContent, "pages", labData.ContentRoot, labData.ReplacementTokens,
                function ($page) {
                    customDomProcessing($page);
                },
                labData.Activities,
                labData.ActivityGroups,
                labData.Variables,
                processVariables,
                labData.Replacements,
                saveActivityDelivery
            );
        }

        editTriggered = true;
        if (editWindow && !editWindow.closed) {
            //if doing live editing, send variables to the editor
            editWindow.postMessage({
                action: "setDynamicVariables",
                dynamicVariables: instructionsProcessor.getDynamicVariables()
            }, "*");
        }
        processVariables();
        saveActivityDelivery();
        disableInstructionsCachingOnNextUpdate = false;
        if (firstUpdate) {
            appendExternalManualPages();
            window.setTimeout(setupTaskProgress, 1);
        }
        firstUpdate = false;
        $allTasks = null; //in case tasks have changed
        configureInstructionsPaging();
        if (isChildClient && bubbleToParent) {
            window.parent.instructionsUpdated(rawContent); //the split content window may need updating
        }
        labData.Instructions = rawContent;
    }

    function takeScreenshot() {
        var virtualizationWindow = isSplitWindowClient
            ? window.parent.opener
            : window.parent;
        if (virtualizationWindow && virtualizationWindow.takeScreenshot) {
            virtualizationWindow.takeScreenshot((response) => {
                editWindow.postMessage({
                    action: "insertScreenshot",
                    response
                }, "*");
            });
        } else {
            console.error("Unable to take screenshot because virtualization window is not available.");
        }
    }

    function updateOptions(options) {
        if (options.enableTaskProgressTracking != null) {
            labData.EnableTaskProgressTracking = options.enableTaskProgressTracking;
            if (labData.EnableTaskProgressTracking) {
                $("#taskProgressBar").show();
                $instructionsContent.addClass("withTaskProgress");
                setupTaskProgress();
            } else {
                $("#taskProgressBar").hide();
                $instructionsContent.removeClass("withTaskProgress");
            }
        }
        if (options.requireTasksCompletedInOrder != null) {
            labData.RequireTasksCompletedInOrder = options.requireTasksCompletedInOrder;
        }
        if (options.enableTaskAutoChecking != null) {
            labData.EnableTaskAutoChecking = options.enableTaskAutoChecking;
        }
    }

    function addActivity(activity) {
        labData.Activities.push(activity);
    }

    function updateActivity(activity) {
        var activities = labData.Activities;
        for (var i = 0, numActivities = activities.length; i < numActivities; i++) {
            if (activities[i].Id === activity.Id) {
                activities[i] = activity;
                return;
            }
        }
    }

    function removeActivity(id) {
        var activities = labData.Activities;
        for (var i = 0, numActivities = activities.length; i < numActivities; i++) {
            if (activities[i].Id === id) {
                activities.splice(i, 1);
                return;
            }
        }
    }

    function sortActivities() {
        labData.Activities.sort(function (a, b) {
            if (a.SortIndex === undefined || b.SortIndex === undefined) { return -1; }
            if (a.SortIndex < b.SortIndex) { return -1; }
            if (a.SortIndex > b.SortIndex) { return 1; }
            if (a.Id < b.Id) { return -1; }
            if (a.Id > b.Id) { return 1; }
            return 0;
        });
    }

    function addActivityGroup(activityGroup) {
        labData.ActivityGroups.push(activityGroup);
    }

    function updateActivityGroup(activityGroup) {
        for (var i = 0, numActivityGroups = labData.ActivityGroups.length; i < numActivityGroups; i++) {
            if (labData.ActivityGroups[i].Id === activityGroup.Id) {
                labData.ActivityGroups[i] = activityGroup;
                return;
            }
        }
    }

    function a11yClick(event) {
        if (event.type === 'click') {
            return true;
        }
        else if (event.type === 'keypress') {
            var code = event.charCode || event.keyCode;
            if ((code === 32) || (code === 13)) {
                return true;
            }
        }
        else {
            return false;
        }
    }

    function setLastCompletedTask(index) {
        if (!labData.RequireTasksCompletedInOrder || index == labData.LastCompletedTaskIndex) return;
        let lastItemToCheckIndex = index === null ? -1 : index;
        if ($allTasks === null) {
            $allTasks = $("#instructionsContent").find(".task-list-item");
        }
        if ($allTasks.length === 0) return;
        let numTasks = $allTasks.length;
        for (let i = 0; i <= lastItemToCheckIndex; i++) {
            $allTasks.eq(i).find("label.checkbox input[type='checkbox']").prop("checked", true);
        }
        for (let j = lastItemToCheckIndex + 1; j < numTasks; j++) {
            $allTasks.eq(j).find("label.checkbox input[type='checkbox']").prop("checked", false);
        }
        labData.LastCompletedTaskIndex = index;
        if (labData.EnableTaskProgressTracking) {
            updateTaskProgressBar(index + 1, numTasks);
        }        
    }

    function setCompletedTasksJson(completedTasksJson) {
        if (labData.RequireTasksCompletedInOrder || completedTasksJson == labData.CompletedTasksJson) return;
        labData.CompletedTasksJson = completedTasksJson;
        labData.CompletedTaskIndexes = labData.CompletedTasksJson != null ? JSON.parse(labData.CompletedTasksJson) : [];
        if ($allTasks === null) {
            $allTasks = $("#instructionsContent").find(".task-list-item");
        }
        $allTasks.find("label.checkbox input[type='checkbox']").prop("checked", false);
        for (let completedTaskIndex of labData.CompletedTaskIndexes) {
            $allTasks.eq(completedTaskIndex).find("label.checkbox input[type='checkbox']").prop("checked", true);
        }        
        if (labData.EnableTaskProgressTracking) {
            updateTaskProgressBar(labData.CompletedTaskIndexes.length, $allTasks.length);
        }       
        
    }

    return {
        initialize: initialize,
        updateTimer: updateTimer,
        showNotification: showNotification,
        labIsComplete: labIsComplete,
        setupKnowledgeExpanders: setupKnowledgeExpanders,
        getMainMenuExtensionsPlaceHolder: function () { return $("#mainMenuExtensions"); },
        getHelpExtensionsPlaceHolder: function () { return $("#helpExtensions"); },
        getResourcesExtensionsPlaceHolder: function () { return $("#resourcesExtensions"); },
        getDeveloperToolsMenu: function () { return $("#developerToolsMenu"); },
        disableNavigationWarning: function () { disableNavigationWarning = true; },
        selectInstructionsPage: function (index) {
            if (pageIndex !== index) {
                pageIndex = index;
                pageIndexChanged();
                configureInstructionsPaging();
            }
        },
        getInstructionsPageIndex: function () { return pageIndex; },
        getInstructionsScrollTop: function () { return $instructionsContent[0].scrollTop; },
        setInstructionsScrollTop: function (y) {
            labData.InstructionsScrollTop = y;
            $instructionsContent[0].scrollTop = y;
        },
        selectTab: function (id) {
            var $tabHeading = $(".tabHeading[data-id='" + id + "']");
            if ($tabHeading.length > 0) {
                selectTab($tabHeading);
            }
        },
        setTheme: function (themeName) {
            $('#theme option[data-name="' + themeName + '"]').prop('selected', 'selected');
            $("#themeStylesheet").attr("href", "/css/" + themeName + ".css?v=9");
        },
        setLastCompletedTask: setLastCompletedTask,
        getLastCompletedTaskIndex: function () {
            return labData.LastCompletedTaskIndex;
        },
        setCompletedTasksJson: setCompletedTasksJson,
        getCompletedTasksJson: function () {
            return labData.CompletedTasksJson;
        },
        getZoom: function () { return parseInt($("#zoom").val()); },
        setZoom: setZoom,
        splitWindowOpened: function () {
            if (editWindow && !editWindow.closed) {
                //if doing live editing, the new split window will get content from the database and may be missing unsaved changes. We need to force a refresh of content from the live editor.
                editWindow.postMessage({ action: "postInstructionsToOpener" }, "*");
            }
        },
        getInstructionsEditWindow: function () {
            if (editWindow && !editWindow.closed) {
                editWindow.focus();
                return editWindow;
            }
        },
        setVariables: function (variables) {
            handleVariablesObjectChanged(jobResponse.Variables);
        },
        setAndSaveVariable: function (name, val) {
            persistVariable(name, val);
        },
        getVariable: function (name) {
            return labData.Variables[name];
        },
        consoleHasLoaded: function () {
            if (!labData.IsVirtualizationClient && !labData.HostIsOffline && labData.State !== 170) {
                hideFullScreenMessage();
            }
            if (labData.IsVirtualizationClient && typeof api !== 'undefined' && typeof initialize_theme_script !== 'undefined') {
                initialize_theme_script();
            }
        },
        containerWindowOpened: function (containerId) {
            $(".container[data-id='" + containerId + "'] .openInNewWindow").addClass("open").text("Close Window");
        },
        containerWindowClosed: function (containerId) {
            $(".container[data-id='" + containerId + "'] .openInNewWindow").removeClass("open").text("Open in New Window");
        },
        containerSelected: function (containerId) {
            $container = $(".container[data-id='" + containerId + "']");
            if ($container.hasClass("selected")) return;
            $(".container.selected").removeClass("selected").find(".controls").slideUp("fast");
            $container.addClass("selected");
            $container.find(".controls").slideDown("fast");
        },
        showDialog: showDialog,
        showFullScreenMessage: showFullScreenMessage,
        hideFullScreenMessage: hideFullScreenMessage,
        getLabData: function () { return labData; },
        a11yClick: a11yClick,
        endLab: endLab,
        saveLab: saveLab,
        showChooserDialog: showChooserDialog,
        updateReplacementTokens: function () {
            var url = `/Instructions/GetReplacementTokens/${model.key}`;
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {},
                cache: false,
                url: url
            }).always(function (response) {
                if (!response || !response.Success) {
                    var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
                    console.error("Error obtaining updated replacement tokens. " + errorMessage);
                    return;
                }
                $("#pages").html("");
                labData.ReplacementTokens = response.ReplacementTokens;
                displayInstructions(labData.Instructions);
                if (labData.Variables) {
                    processVariables();
                }
            });
        },
        getReplacementTokens: function () {
            return labData.ReplacementTokens;
        },
        setLabState: function (state) {
            labData.State = state;
        },
        addChildWindow(childWindow) {
            childWindows.push(childWindow);
        },
        closeSettingsMenu: function () {
            if (model.layoutVersion === 1) return;
            hideModalMenu("settings-menu");
        },
        integratedLayoutHidden: function () {
            if (isChildClient && !isSplitWindowClient) {
                $("body").removeClass("integrated-layout");
            }
        },
        integratedLayoutShown: function () {
            if (isChildClient && !isSplitWindowClient) {
                $("body").addClass("integrated-layout");
            }
        },
        isChildClient: function () {
            return isChildClient;
        },
        getMinutesRemaining: function () { return labData.MinutesRemaining; },
        gotoInstructionsPage: function (index) {
            gotoPage(index);
        },
        evaluateActivity: function (alias, index = 0) {
            let $activity = $(`.activity[data-alias="${alias}"]`);
            if ($activity.length === 0) return;
            let $evaluateButton = $activity.find(".evaluate");
            if ($evaluateButton.length === 0) return;
            $evaluateButton.click();
        }
    };
}();

$(function () {
    labClient.initialize();
    if (navigator.userAgent.indexOf("Edge") >= 0) { //edge doesn't allow resizing or reposition of the browser window, so we will simply focus the window to ensure it isn't hidden behind the portal window
        window.setTimeout(function () { window.focus(); }, 5000);
    }
});
