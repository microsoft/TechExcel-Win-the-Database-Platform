
var labConsole = function () {

    let initialized = false;
    let labData = null;
    let syncIntervalMilliseconds = 10000;
    let lastUnsyncedActivity = null;
    let ignoreVirtualMachineStateDuringSync = false;
    let $labConsole;
    let $modalDialog;
    let $vmWrapper;
    let $rdpWrapper;
    let $sshWrapper;
    let $httpEndpointWrapper;
    let $rdpEndpointWrapper;
    let $telnetEndpointWrapper;
    let $vncEndpointWrapper;
    let $contentResourceWrapper;
    let $navigationBar;
    let notificationShown = false;
    let contentWindow;
    let selectedMachine;
    let selectedMachineState;
    let selectedMachineHistory = [];
    let selectedNavigationTab = 0;
    let selectedContentResource;
    let selectedEndpoint = null;
    let enableAutomaticScreenResizing;
    let windowFittingInProgress;
    let currentlyFullScreen = false;
    let latencyTotal = 0;
    let latencyCount = 0;
    let latencySamples = 3;
    let latencyCheckTiming = 20000;
    let latencySampleTiming = 250;
    let lastLatency = 0;
    let initialDialogIsVisible = false;
    let childWindows = [];
    let syncInterval;
    let notReadyMessageWasShown = false;
    let isRtl = false;
    let _remoteControllers = [];
    let $resizeOverlay = $("<div>", {
        class: "resize-overlay",
        css: {
            "z-index": 2000,
            position: "absolute",
            width: "100%",
            height: "100%",
            "background-color": "rgba(0, 0, 0, 0.5)",
            top: 0,
            left: 0,
        },
    });

    function fitSideBySideResource() {
        var $sideBySideResourceWrapper = $("#sideBySideResourceWrapper");
        if ($sideBySideResourceWrapper.length > 0) {
            $sideBySideResourceWrapper.height($navigationBar.outerHeight() - $sideBySideResourceWrapper.offset().top);
        }
    }

    function selectedSideBySideResourceSupportsOverlay() {
        var url = $("#sideBySideResourceFrame").attr("src");
        if (url === null) {
            return true;
        }
        return url.indexOf(".html") > 0 || url.indexOf(".htm") > 0;
    }

    function setupLatencyMeasurement(delay) {
        latencyCount = 0;
        latencyTotal = 0;
        setTimeout(checkLatency, delay ? delay : latencyCheckTiming);
    }

    function checkLatency() {
        if (labConsole.complete) return;
        var start = new Date();
        var url = model.latencyEndpoint;
        $.ajax({
            type: model.useGetForLatencyEndpoint ? "GET" : "HEAD",
            async: true,
            cache: false,
            url: url
        }).always(function () {
            processLatency(start);
        });
    }

    var latencyText;
    function showConnectionQuality(latency) {
        if (model.layoutVersion === 1) {
            $("#latency").text('' + latency + ' ms');
            var latencyTitleText = " (" + latency + " ms)";
            if (latency <= 100) {
                latencyText = "Connection: Excellent" + latencyTitleText;
                $("#connectionQuality").html("Excellent");
                $("#connectionImage").attr("src", "/images/virtualization-client/Connection4.png");
                $("#miniConnectionImage").attr({ src: "/images/virtualization-client/Connection4-s.png", title: latencyText });
            } else if (latency <= 250) {
                latencyText = "Connection: Good" + latencyTitleText;
                $("#connectionQuality").html("Good");
                $("#connectionImage").attr("src", "/images/virtualization-client/Connection3.png");
                $("#miniConnectionImage").attr({ src: "/images/virtualization-client/Connection3-s.png", title: latencyText });
            } else if (latency <= 500) {
                latencyText = "Connection: OK" + latencyTitleText;
                $("#connectionQuality").html("OK");
                $("#connectionImage").attr("src", "/images/virtualization-client/Connection2.png");
                $("#miniConnectionImage").attr({ src: "/images/virtualization-client/Connection2-s.png", title: latencyText });
            } else {
                latencyText = "Connection: Poor" + latencyTitleText;
                $("#connectionQuality").html("Poor");
                $("#connectionImage").attr("src", "/images/virtualization-client/Connection1.png");
                $("#miniConnectionImage").attr({ src: "/images/virtualization-client/Connection1-s.png", title: latencyText });
            }
        } else {
            if (latency > 500) {
                $("#poorConnectionWarning").show();
            } else {
                $("#poorConnectionWarning").hide();
            }
        }
    }

    $(document).on('focusin', '#miniConnectionImage', function () {
        $("#miniConnectionImageDiv").append('<span class="tooltiptext" role="status">' + latencyText + '</span>');
    });

    $(document).on('focusout', '#miniConnectionImage', function () {
        $(this).siblings('.tooltiptext').remove();
    });

    function setCursorOffset() {
        var remoteCursor = document.querySelector('canvas[name="svImgCursor"]');
        if (remoteCursor) {
            // offset the cursor image to account for the menu bar and any whitespace created from resizing larger than the vm display
            var sparkWrapper = document.querySelector('.sparkViewWrapper>div[contentEditable=true]');
            remoteCursor.style.transform = "translate(-" + sparkWrapper.style.left + ", -" + sparkWrapper.style.top + ")";
        }
    }

    // Watch for the creation of the cursor image overlay element 
    function observeSparkWrapper() {
        var sparkWrapper = document.querySelector('.sparkViewWrapper');
        if (sparkWrapper) {
            var cursorObserver = new MutationObserver(() => {
                setCursorOffset();
            });
            cursorObserver.observe(sparkWrapper, { childList: true });
        }
    }

    function processLatency(start) {
        var done = new Date();
        var ms = done.valueOf() - start.valueOf();
        latencyTotal += ms;
        latencyCount++;
        if (latencyCount < latencySamples) {
            setTimeout(checkLatency, latencySampleTiming);
            return;
        }
        lastLatency = Math.round(latencyTotal / latencySamples);
        showConnectionQuality(lastLatency);
        setupLatencyMeasurement();
    }    

    function getRemoteController(id) {
        for (let remoteController of _remoteControllers) {
            if (remoteController.machineId == id) {
                return remoteController;
            }
        }
        return null;
    }

    function getSelectedRemoteController() {
        if (selectedMachine == null) { return null; }
        return getRemoteController(selectedMachine.ProfileId);
    }

    function showSelectedRemoteController() {
        let rc = getSelectedRemoteController();
        if (rc != null) {
            rc.show();
        }
    }

    function hideSelectedRemoteController() {
        let rc = getSelectedRemoteController();
        if (rc != null) {
            rc.hide();
        }
    }

    function connectSelectedRemoteController() {
        let rc = getSelectedRemoteController();
        if (rc != null && selectedMachine != null) {
            rc.show();
            if (rc.getConnectionState() === 1) {
                refreshRemoteControllerLayout();
            } else {
                rc.connect(selectedMachine);
            }          
        }
    }

    function disconnectSelectedRemoteController() {
        let rc = getSelectedRemoteController();
        if (rc != null) {
            rc.disconnect();
        }
    }

    function focusSelectedRemoteController() {
        let rc = getSelectedRemoteController();
        if (rc != null) {
            rc.focus();
        }
    }

    function initialize() {
        if (initialized) {
            return;
        }

        isRtl = window.getComputedStyle(document.getElementById('labConsole'), null).getPropertyValue('direction') == 'rtl';

        $("#fullScreenMessageIcon").hide();
        initialized = true;

        $("#customSupport a").each(function () {
            $(this).attr("target", "_blank");
        });        

        setupUiEventHandlers();
        setupWindowEventHandlers();
        if (model.showConnectionQuality && !model.isMonitor) {
            setupLatencyMeasurement(3000);
        }
        $labConsole = $("#labConsole");
        $vmWrapper = $("#vmWrapper");
        $rdpWrapper = $("#rdpWrapper");
        $sshWrapper = $("#sshWrapper");
        $httpEndpointWrapper = $("#httpEndpointWrapper");
        $rdpEndpointWrapper = $("#rdpEndpointWrapper");
        $telnetEndpointWrapper = $("#telnetEndpointWrapper");
        $vncEndpointWrapper = $("#vncEndpointWrapper");
        $contentResourceWrapper = $("#contentResourceWrapper");
        $navigationBar = $("#navigationBar");
        $modalDialog = $("<div id='modalDialog' style='display:none;'><div id='modalContent'></div></div>").appendTo($("body"));
        if (model.layoutVersion === 1) {
            $modalDialog.mCustomScrollbar({
                scrollInertia: 0
            });
        }
        showFullScreenMessage("Loading your lab content", "", true, false);

        getLabData();
        setCursorOffset();
    }

    function getLabData() {
        let url = "/VirtualizationClient/GetData/" + model.labInstanceId;
        if (model.isMonitor) {
            url += "?monitor=1";
        }
        if (model.showWhenStarting) {
            url += (/\?/.test(url) ? "&" : "?") + "showWhenStarting=1";
        }

        ajaxPost(url,
            function (response) {
                if (!response.Success) {
                    labIsComplete();
                    sendLabDoneMessageToOpener();
                    showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                    return;
                }
                labData = response.Data;
                bindLabData();
                if (labData.AdIntroUrl !== null) {
                    showContentDialog(labData.AdIntroUrl, labData.AdIntroMinimumDisplaySeconds, function () {
                        if (labData.ShowIntroUrl) {
                            showContentDialog(labData.IntroUrl, labData.IntroMinimumDisplaySeconds);
                        }
                    });
                } else if (labData.ShowIntroUrl) {
                    showContentDialog(labData.IntroUrl, labData.IntroMinimumDisplaySeconds);
                }
                if (labData.State === 40 || labData.State === 25 || (model.showWhenStarting && labData.State === 30)) {
                    prepareToShowLab();
                } else {
                    hideFullScreenMessage();
                    showNotReadyMessage(labData.State, labData.DeploymentMessage);
                    if ((labData.State === 20 || labData.State === 30 || labData.State === 1000) && labData.EstimatedStartSeconds && labData.CurrentStartSeconds && !labConsole.reloadAfterRemoteStateChange) {
                        showLabStartProgress(labData.EstimatedStartSeconds, labData.CurrentStartSeconds);
                    }
                }
                if (window.labDataLoaded) {
                    window.labDataLoaded();
                }
            },
            function () {
                labIsComplete();
                sendLabDoneMessageToOpener();
                showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
            }
        );
    }
    var onContentDialogClosed = null;

    function showContentDialog(url, minimumDisplaySeconds, onclose) {
        url = processContentUrl(url);
        $("#contentDialogScreenshot").hide();
        labConsole.contentDialogShown = true;
        if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
            $vmWrapper.find("#resource" + selectedContentResource.Id + "Frame").hide();
        }
        var isMp4 = url.toLowerCase().indexOf(".mp4") !== -1;
        if (isMp4) {
            $("#contentDialogIFrame").hide();
            var $video = $("#contentDialogVideo");
            $video.show();
            if (model.enableContentEditing) {
                url += (url.indexOf("?") >= 0 ? "&" : "?") + "t=" + new Date().valueOf();
            }
            if ($video.attr("src") !== url) {
                $video.attr("src", url);
            }
            try {
                $video[0].play();
            } catch (e) {
                //
            }
        } else {
            $("#contentDialogVideo").hide();
            $("#contentDialogIFrame").show().attr("src", url);
        }
        $("#contentDialog").show();
        onContentDialogClosed = onclose;
        showContentDialogWaitMessage(minimumDisplaySeconds);
    }

    function showContentDialogWaitMessage(seconds) {
        if (seconds != null && seconds > 0) {
            $("#closeContentDialogButton").hide();
            $("#closeContentDialogMessage").show().html("You can close this intro in {0} seconds...".format(seconds));
            window.setTimeout(function () {
                showContentDialogWaitMessage(seconds - 1);
            }, 1000);
        } else {
            $("#closeContentDialogMessage").hide();
            $("#closeContentDialogButton").show();
        }
    }

    function closeContentDialog() {
        labConsole.contentDialogShown = false;
        var $video = $("#contentDialogVideo");
        if ($video.attr("src")) {
            try {
                $video[0].pause();
            } catch (e) {
                //
            }
        }
        $("#contentDialog").hide();
        $("#contentDialogIFrame")[0].src = "";
        if (selectedMachine && !labConsole.dialogShown && !labConsole.fullScreenMessageShown && !labConsole.contentDialogShown) {
            showSelectedRemoteController();           
        }
        if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
            $contentResourceWrapper.find("#resource" + selectedContentResource.Id + "Frame").show();
        }
        if (onContentDialogClosed) {
            onContentDialogClosed();
        }
    }

    function showFullScreenMessage(title, message, showLoadingImage, showCloseWindowButton, specialButtonText, specialButtonAction, ignoreParentOverride) {
        if (!model.isChildClient || ignoreParentOverride === true) {
            showLocalFullScreenMessage(title, message, showLoadingImage, showCloseWindowButton, specialButtonText, specialButtonAction);
        } else {
            var parentOptions = {
                title: title,
                message: message,
                showLoadingImage: showLoadingImage,
                showCloseWindowButton: showCloseWindowButton
            };
            if (specialButtonText && specialButtonAction) {
                parentOptions.buttons = [
                    {
                        text: specialButtonText,
                        primary: true,
                        click: specialButtonAction
                    }
                ];
            }
            window.parent.showFullScreenMessage(parentOptions);
        }     
    }

    function showLocalFullScreenMessage(title, message, showLoadingImage, showCloseWindowButton, specialButtonText, specialButtonAction) {
        
        labConsole.fullScreenMessageShown = true;
        prepareForFullScreenMessage();

        $("#fullScreenMessageTitle").html(title);
        $("#fullScreenMessageText").html(message);
        $("#fullScreenMessageButtonWrapper").html("");
        if (!model.isMonitor && !model.isTakeControl && (showCloseWindowButton || (specialButtonText && specialButtonAction))) {
            var buttonContainer = $("<div></div>");
            $('#fullScreenMessageButtonWrapper').append(buttonContainer);
            if (specialButtonText && specialButtonAction) {
                var specialButton = buttonContainer.append($("<input style='margin-right:5px;' type='button' value='" + specialButtonText + "' />"));
                specialButton.click(specialButtonAction);
            }
            if (showCloseWindowButton) {
                if (model.postLabUrl) {
                    buttonContainer.append($("<input type='button' id='closeWindow' value='OK' />"));
                    $("#closeWindow").on("click keypress", function (e) {
                        if (!a11yClick(e)) return;
                        if (model.isChildClient) {
                            window.parent.location = model.postLabUrl;
                        } else {
                            window.location = model.postLabUrl;
                        }
                    });
                } else if (window.opener) {
                    buttonContainer.append($('<input type="button" id="closeWindow" value="Close Window" />'));
                    $("#closeWindow").on("click keypress", function (e) {
                        if (!a11yClick(e)) return;
                        window.close();
                    });
                }
            }
        }

        if (showLoadingImage) {
            $('#fullScreenMessage').addClass("withLoadingImage");
        } else {
            $('#fullScreenMessage').removeClass("withLoadingImage");
        }
        $("#fullScreenMessage").show();
    }


    function prepareForFullScreenMessage() {
        if (model.hasSideBySideResources && !selectedSideBySideResourceSupportsOverlay()) {
            $("#sideBySideResourceWrapper").hide();
        }
        if (selectedMachine && !selectedMachine.ConnectViaRdp) {
            if (!model.isMonitor) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.setViewOnly(true);
                }                
            }
        } else if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
            $vmWrapper.find("#resource" + selectedContentResource.Id + "Frame").hide();
        }
    }

    function hideFullScreenMessage() {
        if (model.isChildClient) {
            window.parent.hideFullScreenMessage();
        }
        if (labConsole.fullScreenMessageShown) {
            recoverFromFullScreenMessage();
            $("#fullScreenMessage").hide();
            labConsole.fullScreenMessageShown = false;
        }
    }

    function recoverFromFullScreenMessage() {
        if (selectedMachine && !selectedMachine.ConnectViaRdp && !labConsole.dialogShown && !labConsole.contentDialogShown) {
            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                remoteController.show();
                if (!model.isMonitor) {
                    remoteController.setViewOnly(false);
                }
            }            
        } else if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
            $contentResourceWrapper.find("#resource" + selectedContentResource.Id + "Frame").show();
        }
        if (model.hasSideBySideResources && !selectedSideBySideResourceSupportsOverlay()) {
            $("#sideBySideResourceWrapper").show();
        }
    }

    var labStartTimerInterval;

    function showLabStartProgress(estimatedSeconds, currentSeconds) {
        var $fullScreenProgressWrapper = model.isChildClient && !model.showInstructionsWhileBuilding ? window.parent.getFullScreenProgressWrapper() : $("#fullScreenProgressWrapper");
        $fullScreenProgressWrapper.show();
        var totalWidth = $fullScreenProgressWrapper.find("#fullScreenProgressBar").width();
        var currentWidth = (currentSeconds / estimatedSeconds) * 100 * (totalWidth / 100);
        $fullScreenProgressWrapper.find("#fullScreenProgressFill")
            .width(currentWidth)
            .animate({ width: totalWidth + "px" }, (estimatedSeconds - currentSeconds) * 1000);
        var $fullScreenProgressText = $fullScreenProgressWrapper.find("#fullScreenProgressText");
        $fullScreenProgressText.html(getLabStartTimerText(estimatedSeconds, currentSeconds));
        labStartTimerInterval = window.setInterval(function () {
            currentSeconds += 1;
            $fullScreenProgressText.html(getLabStartTimerText(estimatedSeconds, currentSeconds));
        }, 1000);
    }

    function getLabStartTimerText(estimatedSeconds, currentSeconds) {
        var secondsRemaining = estimatedSeconds - currentSeconds;
        if (secondsRemaining <= 0) {
            if (secondsRemaining > -((estimatedSeconds * 0.2) + 10)) { //within 20% variance + the 10-second ajax poll
                return "Your lab will be ready in moments.";
            }
            var $fullScreenProgressWrapper = model.isChildClient ? window.parent.getFullScreenProgressWrapper() : $("#fullScreenProgressWrapper");
            $fullScreenProgressWrapper.find("#fullScreenProgressBar").hide();
            return "Average launch time for this lab: <strong>" + getPrettyTimeFromSeconds(estimatedSeconds) + "</strong>.<br/>Your launch time: <strong>" + getPrettyTimeFromSeconds(currentSeconds) + "</strong>.";
        }
        var ceilingMinutes = Math.ceil((secondsRemaining) / 60);
        if (ceilingMinutes >= 5) {
            return "Your lab will be ready in about {0}.".format("{0} minutes".format(ceilingMinutes));
        }

        var seconds = secondsRemaining % 60;
        var secondsCeiling = Math.ceil((seconds) / 10) * 10;

        if (secondsCeiling === 60) {
            if (ceilingMinutes === 1) {
                return "Your lab will be ready in about {0}.".format("1 minute");
            } else {
                return "Your lab will be ready in about {0}.".format("{0} minutes".format(ceilingMinutes));
            }
        }
        var wholeMinutes = Math.floor((secondsRemaining) / 60);
        if (wholeMinutes === 1) {
            if (secondsCeiling === 0) {
                return "Your lab will be ready in about {0}.".format("1 minute");
            }
            return "Your lab will be ready in about {0}.".format("1 minute and {0} seconds".format(secondsCeiling));
        } else if (wholeMinutes > 1) {
            if (secondsCeiling === 0) {
                return "Your lab will be ready in about {0}.".format("{0} minutes".format(wholeMinutes));
            }
            return "Your lab will be ready in about {0}.".format("{0} minutes and {1} seconds".format(wholeMinutes, secondsCeiling));
        }
        return "Your lab will be ready in about {0}.".format("{0} seconds".format(secondsCeiling));
    }

    function getPrettyTimeFromSeconds(totalSeconds) {
        var s = totalSeconds % 60;
        var m = Math.floor((totalSeconds) / 60);
        if (m >= 1) {
            if (m === 1) {
                if (s === 0) {
                    return "1 minute";
                }
                return "1 minute and {0} seconds".format(s);
            } else {
                return "{0} minutes and {1} seconds".format(m, s);
            }
        } else {
            if (s === 1) {
                return "1 second";
            } else {
                return "{0} seconds".format(s);
            }
        }
    }

    function processContentUrl(url) {
        if (url.indexOf("GetProcessedUrlRedirect") === -1) {
            if (url.indexOf("blob.core.windows.net") !== -1) {
                url = "/Lab/GetProcessedUrlRedirect?url=" + encodeURIComponent(url) + "&labInstanceId=" + model.labInstanceId;
            }
        }
        return url;
    }

    function stopLabStartTimer() {
        var $fullScreenProgressWrapper = model.isChildClient ? window.parent.getFullScreenProgressWrapper() : $("#fullScreenProgressWrapper");
        $fullScreenProgressWrapper.hide();
        if (labStartTimerInterval != null) {
            window.clearInterval(labStartTimerInterval);
            labStartTimerInterval = null;
        }
    }

    function labIsComplete() {
        if (labConsole.complete) return;
        labConsole.complete = true;
        stopLabStartTimer();
        for (let remoteController of _remoteControllers) {
            remoteController.hide();
            remoteController.disconnect(true);
        }        
        closeDialog();
        if (contentWindow) {
            contentWindow.close();
        }
        closeAllChildWindows();
        try {
            if (window.parent && window.parent.labIsComplete) {
                window.parent.labIsComplete();
            }
        } catch (e) {
            //
        }
    }

    function closeAllChildWindows() {
        for (var i = 0; i < childWindows.length; i++) {
            try {
                childWindows[i].close();
            } catch (e) {
                //
            }
        }
        childWindows = [];
    }

    function sendLabDoneMessageToOpener() {
        if (window.opener) {
            try {
                window.opener.postMessage("labDone", "*");
            } catch (e) {
                //
            }
        }
        try {
            if (window.parent && window.parent.labIsComplete) {
                window.parent.labIsComplete();
            }
        } catch (e) {
            //
        }
    }

    function gotoPostLabActivity(title, message) {
        if (model.evaluationId && model.evaluationServiceUrl) {
            showFullScreenMessage("Preparing Evaluation", "", true);
            window.setTimeout(function () {
                var evaluationUrl = model.evaluationServiceUrl + "/Evaluation/Submit/" + model.key;

                evaluationUrl += (evaluationUrl.indexOf("?") >= 0 ? "&" : "?") + "evaluationId=" + encodeURIComponent(model.evaluationId);

                if (model.isChildClient) {
                    window.parent.location = evaluationUrl;
                } else {
                    window.location = evaluationUrl;
                }
            }, 500);
        } else if (model.postLabUrl) {
            if (model.isChildClient) {
                window.parent.location = model.postLabUrl;
            } else {
                window.location = model.postLabUrl;
            }
        } else {
            showFullScreenMessage(title, message, false, true);
        }
    }


    function ajaxPost(url, success, error) {
        $.ajax({
            url: url,
            type: "POST",
            dataType: 'json',
            data: {},
            cache: false,
            success: success,
            error: error
        });
    };

    function bindLabData() {
        if (labData.MinutesRemaining > 0) {
            updateTimer(labData.MinutesRemaining, labData.IsShareExpiration);
        }
        let labName = $('#labName');
        labName.html(labData.DisplayName);

        selectedMachineState = labData.SelectedMachineState;
        let $resourcesContainer = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        let machines = labData.Machines;
        let numMachines = machines.length;

        if (model.useTabbedInterface && !machines.some(m => m.IsStudentVisible)) { 
            $("#machineCommands").hide();
        }
        for (let machine of machines) {
            if (model.useTabbedInterface) {
                if (machine.IsStudentVisible) {
                    createMachineTab(machine);
                }
            }
            if (machine.IsStudentVisible || labData.ShowHiddenMachines) {
                createMachineResourceUi(machine, $resourcesContainer);
                createMachineSelectItem(machine);
            }
        }
        if (model.useTabbedInterface) {
            for (let machine of machines) {
                for (let endpoint of machine.Endpoints) {
                    createEndpointTab(endpoint);
                    createEndpointResourceUi(endpoint, $resourcesContainer);
                }
            }
        }

        if ((numMachines <= 1 || model.useTabbedInterface)) {
            if (model.layoutVerion === 1) {
                $("#machineName").css("visibility", "hidden");
            } else {
                $("#machineName").hide();
            }
        }

        if (model.isChildClient && model.layoutVersion > 1) {
            let $installIntegrationService = $('#installIntegrationService');
            window.parent.getDeveloperToolsMenu().append($installIntegrationService);
        }
    }

    function createMachineTab(machine) {
        let $machineTab = $(`<li class="tab machine-tab tab-item" data-id='${machine.ProfileId}'><div class='tab-button' tabindex='0'>${machine.DisplayName}</div></li>`);
        $("#tabList").append($machineTab);
        $machineTab.on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            selectMachine(machine, !model.contentOnly);
        });
    }

    function createEndpointTab(endpoint) {
        let name = endpoint.Name;
        if (!endpoint.IsStudentVisible) {
            name += " (Hidden)";
        }
        let $endpointTab = $(`<li class="tab endpoint tab-item" data-id='${endpoint.Id}'><div class='tab-button' tabindex='0'>${name}</div></li>`);
        $("#tabList").append($endpointTab);

        if (endpoint.Description) {
            $endpointTab.attr("title", endpoint.Description);
        }
        $endpointTab.on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            selectEndpoint(endpoint);
        });
    }

    function createEndpointResourceUi(endpoint, $container) {
        let $endpoint = $("#templates .endpoint").clone();
        $endpoint.attr("data-id", endpoint.Id);
        let name = endpoint.Name;
        if (!endpoint.IsStudentVisible) {
            name += " <span class='hiddenLabel'>(Hidden)</span>";
        }
        $endpoint.find(".name").html(name);
        $endpoint.find(".description").text(endpoint.Description);
        if (endpoint.Username || endpoint.Password) {            
            $endpoint.find(".credentials").show();
            $endpoint.find(".username").text(endpoint.Username);
            $endpoint.find(".password").text(endpoint.Password);       
            if (endpoint.ConnectionProtocol != ConnectionProtocol.HTTP && endpoint.ConnectionProtocol != ConnectionProtocol.HTTPS) {
                $endpoint.find(".username").addClass("typeText").removeClass("copyable");
                $endpoint.find(".password").addClass("typeText").removeClass("copyable");
            }
        }

        $container.append($endpoint);
        $endpoint.on("click keypress", function (e) {
            selectEndpoint(endpoint);
        });
        $endpoint.find(".reconnect").on("click keypress", function (e) {
            reconnectEndpoint(endpoint);
        });
    }

    function createMachineResourceUi(machine, $container) {
        let $machineHtml = $("#templates div.machine").clone(true);
        $machineHtml.data("machine", machine);
        $machineHtml.attr("id", "machine" + machine.ProfileId);
        let name = machine.DisplayName;
        if (!machine.IsStudentVisible) {
            name += " <span class='hiddenLabel'>(Hidden)</span>";
        }
        $machineHtml.find("div.machineName").html(name);
        $machineHtml.find('.username').html(machine.Username).attr("aria-description", name + " Type Text Username");
        $machineHtml.find(".password").html(machine.Password).attr("aria-description", name + " Type Text Password");

        $machineHtml.find(".ram").html(machine.DisplayRam);
        $machineHtml.find(".numVcpus").html(machine.NumProcessors * machine.NumCoresPerProcessor);

        $container.append($machineHtml);
        $machineHtml.find(".machineInfo").hide();

        if (!machine.HasDvdDrive) {
            $machineHtml.find("div.dvdDrive").hide();
        } else {
            if (labData.InstructorFiles.length > 0) {
                $container.find(".dvdDriveInner").show();
                var instructorFiles = labData.InstructorFiles;
                var instructorFilesLength = instructorFiles.length;
                var dvdSelectOptions = $machineHtml.find("div.dvdDrive select")[0].options;
                for (var j = 0; j < instructorFilesLength; j++) {
                    var instructorFile = instructorFiles[j];
                    var option = new Option(instructorFile.Name, "instructor-" + instructorFile.Id);
                    dvdSelectOptions[dvdSelectOptions.length] = option;
                }
            }
            if (machine.DvdMediaId) {
                $machineHtml.find("div.dvdDrive select").val(machine.DvdMediaId);
            } else if (machine.InstructorFileId) {
                $machineHtml.find("div.dvdDrive select").val("instructor-" + machine.InstructorFileId);
            } else if (machine.DevFile) {
                $machineHtml.find("div.dvdDrive select").val("dev-" + machine.DevFile);
            }
        }
        if (!machine.HasFloppyDrive) {
            $machineHtml.find("div.floppyDrive").hide();
        } else if (machine.FloppyMediaId) {
            $machineHtml.find("div.floppyDrive select").val(machine.FloppyMediaId);
        }
        let networkAdapters = machine.NetworkAdapters;
        let numNetworkAdapters = networkAdapters.length;
        for (let k = 0; k < numNetworkAdapters; k++) {
            var networkAdapter = networkAdapters[k];
            var $networkAdapterHtml = $("#templates div.networkAdapter").clone(true);
            $networkAdapterHtml.find("div.name").html(networkAdapter.Name);
            $networkAdapterHtml.attr("data-id", networkAdapter.Id);

            if (networkAdapter.NetworkId) {
                $networkAdapterHtml.find("select").val(networkAdapter.NetworkId);
            }
            $machineHtml.find("div.networkAdapters").append($networkAdapterHtml);
        }

        if (machine.AllowSshConnections) {
            $machineHtml.find(".ctrlAltDel").hide();
        }
        $machineHtml.on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            selectMachine($(this).data("machine"), !model.contentOnly);
        });

        let rcOnConnected = function (data) {
            if (!selectedMachine) { return; }
            if (!model.isMonitor && !model.isTakeControl && selectedMachine.EnableDynamicScreenResizing && selectedMachineState === 20) {
                if (remoteController.resizeAfterConnectDelay) {
                    window.setTimeout(function () {
                        refreshRemoteControllerLayout();
                    }, remoteController.resizeAfterConnectDelay);
                } else {
                    refreshRemoteControllerLayout();
                }
            } else {
                refreshVmWrapperLayout();
            }

            if (data?.machineId == selectedMachine.ProfileId && typeof api !== 'undefined') {   
                api.machineConnected(selectedMachine.ProfileId);             
            }
            if (!model.isMonitor && !model.isTakeControl && model.enableRdpSessionShadowing && data?.rdpSessionId) {
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: { machineId: selectedMachine.ProfileId, rdpSessionId: data.rdpSessionId, rdpGatewayAppId: data.rdpGatewayAppId },
                    cache: false,
                    url: "/VirtualizationClient/SaveMachineRdpSessionId/" + model.labInstanceId
                });
            }
        };

        let rcOnDisconnected = function (data) {
            if (data?.machineId == selectedMachine.ProfileId && typeof api !== 'undefined') {
                api.machineDisconnected(selectedMachine.ProfileId);               
            }
        };

        let rcOnSizeChanged = function (w, h) {
            refreshVmWrapperLayout();
        };

        let connectionInfo = {
            machineId: machine.ProfileId,
            language: model.language,
            labHostServiceUrl: labData.LabHostServiceUrl,
            remoteControlServiceUrl: labData.RemoteControlServiceUrl,
            rdpHtml5GatewayAddress: labData.RdpHtml5GatewayAddress,
            externalConsoleAddress: labData.ExternalConsoleAddress,
            externalConsolePort: labData.ExternalConsolePort,
            internalConsoleAddress: labData.InternalConsoleAddress,
            internalConsolePort: labData.InternalConsolePort,
            serverAccountName: labData.ServerAccountName,
            serverAccountPassword: labData.ServerAccountPassword,
            gatewayAddress: labData.GatewayAddress,
            gatewayUsername: labData.GatewayUsername,
            gatewayPassword: labData.GatewayPassword
        };
        let remoteController = new window.RemoteController(connectionInfo, rcOnConnected, rcOnDisconnected, rcOnSizeChanged);
        _remoteControllers.push(remoteController);


        if (model.isMonitor) {
            remoteController.setViewOnly(true);
        }

        if (remoteController.supportsShadowing) {
            let enableShadowing = model.isMonitor || model.isTakeControl;
            remoteController.setShadowing(enableShadowing, model.sessionShadowUserName);
        }
        if (remoteController.supportsAutoFocus && model.autoFocus === false) {
            remoteController.setAutoFocus(false);
        }

        if (remoteController.canCaptureInput && !machine.HostIntegrationEnabled) {
            $machineHtml.find("div.inputRelease").show();
        }

        remoteController.initialize();

        observeSparkWrapper();
    }

    function createMachineSelectItem(machine) {
        let $machineSelectMenuHtml = $("<div class='menuItem menu-item' role='menuitem' tabindex='0'>" + machine.DisplayName + "</div>");
        $machineSelectMenuHtml.attr("id", "machineSelect" + machine.ProfileId);
        $machineSelectMenuHtml.data("machine", machine);
        $("#machineSelectMenu .menuWrapper").append($machineSelectMenuHtml);
    }

    function createContentResourceUi(resource, $container) {
        var $contentResource = $("#templates div.contentResource").clone();
        $contentResource.data("resource", resource);
        $contentResource.attr("id", "contentResource" + resource.Id);
        $contentResource.find(".machineName").html(resource.Name);
        if ($contentResource.find("img.thumbnail").length === 0)
            $contentResource.prepend("<img alt='" + resource.Name + " Thumbnail' class='thumbnail'>");
        if (resource.Type === 40) {
            $contentResource.find(".thumbnail").attr("src", processContentUrl(resource.Url));
        } else if (resource.Type === 45) {
            $contentResource.find(".thumbnail").attr("src", "/images/virtualization-client/VideoResource.png");
        } else {
            $contentResource.find(".thumbnail").attr("src", "/images/virtualization-client/ContentResource.png");
        }
        $container.append($contentResource);
        return $contentResource;
    }

    function getResourceById(id) {
        var resources = labData.Resources;
        var numResources = resources.length;
        for (var i = 0; i < numResources; i++) {
            var resource = resources[i];
            if (resource.Id === id) {
                return resource;
            }
        }
    }

    function selectContentResourceById(id, notifyServer) {
        var resource = getResourceById(id);
        if (resource != null) {
            selectContentResource(resource, notifyServer);
        }
    }

    function selectContentResource(resource, notifyServer) {
        if (resource.DisplayType === 25) {
            showContentDialog(resource.Url);
        } else if (resource.DisplayType === 30) {
            window.open(resource.Url, resource.Name, "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
        } else {
            if (resource === selectedContentResource) {
                return;
            }
            if (selectedMachine) {
                $("#machine" + selectedMachine.ProfileId).find(".machineInfo").slideUp(300, function () {
                    if (model.layoutVersion === 1) {
                        $("#navigationBarScrollable").mCustomScrollbar("update");
                    }
                });
            }
            var $resource = $("#contentResource" + resource.Id);
            $resource.addClass("selected");
            $resource.siblings().removeClass("selected");
            var $selectItem = $("#resourceSelect" + resource.Id);
            $selectItem.addClass("selected");
            $selectItem.siblings().removeClass("selected");
            selectedContentResource = resource;
            selectedMachine = null;
            selectedMachineState = null;
            setupVmVisibility();
            $("#machineName").html(resource.Name);

            $rdpWrapper.hide();
            $sshWrapper.hide();
            $vmWrapper.hide();
            $httpEndpointWrapper.hide();
            $rdpEndpointWrapper.hide();
            $telnetEndpointWrapper.hide();
            $vncEndpointWrapper.hide();
            $contentResourceWrapper.show();

            $contentResourceWrapper.find(".content").hide();
            if (resource.Type === 40) {
                let $image = $contentResourceWrapper.find("#resource" + resource.Id + "Image");
                if ($image.length > 0) {
                    $image.show();
                } else {
                    $("<img class='content' id='resource" + resource.Id + "Image' src='" + processContentUrl(resource.Url) + "' style='position:absolute; max-width:100%; max-height:100%' />").prependTo($vmWrapper);
                }
            } else if (resource.Type === 45) {
                let $video = $contentResourceWrapper.find("#resource" + resource.Id + "Video");
                if ($video.length > 0) {
                    $video.show();
                } else {
                    $("<video class='content' id='resource" + resource.Id + "Video' controls src='" + processContentUrl(resource.Url) + "' style='position:absolute; max-width:100%; max-height:100%' />").prependTo($vmWrapper);
                }
            } else {
                let $frame = $contentResourceWrapper.find("#resource" + resource.Id + "Frame");
                if ($frame.length > 0) {
                    $frame.show();
                } else {
                    $("<iframe class='content' id='resource" + resource.Id + "Frame' src='" + processContentUrl(resource.Url) + "' frameborder='0' style='position:absolute; width:100%; height:100%'></iframe>").prependTo($vmWrapper);
                }
            }
            if (notifyServer) {
                ajaxPost("/VirtualizationClient/MarkSelectedContentResource/" + model.labInstanceId + "/?resourceId=" + resource.Id);
            }
        }
    }

    function checkReadyForDisplay() {
        var url = "/Setup/CheckReadyForDisplay/" + model.labInstanceId;
        if (model.isMonitor) {
            url += "?monitor=1";
        }
        if (model.showWhenStarting) {
            url += (/\?/.test(url) ? "&" : "?") + "showWhenStarting=1";
        }
        ajaxPost(url,
            function (response) {
                if (!response.Success) {
                    if (response.Error) {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        showFullScreenMessage(Text.LaunchErrorTitle, response.Error, false, true);
                    } else {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                    }
                    stopLabStartTimer();
                } else {
                    labData.State = response.State;
                    if (response.Ready) {
                        if (labConsole.reloadAfterRemoteStateChange) {
                            model.enableNavigationWarning = false;
                            window.location.reload();
                        } else {
                            selectedMachineState = response.SelectedMachineState;
                            prepareToShowLab();
                        }
                    } else {
                        showNotReadyMessage(response.State, response.Message);
                    }
                }
            },
            function () {
                labIsComplete();
                sendLabDoneMessageToOpener();
                showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
            }
        );
    }

    function showNotReadyMessage(state, message) {
        notReadyMessageWasShown = true;
        switch (state) {
            case 0: //off
            case 110: //tearing down
                //most likely an error has occurred, which is handled by checkReadyForDisplay();
                checkReadyForDisplay();
                break;
            case 10: //PreparingFiles
                model.allowShowWhenStarting ?
                    showFullScreenMessage("Provisioning files on high-performance storage", "This occurs the first time a lab is launched or after changes have been persisted to the lab profile. Sorry, this can take a while.", true, null, null, null, model.showInstructionsWhileBuilding) :
                    showFullScreenMessage(Text.LabBuildTitle, Text.ThisCanTakeSeveralMinutes, true, null, null, null, model.showInstructionsWhileBuilding);
                window.setTimeout(function () { checkReadyForDisplay(); }, model.hasStartState ? 2000 : 10000);
                break;
            case -1: //Scheduled
            case 20: //Building
                var message1 = labData.EstimatedStartSeconds > 0 ? "" : Text.ThisCanTakeSeveralMinutes;
                showFullScreenMessage(Text.LabBuildTitle, message1, true, null, null, null, model.showInstructionsWhileBuilding);
                window.setTimeout(function () { checkReadyForDisplay(); }, model.hasStartState ? 1000 : 10000);
                break;
            case 130: //creating from clone
                labConsole.reloadAfterRemoteStateChange = true;
                showFullScreenMessage(Text.LabBuildTitle, Text.ThisCanTakeSeveralMinutes, true, null, null, null, model.showInstructionsWhileBuilding);
                window.setTimeout(function () { checkReadyForDisplay(); }, 10000);
                break;
            case 30: //Starting
                var message2 = !labConsole.reloadAfterRemoteStateChange && labData.EstimatedStartSeconds > 0 ? "" : Text.ThisCanTakeSeveralMinutes;
                var showWhileStartingButtonText = null;
                var showWhileStartingButtonAction = null;
                if (model.allowShowWhenStarting && !model.isMonitor && !model.isTakeControl) {
                    showWhileStartingButtonText = "Show while starting";
                    showWhileStartingButtonAction = function () {
                        if (model.isChildClient) {
                            window.parent.disableNavigationWarning();
                            var parentUrl = window.parent.location;
                            window.parent.location = parentUrl + (/\?/.test(parentUrl) ? "&" : "?") + "showWhenStarting=1";
                        } else {
                            var url = window.location;
                            window.location = url + (/\?/.test(url) ? "&" : "?") + "showWhenStarting=1";
                        }
                    };
                }
                showFullScreenMessage(Text.VmsStartingTitle, message2, true, false, showWhileStartingButtonText, showWhileStartingButtonAction, model.showInstructionsWhileBuilding);
                window.setTimeout(function () { checkReadyForDisplay(); }, model.hasStartState ? 2000 : 10000);
                break;
            case 50: //Saving
                showFullScreenMessage(
                    model.isExam ? Text.SavingExamTitle : Text.SavingLabTitle,
                    model.isExam ? Text.SavingExamMessage : Text.SavingLabMessage,
                    true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 60: //Saved
            case 150: //moving while saved
                showFullScreenMessage(Text.LabSavedTitle, Text.LabSavedMessage);
                break;
            case 70: //Resuming
                if (model.freshFromPreinstance) {
                    showFullScreenMessage(Text.VmsStartingTitle, "", true);
                } else {
                    showFullScreenMessage("Resuming", Text.ThisCanTakeSeveralMinutes, true);
                }
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 80: //Creating snapshot
                showFullScreenMessage(Text.CreatingSnapshotTitle, Text.CreatingSnapshotMessage, true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 10000);
                break;
            case 90: //Applying snapshot
                showFullScreenMessage(Text.ApplyingSnapshotTitle, Text.ApplyingSnapshotMessage, true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 10000);
                break;
            case 100: //Saving diff disks
                showFullScreenMessage("Committing your changes", "", true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 10000);
                break;
            case 120: //Cloning
                showFullScreenMessage(Text.CloningTitle, Text.CloningMessage, true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 140: //Moving while running
                showFullScreenMessage(Text.MovingTitle, Text.MovingMessage, true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 160: //storing start state
                showFullScreenMessage("Committing your changes", "", true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 170: //scoring
                showFullScreenMessage("Grading", "", true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
            case 1000: //display delayed                
                showFullScreenMessage(message ? message : "Preparing", "", true);
                window.setTimeout(function () { checkReadyForDisplay(); }, 5000);
                break;
        }
    }

    function prepareToShowLab() {
        stopLabStartTimer();
        if (model.isMonitor) {
            syncIntervalMilliseconds = 4000;
            autoShowAlerts = false;
            $("#cbShowAlerts").prop("disabled", true);
        } else {
            setUserPreferences();
        }
        if (notReadyMessageWasShown && labData.ReplacementTokensMayChangeAfterDeployment && model.isChildClient) {
            window.parent.updateReplacementTokens();
        }
        runDataChecks();
    }

    function runDataChecks() {
        if (!labData.MachineIdsAvailable && window.remoteControllerRequiresMachineIds()) {
            ajaxPost("/VirtualizationClient/GetMachineIds/" + model.labInstanceId,
                function (response) {
                    if (response.Success) {
                        labData.MachineIdsAvailable = true;
                        var machineIds = response.MachineIds;
                        var numMachineIds = machineIds.length;
                        var machines = labData.Machines;
                        var numMachines = machines.length;
                        for (var i = 0; i < numMachines; i++) {
                            var machine = machines[i];
                            for (var j = 0; j < numMachineIds; j++) {
                                var machineId = machineIds[j];
                                if (machine.ProfileId === machineId.ProfileId) {
                                    machine.Id = machineId.Id;
                                }
                            }
                        }
                        runDataChecks();
                    } else {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                    }
                },
                function () {
                    labIsComplete();
                    sendLabDoneMessageToOpener();
                    showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                }
            );
        } else if (!labData.RdpInfoAvailable && window.remoteControllerRequiresRdpInfo()) {
            ajaxPost("/VirtualizationClient/GetMachineRdpInfo/" + model.labInstanceId,
                function (response) {
                    if (response.Success) {
                        labData.RdpInfoAvailable = true;
                        var rdpInfos = response.RdpInfo;
                        var numRdpInfos = rdpInfos.length;
                        var machines = labData.Machines;
                        var numMachines = machines.length;
                        for (var i = 0; i < numMachines; i++) {
                            var machine = machines[i];
                            for (var j = 0; j < numRdpInfos; j++) {
                                var rdpInfo = rdpInfos[j];
                                if (machine.ProfileId === rdpInfo.ProfileId) {
                                    machine.RdpAddress = rdpInfo.RdpAddress;
                                    machine.RdpPort = rdpInfo.RdpPort;
                                    machine.PrivateKey = rdpInfo.PrivateKey;
                                }
                            }
                        }
                        runDataChecks();
                    } else {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                    }
                },
                function () {
                    labIsComplete();
                    sendLabDoneMessageToOpener();
                    showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                }
            );
        } else if (!labData.IntegratedBrowserAvailable && model.useIntegratedBrowser) {
            ajaxPost("/VirtualizationClient/GetIntegratedBrowserMachineInfo/" + model.labInstanceId,
                function (response) {
                    if (response.Success) {
                        labData.IntegratedBrowserAvailable = true;
                        var ibMachine = response.Data[0];
                        var machine = labData.Machines.find(x => x.Id == ibMachine.Id);
                        if (machine != undefined) {
                            machine.SparkGatewayAddress = ibMachine.SparkGatewayAddress;
                            machine.InternalVncUrl = ibMachine.InternalVncUrl;
                            machine.InternalVncPort = ibMachine.InternalVncPort;
                            machine.InternalVncPassword = ibMachine.InternalVncPassword;
                        }
                        runDataChecks();
                    } else {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                    }
                },
                function () {
                    labIsComplete();
                    sendLabDoneMessageToOpener();
                    showFullScreenMessage(Text.LaunchErrorTitle, Text.LaunchErrorMessage, false, true);
                }
            );
        } else {
            showLab();
        }
    }

    function setUserPreferences() {
        if (model.useCookies && readCookie("ShowAlerts") === "false") {
            autoShowAlerts = false;
        } else {
            autoShowAlerts = true;
            $("#autoShowAlerts").prop("checked", true);
        }
        if (model.useCookies && readCookie("ScreenResizing") === "false") {
            enableAutomaticScreenResizing = false;
        } else {
            enableAutomaticScreenResizing = true;
            $("#enableAutomaticScreenResizing").prop("checked", true);
        }
    }

    function setupUiForNavigationPanelWidth() {
        var navBarWidth = $navigationBar.outerWidth();
        $vmWrapper.css("right", navBarWidth + "px");
        $("#titleBarRight").width(navBarWidth + 173);
        $("#titleBarLeft").css("margin-right", navBarWidth + 173 + "px");
    }

    function showLab() {
        hideFullScreenMessage();
        $labConsole.show();
        if (model.layoutVersion === 1) {
            $("#navigationBarScrollable, #notificationScrollable, #alertScrollable, #ideaScrollable").mCustomScrollbar({
                scrollInertia: 0,
                autoHideScrollbar: true
            });
        }
        selectTab(labData.SelectedNavigationTab);
        if (model.useStaticThumbnails) {
            let $machines = model.isChildClient
                ? window.parent.getResourcesExtensionsPlaceHolder()
                : $("#machines");
            $machines.find("img.thumbnail").hide();
            $machines.find("div.machineName").css("paddingLeft", "0");
        } else {
            let thumbnailUpdateInterval = model.platformId === 3 ? 180000 : 120000;
            window.setInterval(function () {
                if (selectedNavigationTab === 1 && !labConsole.complete) {
                    updateMachineThumbnails();
                }
            }, thumbnailUpdateInterval);
            if (selectedNavigationTab !== 1) {
                updateMachineThumbnails();
            }
        }
        if (!model.showTitleBar) {
            $vmWrapper.css("top", "0");
        }
        if (!model.showNavigationBar) {
            $vmWrapper.css("right", "0");

        } else {
            setupUiForNavigationPanelWidth();
        }
        $vmWrapper.css("bottom", "0px");
        $navigationBar.css("bottom", "0px");
        setupVmVisibility();
        if (model.forcedMachineId) {
            labData.SelectedMachineId = model.forcedMachineId;
        }
        if (labData.SelectedMachineId) {
            let machineFound = selectMachineById(labData.SelectedMachineId, false);
            if (!machineFound && labData.Machines.length > 0) {
                selectMachine(labData.Machines[0], true);
            }
        } else if (labData.SelectedContentResourceId) {
            selectContentResourceById(labData.SelectedContentResourceId, false);
        } else if (labData.SelectedVirtualMachineEndpointId) {
            let endpoint = getVirtualMachineEndpointById(labData.SelectedVirtualMachineEndpointId);
            if (endpoint) {
                selectEndpoint(endpoint);
            }
        } else {
            let firstEndpoint = getFirstVirtualMachineEndpoint();
            if (firstEndpoint) {
                selectEndpoint(firstEndpoint);
            }
        }
        if (!model.contentOnly) {
            syncInterval = window.setInterval(function () {
                synchronizeWithServer();
            }, syncIntervalMilliseconds);
        }
        if (!model.contentOnly && !model.isMonitor) {
            window.setInterval(function () { checkRemoteControllerConnection(); }, 5000);
            $(document).on("click", function (e) {
                lastUnsyncedActivity = new Date().valueOf();
                if (!$(document.activeElement).is("input:focus, textarea:focus, select:focus") && !getSelectionText()) {
                    focusSelectedRemoteController();
                }
            }).keydown(function (event) {
                lastUnsyncedActivity = new Date().valueOf();
                if (event.which === 8 && !$(document.activeElement).is("input:focus, textarea:focus, select:focus, div[contenteditable='true']")) {
                    event.preventDefault();
                }
            }).mousemove(function () {
                lastUnsyncedActivity = new Date().valueOf();
            });
        }
        initialDialogIsVisible = (labData.CompletionStatus === 2 || model.contentOnly) && !model.isMonitor;
        if (initialDialogIsVisible) {
            showInitialDialog();
        }

        if (model.hasSideBySideResources) {
            if (selectedSideBySideResourceSupportsOverlay()) {
                $("#sideBySideResourceZoomWrapper").show();
            } else {
                $("#sideBySideResourceZoomWrapper").hide();
            }
            fitSideBySideResource();
        }

        if (model.layoutVersion === 1) {
            window.setTimeout(function () {
                $("#navigationBarScrollable").mCustomScrollbar("update");
            }, 500);
        }
    }

    function getVirtualMachineEndpointById(id) {
        for (let machine of labData.Machines) {
            for (let endpoint of machine.Endpoints) {
                if (endpoint.Id == id) {
                    return endpoint;
                }
            }
        }
        return null;
    }

    function getFirstVirtualMachineEndpoint() {
        for (let machine of labData.Machines) {
            for (let endpoint of machine.Endpoints) {
                return endpoint;
            }
        }
        return null;
    }

    function getSelectionText() {
        if (window.getSelection) {
            return window.getSelection().toString();
        } else if (document.selection && document.selection.type != "Control") {
            return document.selection.createRange().text;
        }
        return false;
    }

    function showInitialDialog() {
        var dialogs = [];
        var dialogWidth = 700;
        var dialogHeight = 550;
        var dialogIndex = -1;
        var moveNext = function () {
            dialogIndex++;
            if (dialogs.length > dialogIndex) {
                if (dialogIndex >= 1) {
                    dialogWidth = $("#modalDialog").dialog("option", "width");
                    dialogHeight = $("#modalDialog").dialog("option", "height");
                }
                dialogs[dialogIndex]();
            } else {
                closeDialog();
                initialDialogIsVisible = false;
            }
        };
        var movePrevious = function () {
            dialogWidth = $("#modalDialog").dialog("option", "width");
            dialogHeight = $("#modalDialog").dialog("option", "height");
            dialogIndex--;
            if (dialogIndex >= 0) {
                dialogs[dialogIndex]();
            }
        };
        var getButtons = function () {
            var buttons = [];
            if (dialogIndex > 0) {
                buttons.push({
                    text: "< Previous",
                    width: 100,
                    click: movePrevious
                });
            }
            if (dialogIndex >= dialogs.length - 1) {
                buttons.push({
                    text: "OK",
                    width: 100,
                    click: moveNext
                });
            } else {
                buttons.push({
                    text: "Next >",
                    width: 100,
                    click: moveNext
                });
            }
            return buttons;
        };
        moveNext();
    }

    function selectEndpointById(id) {
        selectEndpoint(getVirtualMachineEndpointById(id));
    }
    function selectMachineById(id, notifyServer) {
        let machines = labData.Machines;
        let numMachines = machines.length;
        for (let i = 0; i < numMachines; i++) {
            let machine = machines[i];
            if (machine.ProfileId === id) {
                selectMachine(machine, notifyServer);
                return true;
            }
        }
        return false;
    }

    var remoteControllerDisconnectedCount = 0;

    function selectMachine(machine, notifyServer) {
        if (machine === selectedMachine) {
            return;
        }
        $contentResourceWrapper.hide();      
        let $machines = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        if (selectedMachine) {
            $machines.find("#machine" + selectedMachine.ProfileId).find(".machineInfo").slideUp(300);
        }
        if (selectedEndpoint) {
            $machines.find(".endpoint.selected .expanded-info").slideUp("fast");
        }

        $machines.find(".machine").removeClass("selected");
        $machines.find(".endpoint").removeClass("selected");
        let $machine = $machines.find("#machine" + machine.ProfileId);
        $machine.addClass("selected");
        if (model.useTabbedInterface) {
            tabList.setActiveTabById(machine.ProfileId);
        }
        $machine.find(".machineInfo").slideDown(300, function () {
            if (model.layoutVersion === 1) {
                $("#navigationBarScrollable").mCustomScrollbar("update");
            }
        });
        $("#machineSelectMenu .menuItem").removeClass("selected");
        let $machineSelectHtml = $("#machineSelect" + machine.ProfileId);
        $machineSelectHtml.addClass("selected");
        selectedMachine = machine;
        selectedContentResource = null;
        selectedEndpoint = null;
        labData.SelectedVirtualMachineEndpointId = null;
        remoteControllerDisconnectedCount = 0;
        $("#machineName").html(machine.DisplayName);
        if (selectedMachineHistory.indexOf(machine.ProfileId) == -1) {
            selectedMachineHistory.push(machine.ProfileId);
        }
        if (notifyServer) {
            ajaxPost(
                "/VirtualizationClient/MarkSelectedMachine/" + model.labInstanceId + "/?machineId=" + machine.ProfileId,
                function (response) {
                    selectedMachineState = response.State;
                    connectToSelectedMachine();
                }
            );
        } else if (selectedMachineState === 0) {
            setupVmVisibility();
        } else {
            connectToSelectedMachine();
        }
    }

    function connectToSelectedMachine() {
        setupVmVisibility();
        if (selectedMachine.window && !selectedMachine.window.closed) {
            selectedMachine.window.focus();
            return;
        }
        if (selectedMachine.ConnectViaRdp) {
            $sshWrapper.hide();
            $httpEndpointWrapper.hide();
            $rdpEndpointWrapper.hide();
            $telnetEndpointWrapper.hide();
            $vncEndpointWrapper.hide();
            $contentResourceWrapper.hide();
            $("#rdpUsername").html(selectedMachine.Username);
            $("#rdpPassword").html(selectedMachine.Password);
            $vmWrapper.hide();
            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                remoteController.disconnect();
            }            
            if (selectedMachineState !== 0) {
                $rdpWrapper.show();
            }
            return;
        }

        if (selectedMachine.UseSshTerminal && (model.platformId != 10 && model.platformId != 11)) {
            $rdpWrapper.hide();
            $sshWrapper.show();
            $httpEndpointWrapper.hide();
            $rdpEndpointWrapper.hide();
            $telnetEndpointWrapper.hide();
            $vncEndpointWrapper.hide();
            $contentResourceWrapper.hide();
            selectedMachine.sshActive = true;
            let sshClientElementId = "sshClient" + selectedMachine.ProfileId;
            for (let sshClientInstance of _sshClientInstances) {
                if (sshClientInstance.terminalElementId !== sshClientElementId) {
                    sshClientInstance.hide();
                }
            }

            let existingSshClient = getSshClientInstance(sshClientElementId);
            if (existingSshClient !== null) {
                existingSshClient.show();
                existingSshClient.connect();
            } else {
                let sshStatusElementId = "sshStatus" + selectedMachine.ProfileId;
                $sshWrapper.append("<div class='sshContainer'><div class='sshClientStatus' id='" + sshStatusElementId + "'></div><div class='sshClient' id='" + sshClientElementId + "'></div></div>");
                let sshConnectionInfo = {
                    labInstanceKey: model.key,
                    machineId: selectedMachine.ProfileId,
                    terminalElementId: sshClientElementId,
                    statusElementId: sshStatusElementId
                };
                let sshClient = new SshClient(sshConnectionInfo);
                sshClient.connect();
            }
            return;
        }

        $vmWrapper.show();
        $sshWrapper.hide();
        $httpEndpointWrapper.hide();
        $rdpEndpointWrapper.hide();
        $telnetEndpointWrapper.hide();
        $vncEndpointWrapper.hide();
        $rdpWrapper.hide();
        $contentResourceWrapper.hide();

        for (let remoteController of _remoteControllers) {
            if (remoteController.machineId == selectedMachine.ProfileId) {
                if (selectedMachineState !== 0) {
                    if (model.isMonitor && model.enableRdpSessionShadowing && !selectedMachine.RdpSessionId) {
                        getMachineRdpSessionId(selectedMachine, function () {
                            connectSelectedRemoteController();
                        });
                    } else {
                        connectSelectedRemoteController();
                    }
                } else {
                    remoteController.disconnect();
                }                
            } else {
                if (!remoteController.supportsEsmOrRdp || !remoteController.connectedToEnhancedSessionOrRdp()) {
                    remoteController.disconnect();
                }
                remoteController.hide();
            }            
        }
    }

    function getMachineRdpSessionId(machine, callback) {
        $.ajax({
            type: "POST",
            dataType: "json",
            data: { machineId: machine.ProfileId },
            cache: false,
            url: "/VirtualizationClient/GetMachineRdpSessionId/" + model.labInstanceId
        }).always(function (response) {
            if (!response || !response.Success) {
                return;
            }
            machine.RdpSessionId = response.RdpSessionId;
            machine.RdpGatewayAppId = response.RdpGatewayAppId;
            if (callback) callback();
        });
    }

    function reconnectEndpoint(endpoint) {
        if (endpoint.ConnectionProtocol == ConnectionProtocol.HTTP || endpoint.ConnectionProtocol == ConnectionProtocol.HTTPS) {
            $(`#httpEndpointFrame${endpoint.Id}`).remove();
            connectToHttpEndpoint(endpoint);
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.SSH || endpoint.ConnectionProtocol == ConnectionProtocol.Powershell) {
            let sshClient = getSshClientInstance(`sshEndpointClient${endpoint.Id}`);
            if (sshClient !== null) {
                sshClient.reconnect();
            }
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.RDP) {
            let existingRdpClient = getRdpClientInstance(`rdp-client-endpoint-${endpoint.Id}`);
            if (existingRdpClient !== null) {
                existingRdpClient.reconnect();
            } else {
                if (!endpoint.obtainingConnectionInformation) {
                    connectToRdpEndpoint(endpoint);
                }
            }
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.Telnet) {
            let existingTelnetClient = getTelnetClientInstance(`telnet-client-endpoint-${endpoint.Id}`);
            if (existingTelnetClient !== null) {
                existingTelnetClient.reconnect();
            } else {
                if (!endpoint.obtainingConnectionInformation) {
                    connectToTelnetEndpoint(endpoint);
                }
            }
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.VNC) {
            let existingVncClient = getVncClientInstance(`vnc-client-endpoint-${endpoint.Id}`);
            if (existingVncClient !== null) {
                existingVncClient.reconnect();
            } else {
                if (!endpoint.obtainingConnectionInformation) {
                    connectToVncEndpoint(endpoint);
                }
            }
        } 
    }

    const ConnectionProtocol = {
        HTTP: 0,
        HTTPS: 5,
        Powershell: 8,
        SSH: 10,
        RDP: 20,
        Telnet: 30,
        VNC: 40
    };
    
    function selectEndpoint(endpoint) {
        if (endpoint === selectedEndpoint) {
            return;
        }
        $contentResourceWrapper.hide();
        $vmWrapper.hide();
        $sshWrapper.hide();
        $rdpWrapper.hide();
        $httpEndpointWrapper.hide();
        $rdpEndpointWrapper.hide();
        $telnetEndpointWrapper.hide();
        $vncEndpointWrapper.hide();

        let $resourcesContainer = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");

        if (selectedMachine) {
            $resourcesContainer.find("#machine" + selectedMachine.ProfileId).find(".machineInfo").slideUp(300);
        }
        if (selectedEndpoint) {
            $resourcesContainer.find(".endpoint.selected").find(".expanded-info").slideUp("fast");
        }

        $resourcesContainer.find(".machine").removeClass("selected");
        $resourcesContainer.find(".endpoint").removeClass("selected");

        let $endpoint = $resourcesContainer.find(`.endpoint[data-id="${endpoint.Id}"]`);
        $endpoint.addClass("selected");
        $endpoint.find(".expanded-info").slideDown("fast");

        selectedMachine = null;
        selectedContentResource = null;
        selectedEndpoint = endpoint;
        setupVmVisibility();

        tabList.setActiveTabById(endpoint.Id);

        if (endpoint.ConnectionProtocol == ConnectionProtocol.HTTP || endpoint.ConnectionProtocol == ConnectionProtocol.HTTPS) {
            connectToHttpEndpoint(endpoint)
            $("#virtualKeyboard").virtualKeyboard("hideKeyboard");
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.SSH || endpoint.ConnectionProtocol == ConnectionProtocol.Powershell) {
            connectToSshEndpoint(endpoint);
            $("#virtualKeyboard").virtualKeyboard("hideKeyboard");
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.RDP) {
            connectToRdpEndpoint(endpoint);
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.Telnet) {
            connectToTelnetEndpoint(endpoint);
        } else if (endpoint.ConnectionProtocol == ConnectionProtocol.VNC) {
            connectToVncEndpoint(endpoint);
        }
        if (labData.SelectedVirtualMachineEndpointId != endpoint.Id) {
            markSelectedEndpoint(endpoint);
        }        
    }

    function connectToSshEndpoint(endpoint) {
        $sshWrapper.show();
        let sshClientElementId = `sshEndpointClient${endpoint.Id}`;
        for (let sshClientInstance of _sshClientInstances) {
            if (sshClientInstance.terminalElementId !== sshClientElementId) {
                sshClientInstance.hide();
            }
        }
        let existingSshClient = getSshClientInstance(sshClientElementId);
        if (existingSshClient !== null) {
            existingSshClient.show();
            existingSshClient.resize();
            existingSshClient.connect();
        } else {
            let sshStatusElementId = `sshEndpointStatus${endpoint.Id}`;
            $sshWrapper.append(`<div class='sshContainer'><div class='sshClientStatus' id='${sshStatusElementId}'></div><div class='sshClient' id='${sshClientElementId}'></div></div>`);
            let sshConnectionInfo = {
                labInstanceKey: model.key,
                machineId: endpoint.VirtualMachineProfileId,
                endpointId: endpoint.Id,
                terminalElementId: sshClientElementId,
                statusElementId: sshStatusElementId,
                powershell: endpoint.ConnectionProtocol === ConnectionProtocol.Powershell
            }
            let sshClient = new SshClient(sshConnectionInfo);
            sshClient.connect();
        }        
    }

    function connectToHttpEndpoint(endpoint, attempts) {
        $httpEndpointWrapper.find(".httpEndpointFrame").hide();
        $httpEndpointWrapper.show();
        let httpEndpointFrameElementId = `httpEndpointFrame${endpoint.Id}`;
        let $httpEndpointFrame = $(`#${httpEndpointFrameElementId}`);
        if ($httpEndpointFrame.length === 0) {
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { key: model.key, machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id },
                cache: false,
                url: "/VirtualizationClient/GetHttpEndpointUrl"
            }).always(function (response) {
                if (!response?.Success) {
                    let error = `Failed to get URL for HTTP endpoint ${endpoint.Name}. `;
                    if (response?.Error) {
                        error += response.Error;
                    }
                    console.error(error);
                    attempts = attempts == null ? 1 : attempts + 1;
                    if (response?.Recoverable && attempts < 60) {
                        console.info(`Will retry getting URL for HTTP endpoint ${endpoint.Name} in 5 seconds.`);
                        window.setTimeout(function () {
                            connectToHttpEndpoint(endpoint, attempts);
                        }, 5000);
                    }
                    return;
                }
                $httpEndpointFrame = $(`<iframe class='httpEndpointFrame' id="${httpEndpointFrameElementId}" src="${response.Url}" />`);
                $httpEndpointWrapper.append($httpEndpointFrame);
            });
        }
        $httpEndpointFrame.show();
    }

    let _rdpClients = [];

    function getRdpClientInstance(id) {
        for (let i = 0, numInstances = _rdpClients.length; i < numInstances; i++) {
            if (_rdpClients[i].elementId === id) {
                return _rdpClients[i];
            }
        }
        return null;
    }

    function connectToRdpEndpoint(endpoint, attempts) {
        endpoint.obtainingConnectionInformation = true;
        $rdpEndpointWrapper.find(".rdp-client").hide();
        $rdpEndpointWrapper.show();
        let rdpClientElementId = `rdp-client-endpoint-${endpoint.Id}`;
        let existingRdpClient = getRdpClientInstance(rdpClientElementId);
        if (existingRdpClient !== null) {
            existingRdpClient.show();
            existingRdpClient.connect();
        } else {
            $(`#${rdpClientElementId}`).remove();
            let $rdpClient = $(`<div id='${rdpClientElementId}' class="rdp-client" style="text-align:left; position:relative; overflow:hidden; width:100%; height:100%;"><div class='rdp-client-message'>Connecting</div></div>`);
            $rdpEndpointWrapper.append($rdpClient);
            console.info(`Obtaining connection information for RDP endpoint ${endpoint.Name}.`);
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { key: model.key, machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id },
                cache: false,
                url: "/VirtualizationClient/GetRdpEndpointConnectionInfo"
            }).always(function (response) {
                if (!response?.Success) {
                    let error = `Failed to get connection info for RDP endpoint ${endpoint.Name}. `;
                    if (response?.Error) {
                        error += response.Error;
                    }      
                    console.error(error);
                    attempts = attempts == null ? 1 : attempts + 1;
                    if (response?.Recoverable && attempts < 60) {    
                        console.info(`Will retry getting connection information for RDP endpoint ${endpoint.Name} in 5 seconds.`);
                        window.setTimeout(function () {
                            connectToRdpEndpoint(endpoint, attempts);                         
                        }, 5000);                        
                    } else {
                        $rdpClient.find(".rdp-client-message").text(response?.Error ?? "Unable to obtain connection info");
                        endpoint.obtainingConnectionInformation = false;
                    }
                    return;
                }
                endpoint.obtainingConnectionInformation = false;
                let connectionInfo = {
                    elementId: rdpClientElementId,
                    language: model.language,
                    disconnectedText: "Disconnected",
                    gatewayAddress: response.GatewayAddress,
                    machineAddress: response.MachineAddress,
                    port: endpoint.Port,
                    username: endpoint.Username,
                    password: endpoint.Password,
                    mapClipboard: model.showPasteLinks && endpoint.RedirectClipboard,
                    playSound: endpoint.RedirectAudioOutput,
                    highSoundQuality: true,
                    captureAudio: endpoint.CaptureAudioInput,
                    recordSession: false,
                    allowWallpaper: endpoint.AllowDesktopWallpaper,
                    enableFontSmoothing: endpoint.EnableFontSmoothing,
                };
                
                let rcOnConnected = function (data) {                    
                    if (!model.isMonitor && !model.isTakeControl && data && data.rdpSessionId) {
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            data: { machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id, rdpSessionId: data.rdpSessionId, rdpGatewayAppId: data.rdpGatewayAppId },
                            cache: false,
                            url: "/VirtualizationClient/SaveMachineEndpointRdpSessionId/" + model.labInstanceId
                        });
                    }
                };

                let getRdpSessionInfo = function (callback) {
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        data: { machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id },
                        cache: false,
                        url: "/VirtualizationClient/GetMachineEndpointRdpSessionId/" + model.labInstanceId
                    }).always(function (response) {
                        if (!response || !response.Success) {
                            console.error("Failed to get RDP session info for endpoint " + endpoint.Id);
                            if (callback) callback(null);                            
                        }
                        if (callback) callback({ RdpSessionId: response.RdpSessionId, RdpGatewayAppId: response.RdpGatewayAppId });
                    });
                };

                let rcOnSizeChanged = function (w, h) {  
                    if (model.isMonitor) {
                        $rdpEndpointWrapper.width(w + "px");
                        $rdpEndpointWrapper.height(h + "px");
                        $rdpEndpointWrapper.css("overflow", "hidden");
                    }
                };

                let rdpClient = new window.RdpClient(connectionInfo, rcOnConnected, rcOnSizeChanged, getRdpSessionInfo);

                if (model.isMonitor) {
                    rdpClient.setViewOnly(true);
                }
                rdpClient.setShadowing(model.isMonitor || model.isTakeControl, model.sessionShadowUserName);
                if (model.isMonitor) {
                    rdpClient.setAutoFocus(false);
                }
                _rdpClients.push(rdpClient);
                rdpClient.connect();
            });            
        } 
    }

    let _telnetClients = [];

    function getTelnetClientInstance(id) {
        for (let telnetClient of _telnetClients) {
            if (telnetClient.elementId === id) {
                return telnetClient;
            }
        }
        return null;
    }

    function connectToTelnetEndpoint(endpoint, attempts) {
        endpoint.obtainingConnectionInformation = true;
        for (let tc of _telnetClients) {
            tc.hide();
        }
        $telnetEndpointWrapper.show();
        let telnetClientElementId = `telnet-client-endpoint-${endpoint.Id}`;
        let existingTelnetClient = getTelnetClientInstance(telnetClientElementId);
        if (existingTelnetClient !== null) {
            existingTelnetClient.show();
            existingTelnetClient.connect();
        } else {
            $(`#${telnetClientElementId}`).remove();
            let $telnetClient = $(`<div id='${telnetClientElementId}' class="telnet-client" style="text-align:left; position:relative; overflow:hidden; width:100%; height:100%;"><div class='telnet-client-message'>Connecting</div></div>`);
            $telnetEndpointWrapper.append($telnetClient);
            console.info(`Obtaining connection information for telnet endpoint ${endpoint.Name}.`);
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { key: model.key, machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id },
                cache: false,
                url: "/VirtualizationClient/GetTelnetEndpointConnectionInfo"
            }).always(function (response) {
                if (!response?.Success) {
                    let error = `Failed to get connection info for telnet endpoint ${endpoint.Name}. `;
                    if (response?.Error) {
                        error += response.Error;
                    }
                    console.error(error);
                    attempts = attempts == null ? 1 : attempts + 1;
                    if (response?.Recoverable && attempts < 60) {
                        console.info(`Will retry getting connection information for telnet endpoint ${endpoint.Name} in 5 seconds.`);
                        window.setTimeout(function () {
                            connectToTelnetEndpoint(endpoint, attempts);
                        }, 5000);
                    } else {
                        $telnetClient.find(".telnet-client-message").text(response?.Error ?? "Unable to obtain connection info");
                        endpoint.obtainingConnectionInformation = false;
                    }
                    return;
                }
                endpoint.obtainingConnectionInformation = false;
                let connectionInfo = {
                    elementId: telnetClientElementId,
                    connectingText: "Connecting",
                    disconnectedText: "Disconnected",
                    gatewayAddress: response.GatewayAddress,
                    machineAddress: response.MachineAddress,
                    port: endpoint.Port,
                    username: endpoint.Username,
                    password: endpoint.Password,
                    mapClipboard: model.showPasteLinks,
                    recordSession: false
                };

                let rcOnConnected = function (data) {
                    //we could record the session data here for possible monitoring in the future
                };

                let telnetClient = new window.TelnetClient(connectionInfo, rcOnConnected);

                if (model.isMonitor) {
                    telnetClient.setViewOnly(true);
                }
                telnetClient.setShadowing(model.isMonitor || model.isTakeControl, model.sessionShadowUserName);
                if (model.isMonitor) {
                    telnetClient.setAutoFocus(false);
                }
                _telnetClients.push(telnetClient);
                telnetClient.connect();
            });
        } 
    }

    let _vncClients = [];

    function getVncClientInstance(id) {
        for (let vncClient of _vncClients) {
            if (vncClient.elementId === id) {
                return vncClient;
            }
        }
        return null;
    }

    function connectToVncEndpoint(endpoint, attempts) {
        endpoint.obtainingConnectionInformation = true;
        for (let vc of _vncClients) {
            vc.hide();
        }
        $vncEndpointWrapper.show();
        let vncClientElementId = `vnc-client-endpoint-${endpoint.Id}`;
        let existingVncClient = getTelnetClientInstance(vncClientElementId);
        if (existingVncClient !== null) {
            existingVncClient.show();
            existingVncClient.connect();
        } else {
            $(`#${vncClientElementId}`).remove();
            let $vncClient = $(`<div id='${vncClientElementId}' class="vnc-client" style="text-align:left; position:relative; overflow:hidden; width:100%; height:100%;"><div class='vnc-client-message'>Connecting</div></div>`);
            $vncEndpointWrapper.append($vncClient);
            console.info(`Obtaining connection information for VNC endpoint ${endpoint.Name}.`);
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { key: model.key, machineId: endpoint.VirtualMachineProfileId, endpointId: endpoint.Id },
                cache: false,
                url: "/VirtualizationClient/GetVncEndpointConnectionInfo"
            }).always(function (response) {
                if (!response?.Success) {
                    let error = `Failed to get connection info for VNC endpoint ${endpoint.Name}. `;
                    if (response?.Error) {
                        error += response.Error;
                    }
                    console.error(error);
                    attempts = attempts == null ? 1 : attempts + 1;
                    if (response?.Recoverable && attempts < 60) {
                        console.info(`Will retry getting connection information for VNC endpoint ${endpoint.Name} in 5 seconds.`);
                        window.setTimeout(function () {
                            connectToVncEndpoint(endpoint, attempts);
                        }, 5000);
                    } else {
                        $vncClient.find(".vnc-client-message").text(response?.Error ?? "Unable to obtain connection info");
                        endpoint.obtainingConnectionInformation = false;
                    }
                    return;
                }
                endpoint.obtainingConnectionInformation = false;
                let connectionInfo = {
                    elementId: vncClientElementId,
                    connectingText: "Connecting",
                    disconnectedText: "Disconnected",
                    gatewayAddress: response.GatewayAddress,
                    machineAddress: response.MachineAddress,
                    port: endpoint.Port,
                    username: endpoint.Username,
                    password: endpoint.Password,
                    mapClipboard: model.showPasteLinks,
                    recordSession: false
                };

                let rcOnConnected = function (data) {
                    //we could record the session data here for possible monitoring in the future
                };

                let vncClient = new window.VncClient(connectionInfo, rcOnConnected);

                if (model.isMonitor) {
                    vncClient.setViewOnly(true);
                }
                vncClient.setShadowing(model.isMonitor || model.isTakeControl, model.sessionShadowUserName);
                if (model.isMonitor) {
                    vncClient.setAutoFocus(false);
                }
                _vncClients.push(vncClient);
                vncClient.connect();
            });
        } 
    }

    function markSelectedEndpoint(endpoint) {
        labData.SelectedVirtualMachineEndpointId = endpoint.Id;
        ajaxPost(`/VirtualizationClient/MarkSelectedEndpoint/${model.labInstanceId}/?endpointId=${endpoint.Id}`);
    }

    function refreshDisplay() {
        if (selectedEndpoint) {
            reconnectEndpoint(selectedEndpoint);
            return;
        }
        if (!selectedMachine || selectedMachine.ConnectViaRdp) { return; }
        if (selectedMachine.sshActive) {
            let sshClient = getSshClientInstance("sshClient" + selectedMachine.ProfileId);
            if (sshClient !== null) {
                sshClient.reconnect();
            } else {
                alert('Unable to find existing SSH client instance.');
            }
        } else {
            let remoteController = getSelectedRemoteController();
            if (remoteController.reconnect) {
                remoteController.reconnect(selectedMachine);
                refreshVmWrapperLayout();
            } else {
                connectSelectedRemoteController();
                refreshVmWrapperLayout();
            }
        }
    }

    function openMachineWindow(machine) {
        let $machines = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        $machines.find("#machine" + machine.ProfileId + " .openInNewWindow").addClass("open").text("Close Window");
        let url = "/VirtualizationClient/" + model.key + "?vmOnly=1&vmId=" + machine.ProfileId + "&titlebar=1";
        machine.openInSeparateWindow = true;
        let windowId = "vmWindow" + machine.ProfileId;
        let width = $vmWrapper.width();
        let height = $vmWrapper.height() + $("#titleBar").height();
        let vmWindow = window.open(url, windowId, 'width=' + width + ',height=' + height + ',status=no,resizable=1,scrollbars=0');
        machine.window = vmWindow;
        childWindows.push(vmWindow);
        setupVmVisibility();
        if (model.isChildClient && labData.Machines.length == 1 && !model.useTabbedInterface) {
            window.parent.hideConsole();
        }
    }

    function updateMachineThumbnails() {
        if (model.contentOnly) {
            return;
        }
        var dateString = "&t=" + new Date().valueOf();
        var $machines = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        $machines.find("div.machine").each(function () {
            var $this = $(this);
            var url = "/VirtualizationClient/Thumb/?machineId=" + encodeURIComponent($this.data("machine").InstanceName) + "&labInstanceKey=" + model.key + dateString;
            if ($this.find("img.thumbnail").length === 0)
                $(this).prepend("<img alt='Thumbnail screenshot of virtual machine" + $this.data("machine").InstanceName + "' class='thumbnail'>");
            $this.find("img.thumbnail").attr("src", url);
        });
    }

    function checkRemoteControllerConnection() {
        if (labConsole.complete || labConsole.remoteStateChangeInProgress || !labConsole.hostIsOnline || labConsole.fullScreenMessageShown || labConsole.dialogShown || labConsole.contentDialogShown || selectedMachineState === 0 || !selectedMachine || selectedMachine.ConnectViaRdp) {
            remoteControllerDisconnectedCount = 0;
            return;
        }
        if (selectedMachine && selectedMachine.window && !selectedMachine.window.closed) {
            remoteControllerDisconnectedCount = 0;
            return;
        }
        var state = 0;
        if (selectedMachine.sshActive) {
            var sshClient = getSshClientInstance("sshClient" + selectedMachine.ProfileId);
            state = sshClient !== null ? sshClient.getConnectionState() : 0;
        } else {
            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                state = remoteController.getConnectionState();
            }            
        }
        switch (state) {
            case 0: //not connected
                remoteControllerDisconnectedCount++;
                break;
            case 1: //connected
                remoteControllerDisconnectedCount = 0;
                break;
        }
        if (remoteControllerDisconnectedCount === 6) {
            if (model.isChildClient) {
                var parentNotification = {
                    content: "<div><strong>" + Text.ConnectionIssuesTitle + "</strong><p>" + Text.ConnectionIssuesMessage + "</p>",
                    buttons: [{
                        text: Text.ConnectionIssuesButtonText,
                        click: function () {
                            refreshDisplay();
                            closeNotification();
                            remoteControllerDisconnectedCount = 0;
                        },
                        closeNotification: true,
                        primary: true
                    }]
                };
                showNotification(parentNotification);
            } else {
                var $content = $("<div><strong>" + Text.ConnectionIssuesTitle + "</strong><div style='margin:8px 0'>" + Text.ConnectionIssuesMessage + "</div><div style='margin-top:8px'><input type='button' value='" + Text.ConnectionIssuesButtonText + "'/></div></div>");
                $content.find("input").on("click keypress", function (e) {
                    if (!a11yClick(e)) return;
                    refreshDisplay();
                    refreshVmWrapperLayout();
                    closeNotification();
                    remoteControllerDisconnectedCount = 0;
                });
                showNotification($content);
            }
            $.ajax({
                type: "POST",
                dataType: "json",
                data: { machineId: selectedMachine.ProfileId },
                cache: false,
                url: "/VirtualizationClient/LogMachineConnectionFailure/" + model.labInstanceId
            });
        }
    }

    function disableNavigationWarning() {
        model.enableNavigationWarning = false;
        if (model.isChildClient) {
            window.parent.disableNavigationWarning();
        }
    }

    var lastMonitorSync = null;
    var syncInProgress = false;
    var lastConnectionState = null;

    function synchronizeWithServer() {
        if (labConsole.complete || labConsole.pauseSync || syncInProgress) {
            return;
        }
        syncInProgress = true;
        var url = "/VirtualizationClient/Sync/" + model.labInstanceId;
        if (model.isMonitor) {
            url += "?monitor=1";
            if (lastMonitorSync) {
                url += "&lastMonitorSync=" + lastMonitorSync;
            }
        } else {
            if (lastUnsyncedActivity) {
                var la = new Date().valueOf() - lastUnsyncedActivity;
                url += "?la=" + la;
                lastUnsyncedActivity = null;
            }
            if (ignoreVirtualMachineStateDuringSync) {
                url += (url.indexOf("?") >= 0 ? "&" : "?") + "skipMachineStateCheck=1";
            }
            url += (url.indexOf("?") >= 0 ? "&" : "?") + "lastLatency=" + lastLatency;
            //check if we've lost connection since the last sync. if so, we should immediately check for the state of the VM as it may have been shut down.

            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                let currentConnectionState = remoteController.getConnectionState();
                if (currentConnectionState !== lastConnectionState) {
                    if (currentConnectionState === 0 && lastConnectionState === 1) {
                        url += (url.indexOf("?") >= 0 ? "&" : "?") + "forceMachineStateCheck=1";
                    }
                    lastConnectionState = currentConnectionState;
                }
            }
        }
        url += (url.indexOf("?") >= 0 ? "&" : "?") + "userId=" + labData.UserId;
        ajaxPost(url,
            function (response) {
                syncInProgress = false;
                if (!response.Success || labConsole.complete) {
                    return;
                }
                if (response.AccountDisabled) {
                    labIsComplete();
                    showFullScreenMessage("Access Denied", "Your account has been disabled. If you believe this to be in error, please contact support.", false, true);
                    return;
                }
                if (response.Transferred) {
                    labIsComplete();
                    showFullScreenMessage("Your lab instance has been transferred to another user", "", false, true);
                    return;
                }
                if (response.ShareExpired) {
                    labIsComplete();
                    showFullScreenMessage("Your share has expired", "", false, true);
                    return;
                }
                var previousState = labData.State;
                labData.State = response.State;
                labData.CompletionStatus = response.CompletionStatus;
                if (model.isChildClient) {
                    window.parent.setLabState(labData.State);
                }
                switch (response.State) {
                    case 0: //off
                    case 110: //tearing down
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        if (previousState === 170) {
                            showExamResult();
                        } else {
                            showFullScreenMessage(Text.LabClosedTitle, Text.LabClosedMessage, false, true);
                        }
                        return;
                    case 40: //running
                        if (labConsole.remoteStateChangeInProgress) {
                            if (labConsole.reloadAfterRemoteStateChange) {
                                disableNavigationWarning();
                                window.location.reload();
                            }
                            labConsole.remoteStateChangeInProgress = false;
                            hideFullScreenMessage();
                            if (selectedMachine && !selectedMachine.ConnectViaRdp && !selectedMachine.sshActive) {
                                connectSelectedRemoteController();                               
                            }
                        }
                        if (response.FileChange) {
                            syncInstructorFiles();
                        }
                        if (previousState === 170) {
                            hideFullScreenMessage();
                        }
                        break;
                    case 50: //saving
                        showFullScreenMessage(
                            model.isExam ? Text.SavingExamTitle : Text.SavingLabTitle,
                            model.isExam ? Text.SavingExamMessage : Text.SavingLabMessage,
                            true);
                        break;
                    case 60: //saved
                    case 150: //moving while saved
                        if (response.IsAnonymousSave) {
                            showFullScreenMessageForAnonymousSave(response.ResumeUrl, response.QrCode);
                        } else {
                            var expiration = new Date();
                            expiration.setDate(expiration.getDate() + model.maxLabSaveDurationDays);
                            showFullScreenMessage(Text.LabSavedTitle, Text.LabSavedForXDaysExpiresY.format(model.maxLabSaveDurationDays, expiration.toLocaleString()), false, true, model.isMonitor ? null : "Resume Lab", model.isMonitor ? null : resume);
                        }
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        return;
                    case 70: //resuming
                        if (!labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage(model.isExam ? Text.ExamResumingTitle : Text.LabResumingTitle, Text.ThisCanTakeSeveralMinutes, true);
                        }
                        break;
                    case 80: //creating snapshot
                        if (!labConsole.internalStatesChangeInProgress && !labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage(Text.CreatingSnapshotTitle, Text.CreatingSnapshotMessage, true);
                        }
                        break;
                    case 90: //applying snapshot
                        if (!labConsole.internalStatesChangeInProgress && !labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage(Text.ApplyingSnapshotTitle, Text.ApplyingSnapshotMessage, true);
                        }
                        break;
                    case 100: //saving diff disks
                        if (!labConsole.internalStatesChangeInProgress && !labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage("Committing your changes", "", true);
                        }
                        break;
                    case 120: //cloning
                        if (!labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage(Text.CloningTitle, Text.CloningMessage, true);
                        }
                        break;
                    case 130: //creating as clone
                        if (!labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage(Text.LabBuildTitle, Text.ThisCanTakeSeveralMinutes, true);
                        }
                        break;
                    case 140: //Moving
                        if (!labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            labConsole.reloadAfterRemoteStateChange = true;
                            showFullScreenMessage(Text.MovingTitle, Text.MovingMessage, true);
                        }
                        break;
                    case 160: //storing start state
                        if (!labConsole.remoteStateChangeInProgress) {
                            labConsole.remoteStateChangeInProgress = true;
                            showFullScreenMessage("Committing your changes", "", true);
                        }
                        break;
                    case 170: //scoring
                        showFullScreenMessage("Grading", "", true);
                        break;
                }
                updateTimer(response.Min, response.IsShareExpiration);
                if (model.isMonitor) {
                    if (response.SelectedNavigationTab !== selectedNavigationTab) {
                        selectTab(response.SelectedNavigationTab);
                        if (model.isChildClient) {
                            parent.selectTab(response.SelectedNavigationTab);
                        }
                    }
                    if (response.SelectedMachineId) {
                        if (selectedMachine == null || selectedMachine.ProfileId !== response.SelectedMachineId) {
                            selectMachineById(response.SelectedMachineId, false);
                        }
                    } else {
                        selectedMachine = null;
                    }

                    if (response.SelectedContentResourceId) {
                        if (selectedContentResource == null || selectedContentResource.Id !== response.SelectedContentResourceId) {
                            selectContentResourceById(response.SelectedContentResourceId, false);
                        }
                    } else {
                        selectedContentResource = null;
                    }
                    if (response.SelectedVirtualMachineEndpointId) {
                        if (selectedEndpoint == null || selectedEndpoint.Id !== response.SelectedVirtualMachineEndpointId) {
                            selectEndpoint(getVirtualMachineEndpointById(response.SelectedVirtualMachineEndpointId));
                        }
                    } else {
                        selectedEndpoint = null;
                    }

                    if (model.hasSideBySideResources) {
                        var $option = $("#sideBySideResourceList option:selected");
                        if ($option.length > 0 && parseInt($option.val()) !== response.SelectedSideBySideResourceId) {
                            var $newOption = $("#sideBySideResourceList option[value='" + response.SelectedSideBySideResourceId + "']");
                            $("#sideBySideResourceList").val($newOption.val());
                            $("#sideBySideResourceFrame").attr("src", processContentUrl($newOption.attr("data-url")));
                        }
                    }

                    if (response.Theme !== model.themeId) {
                        model.themeId = response.Theme;
                        var $themeOption = $("#theme option[value='" + model.themeId + "']");
                        if ($themeOption.length > 0) {
                            var themeName = $themeOption.attr("data-name");
                            applyTheme(themeName);
                            $("#theme").val(model.themeId);
                            if (model.isChildClient) {
                                window.parent.setTheme(themeName);
                            }
                        }
                    }
                    if (model.showConnectionQuality) {
                        showConnectionQuality(response.LastLatency);
                    }
                    if (model.isChildClient) {
                        if (response.InstructionsPageIndex !== null) {
                            parent.selectInstructionsPage(response.InstructionsPageIndex);
                        }
                        if (response.InstructionsZoom !== null) {
                            parent.setInstructionsZoom(response.InstructionsZoom);
                        }
                        if (response.InstructionsScrollTop !== null) {
                            parent.setInstructionsScrollTop(response.InstructionsScrollTop);
                        }
                        if (response.LastCompletedTaskIndex !== null) {
                            parent.setLastCompletedTask(response.LastCompletedTaskIndex);
                        }
                        if (response.CompletedTasksJson !== null) {
                            parent.setCompletedTasksJson(response.CompletedTasksJson);
                        }
                        parent.setNavigationBarWidth(response.NavigationBarWidth);

                    }
                    lastMonitorSync = response.LastMonitorSync;
                }
                if (response.Notifications != null && response.Notifications.length > 0) {

                    var newNotifications = response.Notifications;
                    var numNewNotifications = newNotifications.length;
                    for (var i = 0; i < numNewNotifications; i++) {
                        var notification = newNotifications[i];
                        var $notification = $("<div>" + notification.Text + "</div>");
                        showNotification($notification, true, notification.Id);
                        if (model.layoutVersion === 1) {
                            if ($("#modalDialog .notifications").length > 0) {
                                if ($("#modalDialog .notifications .notification[data-id='" + notification.Id + "']").length === 0) {
                                    $("#modalDialog .noNotifications").hide();
                                    var $dialogNotification = $("<div data-id='" + notification.Id + "' class='notification'><div class='notificationDate'>" + notification.Created + "</div><div class='notificationBody'>" + notification.Text + "</div></div>");
                                    $("#modalDialog .notifications").prepend($dialogNotification);
                                    $modalDialog.mCustomScrollbar("update");
                                }
                            }
                        }
                    }
                }
                if (response.Variables != null && model.isChildClient) {
                    parent.setVariables(response.Variables);
                }
                if (!response.Online) {
                    labConsole.hostIsOnline = false;
                    showFullScreenMessage("Lost Connection", "Sorry, we\'ve lost connectivity to your lab environment. This is most likely a temporary issue and will be resolved shortly.<br/>As soon as connectivity is restored, your lab will resume.", true);
                } else if (!labConsole.hostIsOnline) {
                    labConsole.hostIsOnline = true;
                    hideFullScreenMessage();
                    if (selectedMachine && !selectedMachine.ConnectViaRdp && !selectedMachine.sshActive) {
                        connectSelectedRemoteController();                       
                    }
                }
                if (!labConsole.ignoreVirtualMachineStateDuringSync && selectedMachine) {
                    selectedMachineState = response.MachineState;
                    if (!labConsole.dialogShown && !labConsole.fullScreenMessageShown && !labConsole.contentDialogShown) {
                        setupVmVisibility();
                    }
                }
            },
            function () {
                syncInProgress = false;
            }
        );
    }

    function resume() {
        showFullScreenMessage({
            title: "Resuming",
            message: "This can take several minutes.",
            showLoadingImage: true
        });
        var url = "/Lab/Resume/" + model.key;

        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url
        }).always(function (response) {
            if (!response || !response.Success) {
                var errorMessage = response && response.Error ? response.Error : "Sorry an error occurred";
                showFullScreenMessage({
                    title: ":-(",
                    message: errorMessage,
                    buttons: [{
                        text: "Resume Lab",
                        click: resume
                    }]
                });
                return;
            }
            if (model.isChildClient) {
                window.parent.location = response.Url;
            } else {
                window.location = response.Url;
            }
        });
    }


    function showFullScreenMessageForAnonymousSave(resumeUrl, qrCode) {
        var expiration = new Date();
        expiration.setDate(expiration.getDate() + model.maxLabSaveDurationDays);
        var text = Text.LabSavedForXDaysExpiresY.format(model.maxLabSaveDurationDays, expiration.toLocaleString());
        text += "<div>Your lab can be resumed here:</div><div style='font-size:125%; margin:25px 0;'>" + resumeUrl + "</div>";
        text += "<div style='margin-top:15px'>You can e-mail this link to yourself.</div>";
        text += "<div style='margin-top:15px'><input id='anonymousResumeEmail' type='text' style='width:300px;' maxlength='256' placeholder='E-mail Address' /> <input type='button' id='sendAnonymousResumeEmail' value='Send'/> <span id='sendAnonymousResumeEmailMessage' style='margin-left:10px;'></span></div>"
        if (qrCode) {
            text += "<div style='margin-top:15px'>Or you can use this QR code to email the link to yourself from your smart phone. You may need to install a QR code scanner app on your device.</div>";
            text += "<div style='margin-top:15px'><img src='data:image/png;base64," + qrCode + "' /></div>";
        }
        if (model.postLabUrl) {
            text += "<div style= 'margin-top:20px; border-top:solid 1px #ccc; padding-top:20px;'><input type='button' value='OK' id='gotoPostLabUrl' class='primary' />";
            showFullScreenMessage(
                Text.LabSavedTitle,
                text,
                false,
                false);
            var $okButton = model.isChildClient ? $(parent.getElementById("gotoPostLabUrl")) : $("#gotoPostLabUrl");
            $okButton.on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                if (model.isChildClient) {
                    window.parent.location = model.postLabUrl;
                } else {
                    window.location = model.postLabUrl;
                }
            });
        } else {
            text += "<div style='margin-top:20px; border-top:solid 1px #ccc; padding-top:20px;'>Get here by mistake? You can resume right away...</div>";
            showFullScreenMessage(
                Text.LabSavedTitle,
                text,
                false,
                true,
                "Resume Lab",
                resume);
        }

        var $anonymousResumeEmail = model.isChildClient ? $(parent.getElementById("anonymousResumeEmail")) : $("#anonymousResumeEmail");
        var $sendAnonymousResumeEmail = model.isChildClient ? $(parent.getElementById("sendAnonymousResumeEmail")) : $("#sendAnonymousResumeEmail");
        var $sendAnonymousResumeEmailMessage = model.isChildClient ? $(parent.getElementById("sendAnonymousResumeEmailMessage")) : $("#sendAnonymousResumeEmailMessage");

        $anonymousResumeEmail.focus();
        var sending = false;
        $sendAnonymousResumeEmail.on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (sending) return;
            var email = $anonymousResumeEmail.val();
            var valid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email);
            if (!valid) {
                $sendAnonymousResumeEmailMessage.html("Please enter a valid email address");
                return;
            }
            sending = true;
            $.ajax({
                url: "/Lab/SendAnonyousResumeEmail/" + model.labInstanceId,
                type: "POST",
                dataType: 'json',
                data: { email: email },
                cache: false
            }).always(function (response) {
                sending = false;
                if (response && response.Success) {
                    $sendAnonymousResumeEmailMessage.html("An email has been sent to " + email);
                    $anonymousResumeEmail.val("").focus();
                } else {
                    $sendAnonymousResumeEmailMessage.html(response && response.Error ? response.Error : "Sorry an error occurred");
                }
            });
        });
    }

    var extensionPromptHasShown = false;
    var timeWarningShown = false;

    function setupVmVisibility() {
        if (selectedEndpoint) {
            $("#machineCommands").css("visibility", "hidden");
            $("#displayMenuTitle").css("visibility", "");
            $("#developerMenuTitle").css("visibility", "hidden");
            $("#fitWindowToMachine").hide();
            $("#fitMachineToWindow").hide();
            $("#openInNewWindow").hide();
            $("#refreshDisplay").show();
            $("#fitMachineToWindow").hide();
            $("#turnOnMachine").hide();
            $("#turnOffMachine").hide();
            $("#pauseMachine").hide();
            $("#resumeMachine").hide();
            $("#resetMachine").hide();
            $("#revertMachine").hide();
            $("#showVirtualKeyboard").hide();
            if (selectedEndpoint.ConnectionProtocol == ConnectionProtocol.RDP) {
                $("#machineCommands").css("visibility", "");
                $("#windowsKeyStandAlone").show();
                $("#altTab").show();
                $("#windowsKeyWrapper").show();
                $("#windowsKeyStandAlone").hide();
                $("#paste").show();
                $("#ctlAltDel").show();
                $("#installIntegrationService").hide();                
            }
            if (selectedEndpoint.ConnectionProtocol == ConnectionProtocol.SSH || selectedEndpoint.ConnectionProtocol == ConnectionProtocol.Telnet || selectedEndpoint.ConnectionProtocol == ConnectionProtocol.VNC || selectedEndpoint.ConnectionProtocol == ConnectionProtocol.Powershell) {
                $("#machineCommands").css("visibility", "");
                $("#altTab").hide();
                $("#windowsKeyWrapper").hide();
                $("#ctlAltDel").hide();
            }
            return;
        }
        if (!selectedMachine || model.contentOnly) {
            $("#machineCommands").css("visibility", "hidden");
            $("#displayMenuTitle").css("visibility", "hidden");
            $("#developerMenuTitle").css("visibility", "hidden");
            $("#fitWindowToMachine").hide();
            $("#fitMachineToWindow").hide();
            $("#refreshDisplay").hide();
            return;
        }
        if (selectedMachine.window && !selectedMachine.window.closed) {
            $("#displayMenuTitle").css("visibility", "hidden")
            $("#machineCommands").css("visibility", "hidden");
            $("#developerMenuTitle").css("visibility", "hidden");
            $vmWrapper.hide();
            $("#vmOpenInSeparateWindow").show();
            return;
        }

        // Hide for SSH based on the machine, hiding based on the endpoint is in the section above
        $("#showVirtualKeyboard").toggle(!(selectedMachine && selectedMachine.UseSshTerminal));

        $("#machineCommands").css("visibility", "");
        $("#displayMenuTitle").css("visibility", "")
        $("#developerMenuTitle").css("visibility", "");
        $("#openInNewWindow").show();
        $("#vmOpenInSeparateWindow").hide();
        let vmState = selectedMachineState;
        if (selectedMachine && selectedMachine.AllowRevert) {
            $("#revertMachine").show();
        } else {
            $("#revertMachine").hide();
        }
        $("#power").show();
        if (vmState === 0) { //off
            if (selectedMachine?.ConnectViaRdp) {
                $rdpWrapper.hide();
                hideSelectedRemoteController();
                $sshWrapper.hide();
                $contentResourceWrapper.hide();
            }
            let right = !model.showNavigationBar ? 0 : $("#navigationBar").outerWidth();
            let bottom = 0;
            let top = $("#titleBar").outerHeight();
            $vmWrapper.hide();
            $("#vmOff").show().css({ "top": top, "right": right + "px", "bottom": bottom + "px" });
            if (model.layoutVersion > 1) {
                $("#machineCommands").css("visibility", "hidden");
            }
            $("#refreshDisplay").hide();
            $("#fitWindowToMachine").hide();
            $("#fitMachineToWindow").hide();
            $("#turnOnMachine").show();
            $("#turnOffMachine").hide();
            $("#pauseMachine").hide();
            $("#resumeMachine").hide();
            $("#resetMachine").hide();
            $("#paste").hide();
            $("#ctlAltDel").hide();
            $("#takeScreenshot").hide();
            $("#installIntegrationService").hide();
            $("#snapshots").show();
            $("#windowsKeyWrapper").hide();
            $("#windowsKeyStandAlone").hide();
        } else if (vmState === 70 || vmState === 40) { //paused or suspended
            if (selectedMachine && selectedMachine.ConnectViaRdp) {
                $rdpWrapper.show();
            } else {
                if (selectedMachine && selectedMachine.sshActive) {
                    $sshWrapper.show();
                } else {
                    showSelectedRemoteController();
                }
                $("#refreshDisplay").show();
                $("#fitMachineToWindow").hide();
                if (currentlyFullScreen) {
                    $("#fitWindowToMachine").hide();
                } else {
                    $("#fitWindowToMachine").show();
                }
            }
            $vmWrapper.show();
            if (model.layoutVersion > 1) {
                $("#machineCommands").css("visibility", "hidden");
            }
            $("#vmOff").hide();
            $("#turnOnMachine").hide();
            $("#turnOffMachine").show();
            $("#pauseMachine").hide();
            $("#resumeMachine").show();
            $("#resetMachine").hide();
            $("#paste").hide();
            $("#ctlAltDel").hide();
            $("#takeScreenshot").hide();
            $("#installIntegrationService").hide();
            $("#snapshots").hide();
            $("#windowsKeyWrapper").hide();
            $("#windowsKeyStandAlone").hide();
        } else {
            if (selectedMachine && selectedMachine.ConnectViaRdp) {
                $rdpWrapper.show();
            } else {
                if (selectedMachine && selectedMachine.sshActive) {
                    $sshWrapper.show();
                } else if (!labConsole.dialogShown && !labConsole.fullScreenMessageShown && !labConsole.contentDialogShown) {
                    showSelectedRemoteController();
                }
                $("#refreshDisplay").show();
                if (selectedMachine && selectedMachine.EnableDynamicScreenResizing) {
                    let remoteController = getSelectedRemoteController();
                    if (remoteController != null && !remoteController.limitedScreenSizes()) {
                        $("#fitMachineToWindow").show();
                    } else {
                        $("#fitMachineToWindow").hide();
                    }
                } else {
                    $("#fitMachineToWindow").hide();
                }
                if (currentlyFullScreen) {
                    $("#fitWindowToMachine").hide();
                } else {
                    $("#fitWindowToMachine").show();
                }
            }
            $vmWrapper.show();
            if (model.layoutVersion > 1) {
                $("#machineCommands").css("visibility", "");
            }
            $("#vmOff").hide();
            $("#turnOnMachine").hide();
            $("#turnOffMachine").show();
            $("#pauseMachine").show();
            $("#resumeMachine").hide();
            $("#resetMachine").show();
            $("#paste").show();
            $("#ctlAltDel").show();
            if (selectedMachine.UseEnhancedSessionMode) {
                $("#takeScreenshot").hide();
            } else {
                $("#takeScreenshot").show();
            }
            $("#takeScreenshot").show();
            $("#installIntegrationService").show();
            $("#snapshots").show();
            let remoteController = getSelectedRemoteController();
            if (selectedMachine?.UseEnhancedSessionMode && remoteController.supportsEsmOrRdp) {
                $("#windowsKeyWrapper").hide();
                $("#windowsKeyStandAlone").show();
            } else {
                $("#windowsKeyWrapper").show();
                $("#windowsKeyStandAlone").hide();
            }
        }
    }

    function updateTimer(minutesRemaining, isShareExpiration) {
        if (model.isChildClient) {
            window.parent.updateTimer(minutesRemaining, isShareExpiration);
            return;
        }
        if (labConsole.complete) { return; }
        if (minutesRemaining <= 0) {
            $("#timer").html("");
            if (!isShareExpiration && labData.State === 40) {
                handleTimeExpired();
            }
        } else {
            var m = minutesRemaining % 60;
            var h = Math.floor((minutesRemaining) / 60);
            if (h >= 1) {
                if (m > 0) {
                    $("#timer").html(Text.XHoursYMinutesRemaining.format(h, m));
                } else {
                    if (h === 1) {
                        $("#timer").html(Text.OneHourRemaining);
                    } else {
                        $("#timer").html(Text.XHoursRemaining.format(h));
                    }
                }
            } else {
                if (m === 1) {
                    $("#timer").html(Text.OneMinuteRemaining);
                } else {
                    $("#timer").html(Text.XMinutesRemaining.format(m));
                }
            }
            if (minutesRemaining <= 10) {
                $("#timer").removeClass("critical");
                $("#timer").addClass("warning");
                timeWarningShown = true;
            } else if (minutesRemaining <= 5) {
                $("#timer").removeClass("warning");
                $("#timer").addClass("critical");
                timeWarningShown = true;
            } else if (timeWarningShown) {
                $("#timer").removeClass("critical");
                $("#timer").removeClass("warning");
            }
            if (model.allowTimeExtensions && !model.isMonitor && minutesRemaining <= model.promptForExtensionMinutes && !extensionPromptHasShown && $labConsole.is(":visible")) {
                showTimeExtensionNotification();
            }
        }
    }

    function handleTimeExpired() {
        $("#timer").html("");
        if (model.isExam) {
            console.error('this should not happen', model.isExam);
        } else {
            showFullScreenMessage(Text.ClosingLab, "", true);
            ajaxPost("/Lab/TimeExpired/" + model.labInstanceId,
                function (response) {
                    if (response.Saved) {
                        showFullScreenMessage(
                            model.isExam ? Text.SavingExamTitle : Text.SavingLabTitle,
                            model.isExam ? Text.SavingExamMessage : Text.SavingLabMessage,
                            true);
                    } else {
                        labIsComplete();
                        sendLabDoneMessageToOpener();
                        gotoPostLabActivity(Text.LabClosedTitle, Text.TimeExpiredMessage);
                    }
                },
                function () {
                    labIsComplete();
                    sendLabDoneMessageToOpener();
                    gotoPostLabActivity(Text.LabClosedTitle, Text.TimeExpiredMessage);
                }
            );
        }
    }

    function showTimeExtensionNotification() {
        extensionPromptHasShown = true;
        var minutesToExtend;
        $.ajax({
            url: "/Lab/ExtensionTime/" + model.id,
            type: "Post",
            dataType: "json",
            cache: false,
        }).done(function (response) {
            if (response.MinutesToExtend !== undefined && response.MinutesToExtend < labData.ExtensionMinutes) {
                if (response.MinutesToExtend < 1)
                    return;
                minutesToExtend = response.MinutesToExtend;
            }
            else {
                minutesToExtend = labData.ExtensionMinutes;
            }
            var $content = "You now have less than {0} minutes left in your lab. Would you like to extend your lab by {1} minutes?".format(labData.PromptForExtensionMinutes, minutesToExtend) + "<div>";
            showNotification($content);
            $content.find("input.yesButton").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                $("#notificationContent").html("");
                ajaxPost("/Lab/Extend/" + model.labInstanceId,
                    function (response) {
                        if (response.Success) {
                            extensionPromptHasShown = false;
                            showNotification("Your lab has been extended by {0} minutes.".format(model.extensionMinutes));
                            updateTimer(response.MinutesRemaining);
                        } else {
                            if (response.Error) {
                                alert(response.Error);
                            } else {
                                alert(Text.LabTimeExtensionError);
                            }
                        }
                    },
                    function () {
                        alert(Text.LabTimeExtensionError);
                    }
                );
            });
            $content.find("input.noButton").on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                closeNotification();
            });
        });
    }

    function showExamResult() {
        $.ajax({
            url: "/Lab/GetExamScore/" + model.labInstanceId,
            type: "POST",
            dataType: "json",
            data: {},
            cache: false
        }).always(function (response) {
            if (!response || !response.Success) {
                gotoPostLabActivity("Lab Closed", "Your lab has been closed.");
                return;
            }
            let showCloseWindowButton = true;
            let specialButtonText = null;
            let specialButtonAction = null;
            if (model.postLabUrl || model.evaluationId || model.evaluationServiceUrl) {
                showCloseWindowButton = false;
                specialButtonText = "Next >";
                specialButtonAction = gotoPostLabActivity;
            }
            if (response.DisplayType == 40) {
                if (model.isChildClient) {
                    window.parent.location = "/ActivityGroupReport/" + model.key;
                } else {
                    window.location = "/ActivityGroupReport/" + model.key;
                }
            } else if (response.DisplayType == 30) {
                if (model.isChildClient) {
                    window.parent.location = "/SkillReport/" + model.key;
                } else {
                    window.location = "/SkillReport/" + model.key;
                }
            } else if (response.DisplayType === 20) {
                if (model.isChildClient) {
                    window.parent.location = "/Instructions/ExamResult/" + model.key;
                } else {
                    window.location = "/Instructions/ExamResult/" + model.key;
                }
            } else if (response.DisplayType === 10) {
                showFullScreenMessage(
                    response.Passed ? "Congratulations, you passed!" : "Sorry, you did not pass.",
                    "Your score: {0} / {1}".format(response.Score, response.PossibleScore),
                    false,
                    showCloseWindowButton,
                    specialButtonText,
                    specialButtonAction
                );
            } else {
                showFullScreenMessage(
                    "Submitted For Grading",
                    "Your environment has been successfully submitted for grading. You can now close this browser window.",
                    false,
                    showCloseWindowButton,
                    specialButtonText,
                    specialButtonAction
                );
            }
        });
    }

    function syncInstructorFiles() {
        ajaxPost(
            "/VirtualizationClient/SyncInstructorFiles/" + model.labInstanceId,
            function (response) {
                if (response.Success) {
                    var files = response.Files;
                    var filesLength = files.length;
                    var oldFiles = labData.InstructorFiles;
                    var oldFilesLength = oldFiles.length;
                    var newlyShared = [];
                    for (var i = 0; i < filesLength; i++) {
                        var found = false;
                        for (var j = 0; j < oldFilesLength; j++) {
                            if (files[i].Id === oldFiles[j].Id) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            newlyShared.push(files[i]);
                        }
                    }
                    labData.InstructorFiles = files;
                    if (newlyShared.length > 1) {
                        showNotification(model.isChildClient ? "Your instructor has shared files with you. You can access shared files by opening the Resources tab and picking a file from the DVD Drive list." : "Your instructor has shared files with you. You can access shared files by opening the Machines tab and picking a file from the DVD Drive list.");
                    } else if (newlyShared.length === 1) {
                        var namedMessage = model.isChildClient ? "Your instructor has shared \"{0}\" with you. You can access this file by opening the Resources tab and picking the file from the DVD Drive list." : "Your instructor has shared \"{0}\" with you. You can access this file by opening the Machines tab and picking the file from the DVD Drive list."
                        showNotification(namedMessage.format(newlyShared[0].Name));
                    }
                    var $machines = model.isChildClient
                        ? window.parent.getResourcesExtensionsPlaceHolder()
                        : $("#machines");
                    $machines.find(".dvdDriveInner").show();
                    var dvdLists = $machines.find("div.dvdDrive select");
                    var dvdListsLength = dvdLists.length;
                    for (var k = 0; k < dvdListsLength; k++) {
                        syncOpticalSelectList(dvdLists[k], files);
                    }
                }
            }
        );
    }

    function syncOpticalSelectList(selectList, files) {
        var selectedValue = selectList.value;
        var options = selectList.options;
        var optionsLength = options.length;
        var keepers = [];
        for (var i = 0; i < optionsLength; i++) {
            if (options[i].value.indexOf("instructor-") == -1) {
                keepers.push(options[i]);
            }
        }
        options.length = 0;
        var keepersLength = keepers.length;
        for (var j = 0; j < keepersLength; j++) {
            options[j] = keepers[j];
        }
        var filesLength = files.length;
        for (var k = 0; k < filesLength; k++) {
            options[options.length] = new Option(files[k].Name, "instructor-" + files[k].Id);
        }
        if (selectedValue) {
            selectList.value = selectedValue;
        } else {
            selectList.value = "-2";
        }
    }

    function showNotification(content, persistent, id) {
        if (model.isChildClient) {
            window.parent.showNotification(content, persistent, id);
            return;
        }
        if (persistent) {
            $("#notificationsLink").addClass("active");
        }
        var $notificationContent = $('#notificationContent');
        if (notificationShown) {
            var $wrapper = $("<div style='margin-top:6px;'></div>");
            $wrapper.append(content);
            $notificationContent.append($wrapper);
        } else {
            $notificationContent.html(content);
            var notification = $("#notification");
            var vmOffset = $vmWrapper.offset();
            var right = 32;
            notification.css({ "top": "-" + notification.outerHeight() + "px", "right": right + "px" });
            notification.show().animate({ "top": vmOffset.top + 16 }, 300);
            notificationShown = true;
        }
        if (model.layoutVersion === 1) {
            $("#notificationScrollable").mCustomScrollbar("update");
            if ($("#notificationScrollable").is(":visible")) {
                $("#notificationScrollable").mCustomScrollbar("scrollTo", "bottom");
            }
        }
    }

    function closeNotification() {
        if (!notificationShown) { return; }
        $('#notification').hide();
        notificationShown = false;
    }

    function refreshRemoteControllerLayout(force) {
        if (selectedEndpoint != null && selectedEndpoint.ConnectionProtocol === 20) {
            let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
            if (rdpClient !== null) {
                rdpClient.resize();
            }
            return;
        }

        let remoteController = getSelectedRemoteController();
        if (remoteController == null) return;
        if (remoteController.refreshLayout) {
            if (model.platformId == 10) {
                remoteController.refreshLayout(selectedMachine);
            }
            else {
                remoteController.refreshLayout();
            }
        }
        refreshVmWrapperLayout();
        if ((!enableAutomaticScreenResizing && !force) || labConsole.fullScreenMessageShown || model.isTakeControl || model.isMonitor || model.contentOnly) return;
        if (!selectedMachine || !selectedMachine.EnableDynamicScreenResizing || selectedMachineState !== 20) return;
        var idealSize = remoteController.getValidScreenSize(Math.floor($vmWrapper.width()), Math.floor($vmWrapper.height()));
        if (idealSize.width <= 0 || idealSize.height <= 0) return;
        //no need to continue if this resolution was recently attempted        
        if (selectedMachine.lastAttemptedScreenWidth === idealSize.width && selectedMachine.lastAttemptedScreenHeight === idealSize.height) return;
        var currentSize = remoteController.getSize();
        if (idealSize.width === currentSize.width && idealSize.height === currentSize.height) return;
        selectedMachine.lastAttemptedScreenWidth = idealSize.width;
        selectedMachine.lastAttemptedScreenHeight = idealSize.height;
        var zoomAdjustedHeight = idealSize.height;
        var zoomAdjustedWidth = idealSize.width;
        if (currentSize.zoom && currentSize.zoom !== 100) {
            zoomAdjustedHeight = Math.ceil(idealSize.height * (currentSize.zoom / 100));
            zoomAdjustedWidth = Math.ceil(idealSize.width * (currentSize.zoom / 100));
        }
        ajaxPost("/VirtualizationClient/SetScreenResolution/" + model.labInstanceId + "/?machineId=" + selectedMachine.ProfileId + "&w=" + zoomAdjustedWidth + "&h=" + zoomAdjustedHeight,
            function () {
                remoteController.setSize(zoomAdjustedWidth, zoomAdjustedHeight);
                refreshVmWrapperLayout();
            }
        );
    }

    function fitWindowToMachine(notifyServer, alertOnFailure) {
        windowFittingInProgress = true;
        let remoteController = getSelectedRemoteController();
        if (remoteController == null) return;
        let vmSize = remoteController.getSize();
        if (isNaN(vmSize.width) || isNaN(vmSize.height) || vmSize.width == null || vmSize.height == null) {
            if (alertOnFailure) {
                alert("Sorry, the size of your virtual machine cannot currently be determined.");
            }
            return;
        }
        var idealWindowSize = getIdealWindowSize(vmSize);
        if (model.isChildClient) {
            window.parent.fitWindowToConsole(idealWindowSize.width, idealWindowSize.height, function () {
                refreshVmWrapperLayout();
                if (notifyServer) {
                    ajaxPost("/VirtualizationClient/SaveMachineSize/" + model.labInstanceId + "/?w=" + Math.ceil(vmSize.width) + "&h=" + Math.ceil(vmSize.height));
                }
                window.setTimeout(function () {
                    windowFittingInProgress = false;
                }, 1000);
            });
            return;
        }
        var win = $(window);
        if (idealWindowSize.width !== win.width() || idealWindowSize.height !== win.height()) {
            window.resizeBy(-1, -1); //necessary if currently maximized. 
            window.setTimeout(function () {
                idealWindowSize = getIdealWindowSize(vmSize);
                var widthDelta = idealWindowSize.width - win.width();
                var heightDelta = idealWindowSize.height - win.height();
                window.resizeBy(widthDelta, heightDelta);
                refreshVmWrapperLayout();
                if (notifyServer) {
                    ajaxPost("/VirtualizationClient/SaveMachineSize/" + model.labInstanceId + "/?w=" + Math.ceil(vmSize.width) + "&h=" + Math.ceil(vmSize.height));
                }
                window.setTimeout(function () {
                    windowFittingInProgress = false;
                }, 1000);
            }, 200);
        }
    }

    function getIdealWindowSize(vmSize) {
        var vmHeight = vmSize.height;
        var vmWidth = vmSize.width;
        if (vmSize.zoom && vmSize.zoom != 100) {
            vmHeight = Math.ceil(vmSize.height / (vmSize.zoom / 100));
            vmWidth = Math.ceil(vmSize.width / (vmSize.zoom / 100));
        }
        var contentHeight = vmHeight + $("#titleBar").outerHeight();
        var contentWidth = vmWidth;
        if (model.showNavigationBar) {
            contentWidth += $("#navigationBar").outerWidth();
        }
        return { width: contentWidth, height: contentHeight };
    }

    var vmWrapperScrollbarsHidden = false;

    function disableVmWrapperScrollbars() {
        vmWrapperScrollbarsHidden = true;
        if ($vmWrapper) {
            $vmWrapper.css("overflow", "hidden");
        }
    }

    function refreshVmWrapperLayout() {
        if (vmWrapperScrollbarsHidden) {
            return;
        }
        var vmWrapperElement = $vmWrapper[0];
        vmWrapperElement.style.overflow = "hidden";
        vmWrapperElement.scrollHeight = 0;
        vmWrapperElement.scrollWidth = 0;
        vmWrapperElement.style.overflow = "auto";
    }

    var modalScrollInitialized = false;

    function showDialog(content, options) {

        labConsole.dialogShown = true;
        if (model.isChildClient && model.layoutVersion > 1) {
            let dialogOptions = { title: "title", content: content };
            if (options.title) {
                dialogOptions.title = options.title;
            }
            if (options.open) { dialogOptions.open = options.open; }
            if (options.close) { dialogOptions.close = options.close; }
            if (options.buttons) {

                dialogOptions.buttons = [];
                let propertyNames = Object.getOwnPropertyNames(options.buttons);
                let primarySet = false;
                for (var i = 0; i < propertyNames.length; i++) {
                    var propertyName = propertyNames[i];
                    let newButton = { text: propertyName, click: options.buttons[propertyName] }
                    if (!primarySet) {
                        newButton.primary = true;
                        primarySet = true;
                    }
                    dialogOptions.buttons.push(newButton);
                }

            }
            window.parent.showDialog(dialogOptions);
            return;
        }

        if (selectedMachine && !selectedMachine.ConnectViaRdp) {
            if (!model.isMonitor) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.setViewOnly(true);
                }                
            }
        } else if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
            $vmWrapper.find("#resource" + selectedContentResource.Id + "Frame").hide();
        }
        if (model.hasSideBySideResources && !selectedSideBySideResourceSupportsOverlay()) {
            $("#sideBySideResourceWrapper").hide();
        }
        var defaults = {
            width: 700,
            height: 500,
            modal: true,
            buttons: null,
            closeOnEscape: false,
            resize: function () {
                if (model.layoutVersion === 1) {
                    $modalDialog.mCustomScrollbar("update");
                }
            }
        };
        $.extend(defaults, options);
        defaults.close = function () {
            labConsole.dialogShown = false;
            if ($modalDialog.is(":visible")) {
                $modalDialog.dialog("close");
            }
            if (selectedMachine && !selectedMachine.ConnectViaRdp && selectedMachineState !== 0) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.show();
                    if (!model.isMonitor) {
                        remoteController.setViewOnly(false);
                    }
                }

            } else if (selectedContentResource && selectedContentResource.Url.toLowerCase().indexOf(".pdf") > 0) {
                $vmWrapper.find("#resource" + selectedContentResource.Id + "Frame").show();
            }
            if (model.hasSideBySideResources && !selectedSideBySideResourceSupportsOverlay()) {
                $("#sideBySideResourceWrapper").show();
            }
            if (options.close) {
                options.close();
            }
        };
        defaults.open = function () {
            $modalDialog.mCustomScrollbar("update");
            if (options.open) {
                options.open();
            }
        };
        $modalDialog.find("#modalContent").html(content);
        $modalDialog.dialog(defaults);
    }

    function refreshDialogScrollbars() {
        if (model.layoutVersion === 1) {
            $modalDialog.mCustomScrollbar("update");
        }
    }

    function getJqueryObjectFromDialog(id) {
        return model.isChildClient && model.layoutVersion > 1 ? $(parent.getElementById(id)) : $(`#${id}`);
    }

    function closeDialog(animate = true) {
        if (model.isChildClient && model.layoutVersion > 1) {
            window.parent.closeDialog(animate);
            focusSelectedRemoteController();
            labConsole.dialogShown = false;
        } else if ($modalDialog.is(":visible")) {
            $modalDialog.dialog("close");
            focusSelectedRemoteController();
        }
    }

    function hideV2Dialog() {
        if (model.isChildClient && model.layoutVersion > 1) {
            window.parent.hideDialogIfVisible();
        }
    }

    function showV2Dialog() {
        if (model.isChildClient && model.layoutVersion > 1) {
            window.parent.showDialogIfHidden();
        }
    }

    function selectTab(tab) {
        return;
        if (tab > 3) {
            tab = 3;
        } else if (tab < 0) {
            tab = 0;
        }
        selectedNavigationTab = tab;
        var $tabHeading;
        var $tab;
        switch (selectedNavigationTab) {
            case 0:
                $tabHeading = $("#tabHeadingContent");
                $tab = $("#tabContent");
                break;
            case 1:
                $tabHeading = $("#tabHeadingMachines");
                $tab = $("#tabMachines");
                break;
            case 2:
                $tabHeading = $("#tabHeadingSupport");
                $tab = $("#tabSupport");
                break;
            case 3:
                $tabHeading = $("#tabHeadingCloudResources");
                $tab = $("#tabCloudResources");
                break;
            default:
                return;
        }
        if ($tabHeading.hasClass("selected")) {
            return;
        }
        $tabHeading.siblings().removeClass("selected");
        $tabHeading.addClass("selected");
        if (model.hasSideBySideResources) {
            $tab.css({ position: "relative", left: 0 });
            $tab.siblings().css({ position: "absolute", left: "-99999px" });
        } else {
            $tab.show();
            $tab.siblings().hide();
        }

        if (tab === 1 && !model.useStaticThumbnails) {
            updateMachineThumbnails();
        }
        if (model.examIsVisible) {
            var navBarScrollableCssClass = labData.State === 170 ? "examScoringNavPadding" : "examNavPadding";
            if (tab === 0) {
                $("#examNav").show();
                $("#navigationBarScrollable").addClass(navBarScrollableCssClass);
            } else {
                $("#examNav").hide();
                $("#navigationBarScrollable").removeClass(navBarScrollableCssClass);
            }
        }
        if (model.layoutVersion === 1) {
            $("#navigationBarScrollable").mCustomScrollbar("update");
        }
    }

    function getMachineByProfileId(id) {
        var machines = labData.Machines;
        var length = machines.length;
        for (var i = 0; i < length; i++) {
            var machine = machines[i];
            if (machine.ProfileId == id) {
                return machine;
            }
        }
        return null;
    }

    function getMachines() {
        return labData.Machines;
    }

    function getRemovableMedia() {
        return labData.RemovableMedia;
    }

    function selectMachineBySelectionId(selectionId, notifyServer) {
        var machines = labData.Machines;
        var numMachines = machines.length;
        for (var i = 0; i < numMachines; i++) {
            var machine = machines[i];
            if (machine.SelectionId === selectionId) {
                selectMachine(machine, notifyServer);
            }
        }
    }

    function getConsoleSize() {
        if ($rdpEndpointWrapper.is(":visible")) {
            return { width: $rdpEndpointWrapper.outerWidth(), height: $rdpEndpointWrapper.outerHeight() + 24 };
            return;
        }

        if (!$vmWrapper.is(":visible") || selectedMachine === null || labConsole.complete) {
            return null;
        }
        let remoteController = getSelectedRemoteController();
        if (remoteController.getConnectionState() === 0) {
            return null;
        }
        let vmSize = remoteController.getSize();
        let extraHeight = 24;
        return { height: vmSize.height + extraHeight, width: vmSize.width };
    }

    function loadOpticalMediaOnSelectedMachine(mediaId) {
        var $machines = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        var $machine = $machines.find("#machine" + selectedMachine.ProfileId);
        var $dvdSelect = $machine.find("div.dvdDrive select");
        $dvdSelect.val(mediaId);
        doMediaAction("/VirtualizationClient/AttachOpticalMedia/" + model.labInstanceId + "/?machineId=" + selectedMachine.ProfileId + "&mediaId=" + mediaId);
    }

    function loadFloppyMediaOnSelectedMachine(mediaId) {
        var $machines = model.isChildClient
            ? window.parent.getResourcesExtensionsPlaceHolder()
            : $("#machines");
        var $machine = $machines.find("#machine" + selectedMachine.ProfileId);
        var $floppySelect = $machine.find("div.floppyDrive select");
        $floppySelect.val(mediaId);
        doMediaAction("/VirtualizationClient/AttachFloppyMedia/" + model.labInstanceId + "/?machineId=" + selectedMachine.ProfileId + "&mediaId=" + mediaId,
            function () {
                clearOtherFloppySelections(selectedMachine, mediaId);
            });
    }

    function clearOtherFloppySelections(machine, mediaId) {
        $("#machines div.machine").each(function () {
            var $this = $(this);
            var currentMachine = $this.data("machine");
            if (currentMachine && currentMachine.ProfileId != machine.ProfileId) {
                var floppySelect = $this.find("div.floppyDrive select");
                if (floppySelect.val() == mediaId) {
                    floppySelect.val("-2");
                }
            }
        });
    }

    function ejectOpticalMediaOnSelectedMachine() {
        var $machine = $("#machine" + selectedMachine.ProfileId);
        var $dvdSelect = $machine.find("div.dvdDrive select");
        $dvdSelect.val("-2");
        doMediaAction("/VirtualizationClient/EjectOpticalMedia/" + model.labInstanceId + "/?machineId=" + selectedMachine.ProfileId);
    }

    function ejectFloppyMediaOnSelectedMachine() {
        let $machine = $("#machine" + selectedMachine.ProfileId);
        let $floppySelect = $machine.find("div.floppyDrive select");
        $floppySelect.val("-2");
        doMediaAction("/VirtualizationClient/EjectFloppyMedia/" + model.labInstanceId + "/?machineId=" + selectedMachine.ProfileId);
    }

    function sendPastedText(text, canUseVmClipboard) {
        if (selectedMachine) {
            if (selectedMachine.window && !selectedMachine.window.closed) {
                selectedMachine.window.labConsole.typeText(text, canUseVmClipboard);
            } else if (selectedMachine?.sshActive) {
                let sshClient = getSshClientInstance("sshClient" + selectedMachine.ProfileId);
                if (sshClient !== null) {
                    if (text === "CTRL-Z") {
                        sshClient.sendCtrlZ();
                    } else if (text === "CTRL-C") {
                        sshClient.sendCtrlZ();
                    } else {
                        sshClient.write(text);
                    }
                }
            } else {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null && remoteController.canSendText && remoteController.canSendText()) {
                    remoteController.sendText(text, canUseVmClipboard);
                } else {
                    let url = "/VirtualizationClient/Paste/?machineName=" + encodeURIComponent(selectedMachine.InstanceName) + "&labInstanceKey=" + model.key;
                    $.ajax({
                        url: url
                        , data: { payload: text }
                        , type: "POST"
                        , dataType: "json"
                        , jsonp: false
                    });
                }
                if (remoteController != null) {
                    remoteController.focus();
                }
            }
        } else if (selectedEndpoint?.ConnectionProtocol == ConnectionProtocol.SSH || selectedEndpoint?.ConnectionProtocol == ConnectionProtocol.Powershell) {
            let sshClient = getSshClientInstance(`sshEndpointClient${selectedEndpoint.Id}`);
            if (sshClient !== null) {
                sshClient.write(text);
            }
        } else if (selectedEndpoint?.ConnectionProtocol == ConnectionProtocol.RDP) {
            let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
            if (rdpClient!= null) {
                rdpClient.sendText(text);
            }
        } else if (selectedEndpoint?.ConnectionProtocol == ConnectionProtocol.Telnet) {
            let telnetClient = getTelnetClientInstance(`telnet-client-endpoint-${selectedEndpoint.Id}`);
            if (telnetClient != null) {
                telnetClient.sendText(text);
            }
        } else if (selectedEndpoint?.ConnectionProtocol == ConnectionProtocol.VNC) {
            let vncClient = getVncClientInstance(`vnc-client-endpoint-${selectedEndpoint.Id}`);
            if (vncClient != null) {
                vncClient.sendText(text);
            }
        }  
    }

    function sendTextToEndpoint(endpoint, text) {
        if (endpoint.ConnectionProtocol === ConnectionProtocol.SSH || endpoint.ConnectionProtocol === ConnectionProtocol.Powershell) {
            writeTextInSshEndpoint(endpoint, text);
        } else if (endpoint.ConnectionProtocol === ConnectionProtocol.RDP) {
            sendTextToRdpEndpoint(endpoint, text);
        } else if (endpoint.ConnectionProtocol === ConnectionProtocol.Telnet) {
            sendTextToTelnetEndpoint(endpoint, text);
        } else if (endpoint.ConnectionProtocol === ConnectionProtocol.VNC) {
            sendTextToVncEndpoint(endpoint, text);
        }
    }
    function writeTextInSshEndpoint(endpoint, text) {
        let sshClient = getSshClientInstance(`sshEndpointClient${endpoint.Id}`);
        if (sshClient !== null) {
            if (text === "CTRL-Z") {
                sshClient.sendCtrlZ();
            } else if (text === "CTRL-C") {
                sshClient.sendCtrlZ();
            } else {
                sshClient.write(text);
            }
        }
    }

    function sendTextToRdpEndpoint(endpoint, text) {
        let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${endpoint.Id}`);
        if (rdpClient !== null) {
            rdpClient.sendText(text);
        }
    }

    function sendTextToTelnetEndpoint(endpoint, text) {
        let telnetClient = getTelnetClientInstance(`telnet-client-endpoint-${endpoint.Id}`);
        if (telnetClient !== null) {
            telnetClient.writeLine(text);
        }
    }

    function sendTextToVncEndpoint(endpoint, text) {
        let vncClient = getVncClientInstance(`vnc-client-endpoint-${endpoint.Id}`);
        if (vncClient !== null) {
            vncClient.sendText(text);
        }
    }

    function executeCommandOnSelectedMachine(commandText, options) {
        $.ajax({
            url: "/VirtualizationClient/ExecuteMachineCommand/" + model.labInstanceId,
            type: "POST",
            dataType: 'json',
            data: { machineId: selectedMachine.ProfileId, commandText: commandText, options: options },
            cache: false
        }).always(function (response) {
            if (response && response.Success) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.focus();
                }
            } else {
                alert(response && response.Error ? response.Error : "Sorry an error occurred");
            }
        });
    }

    function doMediaAction(url, onSuccess, onError) {
        if (model.contentOnly) { return; }
        $("#quickMessage").html(Text.Loading);
        ajaxPost(url, function (response) {
            $("#quickMessage").html("");
            if (response.Success) {
                if (onSuccess) { onSuccess(); }
            } else {
                if (onError) { onError(); }
            }
        },
            function () {
                $("#quickMessage").html("");
                if (onError) { onError(); }
            }
        );
    }

    function writeCookie(name, value, days) {
        var cookie = name + "=" + value;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            cookie += "; expires=" + date.toGMTString();
        }
        cookie += "; path=/";
        document.cookie = cookie;
    }

    function readCookie(name) {
        var nameEq = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEq) == 0) return c.substring(nameEq.length, c.length);
        }
        return null;
    }

    function applyTheme(themeName, themeStyleSheetUrl) {
        if (themeStyleSheetUrl) {
            $("#themeStylesheet").attr("href", themeStyleSheetUrl);
        } else {
            $("#colorsStylesheet").attr("href", "/css/virtualization-client/" + themeName + "/Colors.css?v=1");
            $("#jqueryUiStylesheet").attr("href", "/css/virtualization-client/" + themeName + "/jquery-ui-1.10.4.min.css");
        }

    }

    /**
     * Determines whether the resize operation should be skipped based on the current
     * application and UI state. This is typically used to prevent resizing during
     * transitional or restricted states (e.g., fullscreen message shown, remote control, etc.).
     *
     * @returns {boolean} True if the resize should be skipped; false otherwise.
     */
    function shouldSkipResize() {
        return windowFittingInProgress ||
            labConsole.fullScreenMessageShown ||
            model.isMonitor ||
            model.isTakeControl ||
            model.contentOnly ||
            labConsole.complete ||
            labConsole.remoteStateChangeInProgress ||
            !labConsole.hostIsOnline;
    }

    /**
     * Removes the global $resizeOverlay element if it's present,
     * and optionally waits before removing it. After removal,
     * attempts to refocus a previously focused element if applicable.
     *
     * @param {HTMLElement} focusedElement - The element to refocus after the overlay is removed.
     * @param {boolean} [shouldWait=true] - Whether to wait 500ms before removing the overlay.
     */
    function removeResizeOverlay(focusedElement, shouldWait = true) {
        const removeOverlayAndRefocus = () => {
            $resizeOverlay.remove();

            if (focusedElement && focusedElement !== document.activeElement) {
                focusedElement.focus();
            }
        };

        if ($resizeOverlay.length) {
            shouldWait
                ? setTimeout(removeOverlayAndRefocus, 500)
                : removeOverlayAndRefocus();
        }
    }

    /**
     * Attempts to resize an SSH client instance if the client exists.
     *
     * @param {string} clientKey - Unique identifier used to retrieve the SSH client instance.
     */
    function resizeSshClientIfExists(clientKey) {
        const sshClient = getSshClientInstance(clientKey);

        if (sshClient !== null) {
            sshClient.resize();
        }
    }

    /**
     * Handles resizing SSH clients for the selected machine and endpoint, if applicable.
     */
    function resizeSSHClients() {
        // Resize for machine SSH client
        if (selectedMachine?.sshActive) {
            resizeSshClientIfExists("sshClient" + selectedMachine.ProfileId);
        }

        // Resize for endpoint SSH client
        if (selectedEndpoint?.ConnectionProtocol === 10) {
            resizeSshClientIfExists("sshEndpointClient" + selectedEndpoint.Id);
        }
    }

    function setupWindowEventHandlers() {
        let autoResizeVmTimeout;

        $(window).on("unload", function () {
            labConsole.closing = true;
            for (let remoteController of _remoteControllers) {
                remoteController.disconnect(true);
            }
            if (contentWindow) {
                contentWindow.close();
            }
            closeAllChildWindows();
            if (model.isChildClient) {
                window.parent.childWindowClosing();
            }
            if (window.opener?.labConsole) {
                window.opener.labConsole.spawnedWindowClosed();
            }
        });

        $(window).on("resize", function () {
            let focusedElement = document.activeElement;

            $vmWrapper.css("overflow", "hidden").append($resizeOverlay);

            if (model.hasSideBySideResources) {
                fitSideBySideResource();
            }

            if (shouldSkipResize()) {
                removeResizeOverlay(focusedElement);

                return;
            }

            if (autoResizeVmTimeout !== null) {
                window.clearTimeout(autoResizeVmTimeout);
                autoResizeVmTimeout = null;
            }

            autoResizeVmTimeout = window.setTimeout(() => {
                refreshVmWrapperLayout();
                refreshRemoteControllerLayout();
                resizeSSHClients();
                setCursorOffset();
                removeResizeOverlay(focusedElement);
            }, 500);
        });

        window.onbeforeunload = function () {
            if (model.isChildClient || labConsole.complete || labConsole.fullScreenMessageShown || model.enableNavigationWarning === false || model.isMonitor || model.isTakeControl || model.contentOnly || model.enableContentEditing) {
                return;
            }
            if (labData.CanBeMarkedComplete) {
                return "You will not receive credit for your lab until you have completed all tasks.";
            }
            return "Your lab environment is still running. To exit, please make a choice from the Exit menu.";
        };
    }

    function waitForJob(job, pollInterval, onComplete, onError, onCancelled) {
        switch (job.Status) {
            case 0:
                window.setTimeout(function () {
                    $.ajax({
                        url: "/Job/" + job.Id,
                        type: "POST",
                        dataType: "json",
                        data: {},
                        cache: false
                    }).always(function (response) {
                        if (response && response.Success) {
                            waitForJob(response.Job, pollInterval, onComplete, onError, onCancelled);
                        } else {
                            if (onError) onError(response);
                        }
                    });
                }, pollInterval);
                break;
            case 10:
                if (onComplete) onComplete(JSON.parse(job.ResultData));
                break;
            case 20:
                if (onCancelled) onCancelled(job);
                break;
            case 30:
                if (onError) onError(job);
                break;
        }
    }

    function setupUiEventHandlers() {

        $("#poorConnectionWarning").on("mouseenter focus", function () {
            $("#poorConnectionWarning").data("hover", true);
            let $poorConnectionWarningIndicator = $("#poorConnectionWarningIndicator");
            $poorConnectionWarningIndicator.attr("aria-expanded", "true")
            let position = $poorConnectionWarningIndicator.offset();
            let indicatorWidth = $poorConnectionWarningIndicator.outerWidth();
            let $poorConnectionTooltip = $("#poorConnectionTooltip");
            let toolTipWidth = $poorConnectionTooltip.outerWidth();
            $poorConnectionTooltip.show()
            $poorConnectionTooltip.css({ left: position.left - (toolTipWidth / 2) + (indicatorWidth / 2) });
        }).on("mouseleave onfocusout", function () {
            $("#poorConnectionWarning").data("hover", false);
            setTimeout(function () {
                if ($("#poorConnectionWarning").data("hover") != true) {
                    $("#poorConnectionWarningIndicator").attr("aria-expanded", "false");
                    $("#poorConnectionTooltip").hide();
                }
            }, 500);

        });;

        $("#notificationsLink").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if ($(this).hasClass("active")) {
                var $window = $(window);
                var width = $window.width() * .85;
                var height = $window.height() * .80;
                showDialog("<span class='ui-helper-hidden-accessible'><input type='text'/></span><span class='activityIndicator-s'>Loading...</span>", {
                    title: "Notifications",
                    width: width,
                    height: height
                });
                $.ajax({
                    url: "/Lab/GetNotifications/" + model.labInstanceId,
                    type: "POST",
                    dataType: "json",
                    data: {},
                    cache: false
                }).always(function (response) {
                    if (response && response.Success) {
                        var notifications = response.Notifications;
                        var numNotifications = notifications.length;
                        var html = "<div class='notifications'>";
                        if (numNotifications === 0) {
                            html += "<div class='noNotifications'>You have no notifications</div>";
                        } else {
                            for (var i = 0; i < numNotifications; i++) {
                                var notification = notifications[i];
                                html += "<div data-id='" + notification.Id + "' class='notification'><div class='notificationDate'>" + notification.Created + "</div><div class='notificationBody'>" + notification.Text + "</div></div>";
                            }
                        }
                        html += "</div>";
                        closeDialog();
                        showDialog(html, {
                            title: "Notifications",
                            width: width,
                            height: height,
                            buttons: {
                                "Close": closeDialog
                            },
                            open: function () {

                            }
                        });
                    } else {
                        closeDialog();
                        alert(response && response.Error ? response.Error : "Sorry an error occurred");
                    }
                });
            }
        });

        $(document).on("click keypress", ".typeText", function (e) {
            if (!a11yClick(e)) return;
            let $element = $(this);
            let text = $element.text();
            sendPastedText(text);
        });

        let $machineRemoteController = $("#machineRemoteController");

        if (model.isChildClient) {
            if ($machineRemoteController.length > 0) {
                let $machineRemoteControllerWrapper = $("#machineRemoteControllerWrapper");
                let placeHolder = window.parent.getHelpExtensionsPlaceHolder();
                placeHolder.append($machineRemoteControllerWrapper.children());
            }
        }

        $machineRemoteController.change(function () {
            disableNavigationWarning();
            if (model.useCookies) {
                writeCookie("RC" + model.platformId, this.value, 60);
            }
            if (this.value === "200") {
                if (model.isChildClient) {
                    window.parent.location = "/Setup/" + model.key + "?rc=" + this.value;
                } else {
                    window.location = "/Setup/" + model.key + "?rc=" + this.value;
                }
            } else {
                if (model.isChildClient) {
                    window.parent.location = "/LabClient/" + model.key + "?rc=" + this.value;
                } else {
                    window.location = "/VirtualizationClient/" + model.key + "?rc=" + this.value;
                }
            }
        });

        $("#theme").change(function () {
            model.themeId = parseInt(this.value);
            var $selectedOption = $(this).find(":selected");
            var themeName = $selectedOption.attr("data-name");
            if (model.useCookies) {
                writeCookie("Theme", model.themeId, 60);
            }
            applyTheme(themeName);
            if (contentWindow && contentWindow.labConsole) {
                contentWindow.labConsole.setTheme(themeName);
            }
            if (!model.isMonitor && !model.contentOnly) {
                ajaxPost("/Lab/SaveTheme/" + model.labInstanceId + "/?theme=" + model.themeId);
            }
        });

        $("#autoShowAlerts").change(function () {
            if (this.checked) {
                autoShowAlerts = true;
                if (model.useCookies) {
                    writeCookie("ShowAlerts", "true", 60);
                }
            } else {
                autoShowAlerts = false;
                if (model.useCookies) {
                    writeCookie("ShowAlerts", "false", 60);
                }
            }
        });

        $("#enableAutomaticScreenResizing").change(function () {
            if (this.checked) {
                enableAutomaticScreenResizing = true;
                if (model.useCookies) {
                    writeCookie("ScreenResizing", "true", 60);
                }
                refreshRemoteControllerLayout();
            } else {
                enableAutomaticScreenResizing = false;
                if (model.useCookies) {
                    writeCookie("ScreenResizing", "false", 60);
                }
            }
        });

        $("#showContentInSeparateWindow").change(function () {
            if (this.checked) {
                var url = model.contentOnly
                    ? "/VirtualizationClient/Instructions/contentonly/?labProfileId=" + model.labProfileId
                    : "/VirtualizationClient/Instructions/" + model.key;
                var $window = $(window);
                contentWindow = window.open(url, 'contentWindow', 'width=' + $window.width() + ',height=' + $window.height() + ',status=no,resizable=1,scrollbars=0');
                contentWindow.focus();
            } else if (contentWindow) {
                contentWindow.close();
            }
        });

        $("#tabHeadings").on("click", "span.tabHeading", function () {
            var tab = parseInt($(this).attr("data-id"));
            selectTab(tab);
            if (!model.isMonitor && !model.contentOnly) {
                $.ajax({
                    url: "/VirtualizationClient/SelectNavTab/" + model.labInstanceId + "/?tab=" + tab,
                    type: "POST",
                    dataType: 'json',
                    data: {},
                    cache: false
                });
            }
        });

        $("#closeNotification").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            closeNotification();
        });

        function configureMenu(openerId, menuId, maskId, onOpen, onMenuItemClick) {
            var shown = false;
            var hideTimeout = null;
            var $opener = $("#" + openerId);
            var $menu = $("#" + menuId);
            var $mask = $("#" + maskId);
            function clearHideTimeout() {
                if (hideTimeout != null) {
                    window.clearTimeout(hideTimeout);
                    hideTimeout = null;
                }
            }
            function setHideTimeout() {
                hideTimeout = window.setTimeout(function () {
                    if (shown) {
                        $menu.hide();
                        $opener.attr("aria-expanded", "false");
                        shown = false;
                    }
                }, 500);
            }
            $opener.on("click keypress", function (e) {
                if (!a11yClick(e)) return;
                clearHideTimeout();
                if (shown) {
                    $menu.hide();
                    $opener.attr("aria-expanded", "false");
                    shown = false;
                } else {
                    if (onOpen) {
                        onOpen($opener, $menu);
                    }
                    $opener.attr("aria-expanded", "true");
                    $menu.find("div.children").hide();
                    $menu.show();
                    $mask.height($menu.height());
                    if (e.key === "Enter" || e.key === " ")
                        $menu.find(".menuItem")[0].focus();
                    shown = true;
                }
            });
            $opener.on("keyup", function (e) {
                if (e.key === "Escape") {
                    $menu.hide();
                    $opener.attr("aria-expanded", "false");
                    shown = false;
                }
            });
            $opener.on("mouseenter focus", function () {
                clearHideTimeout();
            }).on("mouseleave onfocusout", function () {
                clearHideTimeout();
                setHideTimeout();
            });
            $menu.on("mouseenter focus", function () {
                clearHideTimeout();
            }).on("mouseleave", function () {
                clearHideTimeout();
                setHideTimeout();
            }).on("focusout", function (e) {
                if ($(this).find(e.relatedTarget).length == 0) {
                    clearHideTimeout();
                    setHideTimeout();
                }
            });
            $menu.on("click keypress", ".menuItem", function (e) {
                if (!a11yClick(e)) return;

                var $this = $(this);
                if ($this.hasClass("parent")) {
                    return;
                }
                if (onMenuItemClick) {
                    var args = { handled: false };
                    onMenuItemClick($this, args);
                    if (args.handled) {
                        return;
                    }
                }
                $menu.hide();
                $opener.attr("aria-expanded", "false");
                shown = false;
                clearHideTimeout();
            });
            $menu.on("keyup", ".menuItem", function (e) {
                e.stopPropagation();
                if (e.key === "Escape") {
                    $menu.hide();
                    $opener.attr("aria-expanded", "false");
                    $opener.focus();
                    shown = false;
                }
                else if (e.key === "ArrowLeft") {
                    var $this = $(this);
                    if (!$this.is(".parent")) {
                        toggleSubMenu($this);
                        if ($this.parents(".menuItem.parent"))
                            $this.parents(".menuItem.parent").focus();
                    }
                }
                else if (e.key === "ArrowUp") {
                    let prev = $(this).prevAll(".menuItem:visible")[0];
                    if (prev) prev.focus();
                }
                else if (e.key === "ArrowDown") {
                    let next = $(this).nextAll(".menuItem:visible")[0];
                    if (next) next.focus();
                }
            });
            $menu.on("mouseenter", ".menuItem.parent", function () {
                var $this = $(this);
                toggleSubMenu($this);
            });
            $menu.on("click keypress", ".menuItem.parent", function (e) {
                if (!a11yClick(e)) return;
                var $this = $(this);
                toggleSubMenu($this, true);
            });
            $menu.on("keyup", ".menuItem.parent", function (e) {
                e.stopPropagation();
                if (e.key === "Escape") {
                    var $this = $(this);
                    if ($this.children(".children").is(":visible")) {
                        toggleSubMenu($this);
                        $this.focus();
                    }
                    else {
                        $menu.hide();
                        $opener.attr("aria-expanded", "false");
                        $opener.focus();
                        shown = false;
                    }
                }
                else if (e.key === "ArrowRight") {
                    var $this = $(this);
                    toggleSubMenu($this, true);
                }
            });
            $menu.on("keyup", ".children .menuItem", function (e) {
                if (e.key === "ArrowRight") {
                    e.stopPropagation();
                    return;
                }
                else if (e.key === "ArrowUp") {
                    let prev = $(this).prevAll(":visible")[0];
                    if (prev) prev.focus();
                    e.stopPropagation();
                }
                else if (e.key === "ArrowDown") {
                    let next = $(this).nextAll(":visible")[0];
                    if (next) next.focus();
                    e.stopPropagation();
                }
            })
            $menu.on("focusout", ".children", function (e) {
                if ($(this).find(e.relatedTarget).length == 0) {
                    $(this).hide();
                    e.stopPropagation();
                }
            });
            $menu.on("mouseleave", ".menuItem.parent", function () {
                $(this).children(".children").hide();
            });
        }

        function toggleSubMenu($this, keyFocus) {
            $this.siblings(".menuItem.parent").children(".children").hide();
            $this.siblings(".menuItem.parent").attr("aria-expanded", "false");
            var $children = $this.find(".children");
            if ($children.is(':visible')) {
                $this.attr("aria-expanded", "false");
                $children.hide();
            }
            else {
                $this.attr("aria-expanded", "true");
                var css = isRtl
                    ? { "right": ($this.outerWidth() - 4) + "px", "marginTop": (-$this.outerHeight() + 1) + "px" }
                    : { "left": ($this.outerWidth() - 4) + "px", "marginTop": (-$this.outerHeight() + 1) + "px" };
                $children.css(css).show();
                $children.find(".overlayMask").height($children.outerHeight()).width($children.width() - 1);
                if (keyFocus && $children.find(".menuItem:visible").length > 0) {
                    $children.find(".menuItem:visible")[0].focus();
                }
            }
        }

        configureMenu("machineName", "machineSelectMenu", "machineSelectMenuMask",
            function ($opener, $menu) {
                $menu.css("left", $opener.offset().left - 4 + "px");
            },
            function ($menuItem, args) {
                if ($menuItem.hasClass("selected")) {
                    args.handled = true;
                    return;
                }
                var machine = $menuItem.data("machine");
                if (machine != null) {
                    selectMachine($menuItem.data("machine"), !model.contentOnly);
                    return;
                }
                var resource = $menuItem.data("resource");
                if (resource != null) {
                    selectContentResource(resource, !model.contentOnly);
                }
            }
        );

        configureMenu("machineCommands", "machineCommandsMenu", "machineCommandsMenuMask", function ($opener, $menu) {
            $menu.css("right", $opener.position().right - 4 + "px");
            if (isRtl) {
                $menu.css("left", ($opener.position().left - $menu.width() + $opener.width() + 12) + "px");
            } else {
                $menu.css("left", $opener.position().left - 4 + "px");
            }
        });

        configureMenu("exit", "exitMenu", "exitMenuMask");

        configureMenu("displayMenuTitle", "displayMenu", "displayMenuMask", function ($opener, $menu) {
            if (isRtl) {
                $menu.css("left", ($opener.position().left - $menu.width() + $opener.width() + 12) + "px");
            } else {
                $menu.css("left", $opener.position().left - 4 + "px");
            }
        });

        configureMenu("developerMenuTitle", "developerMenu", "developerMenuMask", function ($opener, $menu) {
            if (isRtl) {
                $menu.css("left", ($opener.position().left - $menu.width() + $opener.width() + 12) + "px");
            } else {
                $menu.css("left", $opener.position().left - 4 + "px");
            }
        });

        $("#showVirtualKeyboard").on("click", function () {
            $("#virtualKeyboard").virtualKeyboard("toggle");
        });

        $("#virtualKeyboard").virtualKeyboard({
            onKeyPress: function (keyCode) {
                if (selectedMachine != null) {
                    let rc = getSelectedRemoteController();
                    if (rc != null) {
                        rc.keyPress(keyCode);
                    }
                } else if (selectedEndpoint != null && selectedEndpoint.ConnectionProtocol == ConnectionProtocol.RDP) {
                    let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
                    if (rdpClient != null) {
                        rdpClient.keyPress(keyCode);
                    }
                }
            },
            onSendKeyCombo: function (keyCodes) {
                if (selectedMachine != null) {
                    let rc = getSelectedRemoteController();
                    if (rc != null) {
                        rc.sendKeyCombo(keyCodes);
                    }
                } else if (selectedEndpoint != null && selectedEndpoint.ConnectionProtocol == 20) {
                    let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
                    if (rdpClient != null) {
                        rdpClient.sendKeyCombo(keyCodes);
                    }
                }
            }
        });

        $("#ctlAltDel, .ctrlAltDel").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (selectedMachine) {
                if (selectedMachine.window && !selectedMachine.window.closed) {
                    selectedMachine.window.labConsole.sendCtrlAltDelete();
                } else {
                    let remoteController = getSelectedRemoteController();
                    if (remoteController != null) {
                        remoteController.sendCtrlAltDelete();
                    }
                }
            } else if (selectedEndpoint?.ConnectionProtocol == 20) {
                let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
                if (rdpClient != null) {
                    rdpClient.sendCtrlAltDelete();
                }
            }
        });

        $(".machine .openInNewWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let machine = $(this).closest(".machine").data("machine");
            if (machine.window && !machine.window.closed) {
                machine.window.close();
            } else {
                openMachineWindow(machine);
            }
        });

        $("#openInNewWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            openMachineWindow(selectedMachine);
        });

        $("#windowsKeyStandAlone").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                remoteController.sendWindowsKey();
            }
        });

        $("#windowsKey").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey();
        });

        $("#windowsKeyD").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(68);
        });

        $("#windowsKeyE").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(69);
        });

        $("#windowsKeyF").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(70);
        });

        $("#windowsKeyM").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(77);
        });

        $("#windowsKeyR").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(82);
        });

        $("#windowsKeyX").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            typeWindowsKey(88);
        });

        $("#windowsKeyPlus").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let remoteController = getSelectedRemoteController();
            if (remoteController != null) {
                remoteController.setViewOnly(true);
                $("#quickMessage").html(Text.AwaitingKeyPress);
                let keydownHandler = function (e) {
                    e.preventDefault();
                    $(document).unbind("keydown", keydownHandler);
                    $("#quickMessage").html("");
                    typeWindowsKey(e.which);
                    remoteController.setViewOnly(false);
                };
                $(document).bind("keydown", keydownHandler);
            }
        });

        function typeWindowsKey(additionalKey) {
            if (selectedMachine) {
                let remoteController = getSelectedRemoteController();
                if (remoteController == null) return;
                if (remoteController.canSendWindowsKey()) {
                    remoteController.sendWindowsKey(additionalKey);
                } else {
                    var url = "/VirtualizationClient/TypeWindowsKey/?machineName=" + encodeURIComponent(selectedMachine.InstanceName) + "&labInstanceKey=" + model.key;
                    if (additionalKey != null) {
                        url += "&keys=[" + additionalKey + "]";
                    }
                    $.ajax({
                        url: url
                        , type: "POST"
                        , dataType: 'jsonp'
                        , jsonp: false
                    });
                }
            } else if (selectedEndpoint?.ConnectionProtocol == 20) {
                let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
                if (rdpClient != null) {
                    rdpClient.sendWindowsKey(additionalKey);
                }
            }
        }

        $("#altTab").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (selectedMachine) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.sendAltTab();
                }
            } else if (selectedEndpoint?.ConnectionProtocol == 20) {
                let rdpClient = getRdpClientInstance(`rdp-client-endpoint-${selectedEndpoint.Id}`);
                if (rdpClient != null) {
                    rdpClient.sendAltTab();
                }
            }

        });

        $(".answer input[type=radio]").change(function () {
            sessionStorage.setItem(this.name, this.id);
        });

        $(".answer input[type=text]").change(function () {
            sessionStorage.setItem(this.id, this.value);
        });

        $(".answer input[type=checkbox]").change(function () {
            sessionStorage.setItem(this.id, this.checked);
        });

        function LoadExamFromSession() {
            var radioAnswers = $(".answer input[type=radio]");
            for (var i = 0; i < radioAnswers.length; i++) {
                radioAnswers[i].checked = sessionStorage[radioAnswers[i].name] == radioAnswers[i].id;
            }

            var textBoxAnswers = $(".answer input[type=text]");
            for (var i = 0; i < textBoxAnswers.length; i++) {
                if (sessionStorage[textBoxAnswers[i].id]) {
                    textBoxAnswers[i].value = sessionStorage[textBoxAnswers[i].id];
                }
            }

            var checkBoxAnswers = $(".answer input[type=checkbox]");
            for (var i = 0; i < checkBoxAnswers.length; i++) {
                checkBoxAnswers[i].checked = sessionStorage[checkBoxAnswers[i].id];
            }
        }
        LoadExamFromSession();

        $("#pasteUsername").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (selectedMachine && selectedMachine.Username && selectedMachine.Username.length > 0) {
                sendPastedText(selectedMachine.Username);
            } else if (selectedEndpoint && selectedEndpoint.Username && selectedEndpoint.Username.length > 0) {
                sendPastedText(selectedEndpoint.Username);
            }         
        });

        $("#pastePassword").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (selectedMachine && selectedMachine.Password && selectedMachine.Password.length > 0) {
                sendPastedText(selectedMachine.Password);
            } else if (selectedEndpoint && selectedEndpoint.Password && selectedEndpoint.Password.length > 0) {
                sendPastedText(selectedEndpoint.Password);
            }            
        });

        var pasteClipboardDialogWidth = 550;
        var pasteClipboardDialogHeight = 365;

        function showPasteTextDialog() {
            showDialog(
                Text.BrowserNoClipboardAccess + "<div style='margin-top:12px;'><textarea id='pasteTextArea' style='width:97%; height:200px;' maxlength='1000'></textarea></div>",
                {
                    title: "Type Clipboard Text",
                    width: pasteClipboardDialogWidth,
                    height: pasteClipboardDialogHeight,
                    open: function () {
                        let $pasteTextArea = model.isChildClient && model.layoutVersion > 1 ? $(parent.getElementById("pasteTextArea")) : $("#pasteTextArea");
                        $pasteTextArea.focus();
                    },
                    buttons: {
                        "OK": function () {
                            var areaText = model.isChildClient && model.layoutVersion > 1 ? $(parent.getElementById("pasteTextArea")).val() : $("#pasteTextArea").val();
                            if (areaText.length > 1000) {
                                return;
                            }
                            if (areaText && areaText.length > 0) {
                                sendPastedText(areaText);
                            }
                            closeDialog();
                        },
                        "Cancel": closeDialog
                    },
                    close: function () {
                        pasteClipboardDialogWidth = $("#modalDialog").dialog("option", "width");
                        pasteClipboardDialogHeight = $("#modalDialog").dialog("option", "height");
                    }
                });
        }

        $("#pasteClipboard").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            navigator.clipboard.readText()
                .then(text => {
                    try {
                        if (text?.length > 0) {
                            sendPastedText(text);
                        } else {
                            showPasteTextDialog();
                        }  
                    } catch (e) {
                        console.error(e);
                    }                  
                })
                .catch(err => {
                    showPasteTextDialog();
                });
        });

        $("#fitWindowToMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            fitWindowToMachine(true, true);
        });

        var fitMachineToWindowMessageShown = false;

        $("#fitMachineToWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let remoteController = getSelectedRemoteController();
            if (remoteController?.limitedScreenSizes && remoteController.limitedScreenSizes() && !fitMachineToWindowMessageShown) {
                fitMachineToWindowMessageShown = true;
                showNotification("Your virtual machines only support certain screen sizes. Fitting a machine to your window will result in the largest possible screen size being applied that will still fit inside the available space. After using this feature, you may still have extra space around your machines. <br/><br/>This feature only works when you are logged into the current virtual machine.");
            }
            selectedMachine.lastAttemptedScreenWidth = null;
            selectedMachine.lastAttemptedScreenHeight = null;
            refreshRemoteControllerLayout(true);
        });

        $("#refreshDisplay").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            refreshDisplay();
        });

        function cancelLab(progressTitle, completionTitle, completionMessage) {
            showFullScreenMessage(progressTitle, "", true);
            labIsComplete();
            var url = "/Lab/End/" + model.labInstanceId;
            if (model.impersonatorName) {
                url += "?impersonatorName=" + encodeURIComponent(model.impersonatorName);
            }
            else if (model.monitorName) {
                url += "?monitorName=" + encodeURIComponent(model.monitorName);
            }
            ajaxPost(url,
                function () {
                    sendLabDoneMessageToOpener();
                    gotoPostLabActivity(completionTitle, completionMessage);
                },
                function () {
                    sendLabDoneMessageToOpener();
                    gotoPostLabActivity(completionTitle, completionMessage);
                }
            );
        }

        $("#cancelLab").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var message = labData.CanBeMarkedComplete ? "Are you sure you want to cancel this lab? You have not finished all tasks and will not receive credit for completing this lab." : "Are you sure you want to cancel this lab?";
            showDialog("<div style='margin-top:10px;'>" + message + "</div>", {
                title: "Cancel Lab",
                width: 620,
                height: 250,
                buttons: {
                    "Yes, cancel my lab": function () {
                        cancelLab(Text.CancellingLab, Text.LabCancelledTitle, Text.LabCancelledMessage);
                    },
                    "No, not yet": closeDialog
                }
            });
        });

        $("#cancelExam").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var message = "Are you sure you want to cancel this exam? You will not receive credit for completing the exam.";
            showDialog("<div style='margin-top:10px;'>" + message + "</div>", {
                title: "Cancel Exam",
                width: 620,
                height: 250,
                buttons: {
                    "Yes, cancel my exam": function () {
                        cancelLab("Cancelling Exam", "Exam Cancelled", "Your exam has been cancelled.");
                    },
                    "No, not yet": closeDialog
                }
            });
        });

        $("#saveLab").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var buttons = {};
            buttons[Text.OK] = save;
            buttons[Text.Cancel] = closeDialog;
            var expiration = new Date();
            expiration.setDate(expiration.getDate() + model.maxLabSaveDurationDays);
            var text = model.maxSavedLabs
                ? "Your lab will be saved for {0} days. It will expire on {1}. You can save up to {2} labs. ".format(model.maxLabSaveDurationDays, expiration.toLocaleString(), model.maxSavedLabs)
                : "Your lab will be saved for {0} days. It will expire on {1}.".format(model.maxLabSaveDurationDays, expiration.toLocaleString(), model.maxSavedLabs);
            showDialog(text, {
                title: Text.ConfirmSaveTitle,
                buttons: buttons
            });
        });

        $("#saveExam").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var buttons = {};
            buttons[Text.OK] = save;
            buttons[Text.Cancel] = closeDialog;
            var expiration = new Date();
            expiration.setDate(expiration.getDate() + model.maxLabSaveDurationDays);
            var text = model.maxSavedLabs
                ? "Your exam will be saved for {0} days. It will expire on {1}. You can save up to {2} exams.".format(model.maxLabSaveDurationDays, expiration.toLocaleString(), model.maxSavedLabs)
                : "Your exam will be saved for {0} days. It will expire on {1}.".format(model.maxLabSaveDurationDays, expiration.toLocaleString(), model.maxSavedLabs);
            showDialog(text, {
                title: Text.ConfirmSaveTitle,
                buttons: buttons
            });
        });

        function save() {
            showFullScreenMessage(
                model.isExam ? Text.SavingExamTitle : Text.SavingLabTitle,
                model.isExam ? Text.SavingExamMessage : Text.SavingLabMessage,
                true);
            var url = "/Lab/Save/" + model.labInstanceId;
            if (model.impersonatorName) {
                url += "?impersonatorName=" + encodeURIComponent(model.impersonatorName);
            }
            else if (model.monitorName) {
                url += "?monitorName=" + encodeURIComponent(model.monitorName);
            }
            ajaxPost(url,
                function (response) {
                    if (response.Success) {
                        labIsComplete();
                        if (response.IsAnonymousSave) {
                            showFullScreenMessageForAnonymousSave(response.ResumeUrl, response.QrCode);
                        } else {
                            var expiration = new Date();
                            expiration.setDate(expiration.getDate() + model.maxLabSaveDurationDays);
                            showFullScreenMessage(
                                model.isExam ? Text.ExamSavedTitle : Text.LabSavedTitle,
                                model.isExam ? Text.ExamSavedForXDaysExpiresY.format(model.maxLabSaveDurationDays, expiration.toLocaleString()) : Text.LabSavedForXDaysExpiresY.format(model.maxLabSaveDurationDays, expiration.toLocaleString()),
                                false,
                                true);
                        }
                        sendLabDoneMessageToOpener();
                    } else {
                        hideFullScreenMessage();
                        var errorMessage = response.Error ? response.Error : "Sorry an error occurred";
                        showDialog(errorMessage, {
                            title: model.isExam ? Text.ErrorSavingExamTitle : Text.ErrorSavingLabTitle,
                            buttons: { "OK": function () { closeDialog(); } }
                        });
                    }
                },
                function () {
                    hideFullScreenMessage();
                    showDialog("Sorry an error occurred", {
                        title: model.isExam ? Text.ErrorSavingExamTitle : Text.ErrorSavingLabTitle,
                        buttons: { "OK": function () { closeDialog(); } }
                    });
                }
            );
        }

        var ignoreVirtualMachineStateDuringSyncTimeout;

        function startIgnoringVirtualMachineStateDuringSync(duration) {
            if (ignoreVirtualMachineStateDuringSyncTimeout) { window.clearTimeout(ignoreVirtualMachineStateDuringSyncTimeout); }
            labConsole.ignoreVirtualMachineStateDuringSync = true;
            window.setTimeout(function () { labConsole.ignoreVirtualMachineStateDuringSync = false; }, duration);
        }

        $("#resetMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var width = 500;
            var height = 180;
            var text = "Are you sure you want to reset the current machine? This is equivalent to hitting the reset button on a physical computer.";
            if (model.platformId === 3) {
                height = 200;
                text += "<div style='margin-top:10px;'><label><input type='checkbox' id='bootToBios'/>Boot to BIOS/EFI setup screen</label></div>";
            }
            showDialog(text, {
                title: "Reset/Reboot Machine",
                width: width,
                height: height,
                buttons: {
                    "Yes": function (e) {
                        startIgnoringVirtualMachineStateDuringSync(60000);
                        closeDialog();
                        var url = "/VirtualizationClient/ResetMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId;
                        var bootToBios = $(e.target).parentsUntil("#modalDialog").find("#bootToBios").prop("checked");
                        if (bootToBios) {
                            url += "&bootToBios=1";
                        }
                        ajaxPost(url,
                            function (response) {
                                if (response.Success) {
                                    setupVmVisibility();
                                    if (selectedMachine && selectedMachine.sshActive) {
                                        var existingSshClient = getSshClientInstance("sshClient" + selectedMachine.ProfileId);
                                        existingSshClient.disconnect();
                                        window.setTimeout(function () {
                                            connectToSelectedMachine();
                                        }, 15000);
                                    } else if (selectedMachine && !selectedMachine.ConnectViaRdp && model.platformId === 3) {                                        
                                        disconnectSelectedRemoteController();
                                        window.setTimeout(function () {
                                            connectSelectedRemoteController();                                            
                                        }, 8000);
                                    }
                                } else if (response.Error === "InvalidState") {
                                    selectedMachineState = 20;
                                    setupVmVisibility();
                                    if (selectedMachine && !selectedMachine.ConnectViaRdp) {
                                        connectToSelectedMachine();
                                    }
                                } else {
                                    setupVmVisibility();
                                }
                            },
                            function () {
                                setupVmVisibility();
                            }
                        );
                    },
                    "No": function () { closeDialog(); }
                }
            });
        });

        function turnOnSelectedMachine(bootToBios) {
            $("#vmOff").hide();
            startIgnoringVirtualMachineStateDuringSync(60000);
            hideVmCommands();
            var url = "/VirtualizationClient/TurnOnMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId;
            if (bootToBios) {
                url += "&bootToBios=1";
            }
            ajaxPost(url,
                function (response) {
                    if (response.Success) {
                        selectedMachineState = 20;
                        setupVmVisibility();
                        if (selectedMachine && !selectedMachine.ConnectViaRdp) {
                            var timeout = model.platformId === 3 ? 8000 : 500;
                            if (selectedMachine && selectedMachine.sshActive) { timeout = 15000; }
                            window.setTimeout(function () {
                                connectToSelectedMachine();
                            }, timeout);
                        }
                    } else if (response.Error === "InvalidState") {
                        selectedMachineState = 20;
                        setupVmVisibility();
                        if (selectedMachine && !selectedMachine.ConnectViaRdp && !selectedMachine.sshActive) {
                            connectToSelectedMachine();
                        }
                    } else {
                        setupVmVisibility();
                        showDialog(response.Error ? response.Error : "Sorry an error occurred",
                            {
                                title: "Start Machine",
                                width: 500,
                                height: 180,
                                buttons: {
                                    "OK": function () {
                                        closeDialog();
                                    }
                                }
                            });
                    }
                },
                function () {
                    setupVmVisibility();
                }
            );
        }

        $("#turnOnMachine, #startMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (model.platformId === 3) {
                showDialog("Are you sure you want to start this machine? <div style='margin-top:10px;'><label><input type='checkbox' id='bootToBios'/>Boot to BIOS/EFI setup screen</label></div>", {
                    title: "Start Machine",
                    width: 500,
                    height: 180,
                    buttons: {
                        "Yes": function (e) {
                            var bootToBios = $(e.target).parentsUntil("#modalDialog").find("#bootToBios").prop("checked");
                            closeDialog();
                            turnOnSelectedMachine(bootToBios);
                        },
                        "No": function () { closeDialog(); },
                    }
                });
            } else {
                turnOnSelectedMachine();
            }
        });

        $("#turnOffMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (!confirm(Text.TurnOffMachineConfirm)) {
                return;
            }
            startIgnoringVirtualMachineStateDuringSync(60000);
            if (selectedMachine?.ConnectViaRdp) {
                $rdpWrapper.hide();
                hideSelectedRemoteController();
                $sshWrapper.hide();
                $httpEndpointWrapper.hide();
                $rdpEndpointWrapper.hide();
                $telnetEndpointWrapper.hide();
                $vncEndpointWrapper.hide();
                $contentResourceWrapper.hide();
            }
            hideVmCommands();
            ajaxPost("/VirtualizationClient/TurnOffMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId,
                function (response) {
                    if (response.Success) {
                        selectedMachineState = 0;
                        setupVmVisibility();
                        if (selectedMachine.sshActive) {
                            let sshClient = getSshClientInstance("sshClient" + selectedMachine.ProfileId);
                            if (sshClient !== null) {
                                sshClient.disconnect();
                            }
                        } else {
                            let remoteController = getSelectedRemoteController();
                            if (remoteController != null) {
                                remoteController.disconnect();
                            }                            
                        }
                    } else if (response.Error === "InvalidState") {
                        selectedMachineState = 20;
                        setupVmVisibility();
                        alert('Sorry, your machine was not turned off. Please make sure the machine is currently running before turning it off.');
                    } else {
                        setupVmVisibility();
                    }
                },
                function () {
                    setupVmVisibility();
                }
            );
        });

        $("#pauseMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            startIgnoringVirtualMachineStateDuringSync(60000);
            hideVmCommands();
            ajaxPost("/VirtualizationClient/PauseMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId,
                function (response) {
                    if (response.Success) {
                        selectedMachineState = 70;
                        setupVmVisibility();
                    } else if (response.Error === "InvalidState") {
                        selectedMachineState = 20;
                        setupVmVisibility();
                    } else {
                        setupVmVisibility();
                    }
                },
                function () {
                    setupVmVisibility();
                }
            );
        });

        $("#resumeMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            startIgnoringVirtualMachineStateDuringSync(60000);
            hideVmCommands();
            ajaxPost("/VirtualizationClient/TurnOnMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId,
                function (response) {
                    if (response.Success) {
                        selectedMachineState = 20;
                        setupVmVisibility();
                    } else if (response.Error === "InvalidState") {
                        selectedMachineState = 20;
                        setupVmVisibility();
                    } else {
                        setupVmVisibility();
                    }
                },
                function () {
                    setupVmVisibility();
                }
            );
        });

        $("#revertMachine").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            showDialog("<p>Reverting a machine will cause it to roll back to the state it was in when you first launched your lab.  If you continue, the currently selected machine will be reverted and all work that you have done within it will be lost. Other machines will not be affected. </p><p>Are you sure you want to revert this machine?</p>", {
                title: "Revert Machine",
                width: 450,
                height: 250,
                buttons: {
                    "Yes, revert this machine": function () {
                        closeDialog();
                        let remoteController = getSelectedRemoteController();
                        let controllerConnected = false;
                        if (remoteController != null) {
                            controllerConnected = remoteController.getConnectionState() === 1;
                            if (controllerConnected) {
                                remoteController.disconnect();
                            }
                        }
                        labConsole.ignoreVirtualMachineStateDuringSync = true;
                        let machineBeingReverted = selectedMachine;
                        showFullScreenMessage("Reverting your machine", Text.ThisShouldntTakeLong, true);
                        ajaxPost("/VirtualizationClient/RevertMachine/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId,
                            function (response) {
                                labConsole.ignoreVirtualMachineStateDuringSync = false;
                                if (response.Success) {
                                    if (response.MachineId) {
                                        machineBeingReverted.Id = response.MachineId;
                                    }
                                    window.setTimeout(function () {
                                        hideFullScreenMessage();
                                        if (controllerConnected && machineBeingReverted === selectedMachine && !selectedMachine.sshActive) {
                                            connectSelectedRemoteController();
                                        }
                                    }, model.platformId === 3 ? 8000 : 500);
                                } else {
                                    hideFullScreenMessage();
                                    alert(response.Error ? response.Error : "Sorry, your machine was not reverted.");
                                }
                            },
                            function () {
                                labConsole.ignoreVirtualMachineStateDuringSync = false;
                                hideFullScreenMessage();
                                if (controllerConnected && machineBeingReverted === selectedMachine && !selectedMachine.sshActive) {
                                    connectSelectedRemoteController();
                                }
                                alert("Sorry, your machine was not reverted.");
                            }
                        );
                    },
                    "No": closeDialog
                }
            });
        });

        $("#resetInternetGateway").on("click keypress", function (e) {
            if (!a11yClick(e)) return;

            showDialog("<p>Are you sure you want to reset the internet gateway?</p>", {
                title: "Reset Internet Gateway",
                width: 450,
                height: 250,
                buttons: {
                    "Yes": function () {
                        closeDialog();

                        showFullScreenMessage("Resetting Internet Gateway", Text.ThisShouldntTakeLong, true);

                        $.ajax({
                            url: "/VirtualizationClient/ResetNatGateways/" + model.labInstanceId,
                            type: "POST",
                            dataType: "json",
                            data: {},
                            cache: false
                        }).always(function (response) {
                            if (response && response.Success) {
                                window.setTimeout(function () {
                                    hideFullScreenMessage();
                                }, 10000);
                            } else {
                                hideFullScreenMessage();

                                alert(response && response.Error ? response.Error : "Sorry an error occurred");
                            }
                        });
                    },
                    "No": closeDialog
                }
            });
        });

        function hideVmCommands() {
            $("#vmOff").hide();
            $("#refreshDisplay").hide();
            $("#paste").hide();
            $("#power").hide();
            $("#ctlAltDel").hide();
            $("#takeScreenshot").hide();
            $("#installIntegrationService").hide();
            $("#snapshots").hide();
            $("#windowsKeyWrapper").hide();
        }

        $("div.floppyDrive select").change(function () {
            if (this.value == "-1") { return; }
            var machine = $(this).closest("div.machine").data("machine");
            var mediaId = this.value;
            if (this.value == "-2") {
                doMediaAction("/VirtualizationClient/EjectFloppyMedia/" + model.labInstanceId + "/?machineId=" + machine.ProfileId);
            } else {
                doMediaAction(
                    "/VirtualizationClient/AttachFloppyMedia/" + model.labInstanceId + "/?machineId=" + machine.ProfileId + "&mediaId=" + mediaId,
                    function () {
                        clearOtherFloppySelections(machine, mediaId);
                    }
                );
            }
        });

        $("#templates select").click(function (e) {
            e.stopPropagation();
        });

        $("div.dvdDrive select").change(function () {
            if (this.value === "-1") { return; }
            var machine = $(this).closest("div.machine").data("machine");
            if (this.value === "-2") {
                doMediaAction("/VirtualizationClient/EjectOpticalMedia/" + model.labInstanceId + "/?machineId=" + machine.ProfileId);
            } else {
                if (this.value.indexOf("instructor-") >= 0) {
                    doMediaAction("/VirtualizationClient/AttachInstructorFile/" + model.labInstanceId + "/?machineId=" + machine.ProfileId + "&fileid=" + this.value.replace("instructor-", ""));
                } else if (this.value.indexOf("dev-") >= 0) {
                    doMediaAction("/VirtualizationClient/AttachDeveloperFile/" + model.labInstanceId + "/?machineId=" + machine.ProfileId + "&file=" + encodeURIComponent(this.value.replace("dev-", "")));
                } else if (this.value) {
                    doMediaAction("/VirtualizationClient/AttachOpticalMedia/" + model.labInstanceId + "/?machineId=" + machine.ProfileId + "&mediaId=" + this.value);
                }
            }
        });

        $("div.networkAdapter select").change(function () {
            var networkAdapterDiv = $(this).closest("div.networkAdapter");
            var networkAdapterId = networkAdapterDiv.attr("data-id");
            var machineId = networkAdapterDiv.closest("div.machine").data("machine").ProfileId;
            var url = "/VirtualizationClient/ConnectNetwork/" + model.labInstanceId + "/?machineId=" + machineId + "&adapterId=" + networkAdapterId;
            if (this.value > 0) {
                url += "&networkId=" + this.value;
            }
            $("#quickMessage").html(Text.Loading);
            ajaxPost(
                url,
                function (response) {
                    $("#quickMessage").html("");
                    if (response && response.Error) {
                        alert(response.Error);
                    }
                },
                function (response) {
                    if (response && response.Error) {
                        alert(response.Error);
                    }
                    $("#quickMessage").html("");
                }
            );
        });

        let snapshotDialogWidth = 700;
        let snapshotDialogHeight = 500;

        function showSnapshotsDialog() {
            showDialog("<span class='ui-helper-hidden-accessible'><input type='text'/></span><span class='activityIndicator-s'>Loading...</span>", {
                title: "Snapshots"
            });
            ajaxPost("/VirtualizationClient/GetSnapshots/" + model.labInstanceId,
                function (response) {
                    if (!response.Success) {
                        alert(Text.ErrorRetrievingSnapshots);
                    } else {
                        let html = "Snapshots allow you to return to a particular point in your lab. You are allowed up to {0} snapshots in this lab.".format(model.maxSnapshots);
                        if (response.ShowLabUpdateWarning) {
                            html += "<p style='font-weight:bold;'>Please note that you will no longer be able to commit changes to update or create a lab profile if your lab has a snapshot. </p>";
                        }
                        let snapshots = response.Snapshots;
                        let numSnapshots = snapshots.length;                      
                        let supportNonLinearSnapshots = model.platformId === 2; //Snapshots not on hyper-v have internal dependencies. To avoid users getting into a bad state on other platforms, we only allow the last snapshot to be applied or deleted.
                        html += "<table id='snapshotsTable' cellpadding='4' cellspacing='0' style='margin-top:15px;'><tr><th>Name</th><th>Created</th><th>&nbsp;</th></tr>";
                        for (let i = 0; i < numSnapshots; i++) {
                            let snapshot = snapshots[i];
                            let created = new Date(snapshot.Created * 1000);
                            html += "<tr class='snapshot'><td>" + snapshots[i].Name + "</td><td>" + created.toLocaleString() + "</td><td>";
                            if (supportNonLinearSnapshots || i == numSnapshots - 1) {
                                html += "<span style='display:none;' class='deleting'><span class='activityIndicator-s'><span class='loadingAnimation-small'></span> Deleting</span></span><input data-id='" + snapshot.Id + "' type='button' class='applySnapshot' value='Apply'/> <input data-id='" + snapshot.Id + "' type='button' class='deleteSnapshot' value='Delete'/>";
                            }
                            html += "</td></tr>";
                        }
                        html += "</table>";
                        if (numSnapshots > 1 && !supportNonLinearSnapshots) {
                            html += "<p>Snapshots on this platform have internal dependencies. To ensure snapshot data integrity is not compromised, you can only apply or delete the latest snapshot. To return to an earlier snapshot, you will have to delete later snapshots.</p>";
                        }

                        html += '<div id="newSnapshot" style="margin-top:15px;"><h2>New Snapshot</h2>Name: <input type="text" style="width:250px;" maxlength="50" id="snapshotName" /> <input id="createSnapshot" type="button" value="Create Snapshot"/></div>';
                        if (model.layoutVersion === 1) {
                            closeDialog();
                        }
                        showDialog(html, {
                            title: "Snapshots",
                            width: snapshotDialogWidth,
                            height: snapshotDialogHeight,
                            buttons: { "Cancel": closeDialog },
                            open: function () {
                                if (model.maxSnapshots <= numSnapshots) {
                                    let $newSnapshot = getJqueryObjectFromDialog("newSnapshot");
                                    $newSnapshot.hide();
                                } else {
                                    let $snapshotName = getJqueryObjectFromDialog("snapshotName");
                                    $snapshotName.focus();
                                }
                                if (snapshots.length === 0) {
                                    let $snapshotsTable = getJqueryObjectFromDialog("snapshotsTable");
                                    $snapshotsTable.hide();
                                }                                
                            }
                            ,
                            close: function () {
                                if (model.layoutVersion === 1) {
                                    snapshotDialogWidth = $("#modalDialog").dialog("option", "width");
                                    snapshotDialogHeight = $("#modalDialog").dialog("option", "height");
                                }
                            }
                        });

                        let $createSnapshot = model.isChildClient && model.layoutVersion > 1 ? $(parent.getElementById("createSnapshot")) : $("#createSnapshot");

                        $createSnapshot.on("click keypress", function (e) {
                            if (!a11yClick(e)) return;
                            let $snapshotName = getJqueryObjectFromDialog("snapshotName");
                            let name = $snapshotName.val();
                            if (!name) {
                                alert(Text.PleaseProvideSnapshotName);
                                $snapshotName.focus();
                                return;
                            }
                            hideV2Dialog();
                            showFullScreenMessage(Text.CreatingSnapshotTitle, Text.CreatingSnapshotMessage, true);
                            let snapshotCreatedInterval = null;
                            labConsole.internalStatesChangeInProgress = true;
                            ajaxPost("/VirtualizationClient/CreateSnapshot/" + model.labInstanceId + "?name=" + encodeURIComponent(name),
                                function (createResponse) {
                                    if (createResponse && createResponse.Success) {
                                        labConsole.internalStatesChangeInProgress = false;
                                        snapshotCreatedInterval = window.setInterval(function () {
                                            ajaxPost("/VirtualizationClient/GetLabInstanceState/" + model.labInstanceId,
                                                function (stateResponse) {
                                                    if (stateResponse && stateResponse.Success && stateResponse.State === 40) {
                                                        window.clearInterval(snapshotCreatedInterval);
                                                        closeDialog(false);
                                                        hideFullScreenMessage();
                                                        showSnapshotsDialog(); //this will reopen the dialog and include the new snapshot
                                                    }
                                                }
                                            );
                                        }, 3000);
                                    } else {
                                        labConsole.internalStatesChangeInProgress = false;
                                        alert(Text.ErrorCreatingSnapshot);
                                        hideFullScreenMessage();
                                        showV2Dialog();
                                    }
                                },
                                function () {
                                    labConsole.internalStatesChangeInProgress = false;
                                    alert(Text.ErrorCreatingSnapshot);
                                    hideFullScreenMessage();
                                    showV2Dialog();
                                }
                            );
                        });

                        let deletionInProgress = false;

                        let $snapshotsTable = getJqueryObjectFromDialog("snapshotsTable");

                        $snapshotsTable.find("input.deleteSnapshot").on("click keypress", function (e) {
                            if (!a11yClick(e)) return;
                            if (deletionInProgress) { return; }
                            if (confirm("Are you sure you want to delete this snapshot?")) {
                                deletionInProgress = true;
                                let $deleteButton = $(this);
                                let snapshotId = $deleteButton.attr("data-id");
                                let $row = $deleteButton.closest("tr");
                                $row.find("input.applySnapshot").css("visibility", "hidden");
                                $row.find(".deleting").show();
                                $deleteButton.css("visibility", "hidden");
                                ajaxPost("/VirtualizationClient/DeleteSnapshot/" + model.labInstanceId + "?snapshotId=" + snapshotId,
                                    function (deletionResponse) {
                                        if (deletionResponse.Success) {
                                            deletionInProgress = false;
                                            $row.remove();
                                            let newNumSnapshots = $snapshotsTable.find("tr.snapshot").length;
                                            if (newNumSnapshots === 0) {
                                                $snapshotsTable.hide();
                                            }
                                            if (newNumSnapshots < labConsole.maxSnapshots) {
                                                getJqueryObjectFromDialog("newSnapshot").show();
                                            }
                                        }
                                        else {
                                            deletionInProgress = false;
                                            $row.find("input.applySnapshot").css("visibility", "");
                                            $deleteButton.css("visibility", "");
                                            $row.find(".deleting").hide();
                                            alert(deletionResponse?.Error ?? Text.ErrorDeletingSnapshot);
                                        }
                                    },
                                    function () {
                                        deletionInProgress = false;
                                        $row.find("input.applySnapshot").css("visibility", "");
                                        $deleteButton.css("visibility", "");
                                        $row.find(".deleting").hide();
                                        alert(Text.ErrorDeletingSnapshot);
                                    }
                                );
                            }
                        });

                        $snapshotsTable.find("input.applySnapshot").on("click keypress", function (e) {
                            if (!a11yClick(e)) return;
                            if (confirm(Text.ConfirmApplySnapshot)) {
                                labConsole.internalStatesChangeInProgress = true;
                                let snapshotId = $(this).attr("data-id");
                                hideV2Dialog();
                                showFullScreenMessage(Text.ApplyingSnapshotTitle, Text.ApplyingSnapshotMessage, true);
                                let snapshotAppliedInterval = null;
                                ajaxPost("/VirtualizationClient/ApplySnapshot/" + model.labInstanceId + "?snapshotId=" + snapshotId,
                                    function (applyResponse) {
                                        if (applyResponse && applyResponse.Success) {
                                            snapshotAppliedInterval = window.setInterval(function () {
                                                ajaxPost("/VirtualizationClient/GetLabInstanceState/" + model.labInstanceId,
                                                    function (stateResponse) {
                                                        if (stateResponse && stateResponse.Success && stateResponse.State === 40) {
                                                            labConsole.internalStatesChangeInProgress = false;
                                                            closeDialog(false);
                                                            hideFullScreenMessage();
                                                            window.clearInterval(snapshotAppliedInterval);
                                                            if (applyResponse.SelectedMachineId !== selectedMachine.ProfileId) {
                                                                selectMachineById(applyResponse.SelectedMachineId);
                                                            } else if (selectedMachine && !selectedMachine.ConnectViaRdp && !selectedMachine.sshActive) {
                                                                connectSelectedRemoteController();
                                                            }
                                                        }
                                                    }
                                                );
                                            }, 3000);
                                        } else {
                                            labConsole.internalStatesChangeInProgress = false;
                                            alert(Text.ErrorApplyingSnapshot);
                                            hideFullScreenMessage();
                                            showV2Dialog();
                                        }
                                    },
                                    function () {
                                        alert(Text.ErrorApplyingSnapshot);
                                        hideFullScreenMessage();
                                        showV2Dialog();
                                    }
                                );
                            }
                        });
                    }
                },
                function () {
                    alert(Text.ErrorRetrievingSnapshots);
                }
            );
        }

        $("#snapshots").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            showSnapshotsDialog();
        });

        $("#splitWindows").on("click keypress", function (e) {
            if (!model.isChildClient) return;
            window.parent.splitWindows();
        });

        var labContentDialogWidth = 650;
        var labContentDialogHeight = 500;

        $("#labIntroduction a").click(function (e) {
            e.preventDefault();
            var showTextDialog = function () {
                var content = "";
                if (labData.Objective) {
                    content += "<h2>" + Text.Objective + "</h2>";
                    content += "<div>" + labData.Objective + "</div>";
                }
                if (labData.Scenario) {
                    content += "<h2>" + Text.Scenario + "</h2>";
                    content += "<div>" + labData.Scenario + "</div>";
                }
                if (content.length > 0) {
                    showDialog(content, {
                        title: labData.DisplayName,
                        width: labContentDialogWidth,
                        height: labContentDialogHeight,
                        buttons: {
                            "OK": closeDialog
                        },
                        close: function () {
                            labContentDialogWidth = $("#modalDialog").dialog("option", "width");
                            labContentDialogHeight = $("#modalDialog").dialog("option", "height");
                        }
                    });
                }
            };
            if (labData.IntroUrl) {
                showContentDialog(labData.IntroUrl, null, showTextDialog);
            } else {
                showTextDialog();
            }
        });

        $("#launchRdp").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var url = "/VirtualizationClient/GetRdpFile/" + model.labInstanceId + "?machineId=" + selectedMachine.ProfileId;
            var enableNavigationWarning = model.enableNavigationWarning;
            disableNavigationWarning();
            window.location = url;
            window.setTimeout(function () {
                model.enableNavigationWarning = enableNavigationWarning;
            }, 5000);
        });

        var fullScreenApiSupported = false;
        var fullScreenDoc = model.isChildClient ? window.parent.document : document;

        if (fullScreenDoc.fullscreenEnabled || fullScreenDoc.webkitFullscreenEnabled || fullScreenDoc.mozFullScreenEnabled || fullScreenDoc.msFullscreenEnabled) {
            fullScreenApiSupported = true;
            fullScreenDoc.addEventListener("fullscreenchange", onFullscreenChange);
            fullScreenDoc.addEventListener("webkitfullscreenchange", onFullscreenChange);
            fullScreenDoc.addEventListener("mozfullscreenchange", onFullscreenChange);
            fullScreenDoc.addEventListener("MSFullscreenChange", onFullscreenChange);
        }

        function onFullscreenChange() {

            currentlyFullScreen = fullScreenDoc.fullscreenElement || fullScreenDoc.webkitFullscreenElement || fullScreenDoc.mozFullScreenElement || fullScreenDoc.msFullscreenElement;

            if (currentlyFullScreen) {
                if (selectedMachine && !selectedMachine.ConnectViaRdp && !labConsole.dialogShown && !labConsole.contentDialogShown) {
                    showSelectedRemoteController();
                }
                if (model.layoutVersion === 1) {
                    $("#fullscreen").html("Exit Full Screen").addClass("active");
                } else {
                    $("#fullscreen").attr("title", "Exit Full Screen").addClass("active");
                }
            } else if (model.layoutVersion === 1) {
                $("#fullscreen").html("Full Screen").removeClass("active");
            } else {
                $("#fullscreen").attr("title", "Full Screen").removeClass("active");
            }

            setupVmVisibility();
        }

        $("#fullscreen").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (!fullScreenApiSupported) {
                var onKeyDown = function (event) {
                    var which = event.which;
                    if (which === 122) {
                        closeDialog();
                    }
                };
                $(document).bind("keydown", onKeyDown);
                showDialog("Press F11 on your keyboard now to toggle full screen.", {
                    title: "Full Screen",
                    width: 500,
                    height: 400,
                    buttons: {
                        "Cancel": closeDialog
                    },
                    close: function () {
                        $(document).unbind("keydown");
                    }
                });
                return;
            }
            if (fullScreenDoc.fullscreenElement || fullScreenDoc.webkitFullscreenElement || fullScreenDoc.mozFullScreenElement || fullScreenDoc.msFullscreenElement) {
                if (fullScreenDoc.exitFullscreen) {
                    fullScreenDoc.exitFullscreen();
                } else if (fullScreenDoc.webkitExitFullscreen) {
                    fullScreenDoc.webkitExitFullscreen();
                } else if (fullScreenDoc.mozCancelFullScreen) {
                    fullScreenDoc.mozCancelFullScreen();
                } else if (fullScreenDoc.msExitFullscreen) {
                    fullScreenDoc.msExitFullscreen();
                }
            } else {
                let i = fullScreenDoc.body;
                if (i.requestFullscreen) {
                    i.requestFullscreen();
                } else if (i.webkitRequestFullscreen) {
                    i.webkitRequestFullscreen();
                } else if (i.mozRequestFullScreen) {
                    i.mozRequestFullScreen();
                } else if (i.msRequestFullscreen) {
                    i.msRequestFullscreen();
                }
            }
        });

        $("#disconnectLab").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            var text = "If you disconnect, your lab will continue to run while you’re gone. You can return to it any time before the timer expires ({0}).";
            showDialog(text, {
                title: "Are you sure you want to disconnect?",
                width: 620,
                height: 250,
                buttons: {
                    "Yes, disconnect. I\'ll be back later.": function () {
                        closeDialog();
                        labIsComplete();
                        showFullScreenMessage("Disconnected", "You have disconnected from your lab. You can now close this browser window.", false, true);
                    },
                    "Nevermind, keep me connected.": closeDialog
                }
            });
        });

        $("#installIntegrationService").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (model.platformId === 2) { //hyperV has integrated ISO installer
                showDialog("The Lab on Demand Integration Service offers support for<ul><li>Automatic screen resizing (limited resolutions)</li><li>Executing UI commands within a virtual machine</li></ul>Requirements<ul><li>Windows 7/2008 or later</li><li>64-bit operating system</li><li>.NET 4.5 or later</li><li>The service will only run for users in the Administrators group</li></ul> <p><br/>Would you like to install this service?</p>", {
                    title: "Install Integration Service",
                    width: 620,
                    height: 360,
                    buttons: {
                        "Yes": function () {
                            showDialog("<span class='ui-helper-hidden-accessible'><input type='text'/></span></p>Installation media is being loaded in the selected machine\'s DVD drive. If autoplay doesn\'t begin the installation, you may need to browse to the DVD drive manually.</p><div class='activityIndicator-s'>Loading...</div>", {
                                title: "Install Integration Service",
                                width: 620,
                                height: 360
                            });
                            $.ajax({
                                url: "/VirtualizationClient/AttachIntegrationServiceMedia/" + model.labInstanceId,
                                type: "POST",
                                dataType: 'json',
                                data: { machineId: selectedMachine.ProfileId },
                                cache: false
                            }).always(function (response) {
                                closeDialog();
                                if (response && response.Success) {
                                    var $machines = model.isChildClient
                                        ? window.parent.getResourcesExtensionsPlaceHolder()
                                        : $("#machines");
                                    var $dvdSelect = $machines.find("#machine" + selectedMachine.ProfileId + " div.dvdDrive select");
                                    if ($dvdSelect.length > 0) {
                                        $dvdSelect[0].selectedIndex = 0;
                                    }
                                } else {
                                    alert(response && response.Error ? response.Error : "Sorry an error occurred");
                                }
                            });
                        },
                        "No": closeDialog
                    }
                });
            } else { //other platforms require manual install
                window.open(labData.VmIntegrationServiceDocumentationUrl, "integrationServiceDocumentation", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
            }
        });

        $("#closeContentDialogButton").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            closeContentDialog();
        });

        $("a.bugReport").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            let height = 650;
            let html = "<div id='bugReport'><div style='float:right;'><div style='font-size:18px; float:left;'>* </div> = Required</div><h2 style='margin-top:0;'><label for='bugReportName'>@Resources.BugReports.PleaseEnterAOneLineSummary *</label></h2><input type='text' id='bugReportName' style='width:100%;' /><h2><label for='bugReportReproductionSteps'>@Resources.BugReports.StepsToReproduceTheProblem *</label></h2><textarea id='bugReportReproductionSteps' style='width:100%;' rows='4'>1. \n2. \n3. </textarea><h2><label for='bugReportExpectedBehavior'>@Resources.BugReports.ExpectedBehavior</label></h2><textarea id='bugReportExpectedBehavior' style='width:100%;' rows='4'></textarea><h2><label for='bugReportActualBehavior'>@Resources.BugReports.WhatWentWrong *</label></h2><textarea id='bugReportActualBehavior' style='width:100%;' rows='4'></textarea><h2><label for='bugReportComments'>@Resources.BugReports.AnyOtherComments</label></h2><textarea id='bugReportComments' style='width:100%;' rows='4'></textarea></div>";
            let selectedMachineId = selectedMachine != null ? selectedMachine.ProfileId : null;
            if (selectedMachine && selectedMachineState !== 0) {
                html += "<div><input type='checkbox' checked='checked' id='bugReportIncludeScreenshot'><label for='bugReportIncludeScreenshot'>Include a screenshot of my currently selected machine</label></div>";
                height += 20;
            }
            let dialog = showDialog(html, {
                title: "Report a bug",
                width: 700,
                height: height,
                buttons: {
                    "Submit Bug Report": function () {
                        let $bugReportIncludeScreenshot = $("#bugReportIncludeScreenshot");
                        let includeScreenshot = false;
                        let screenWidth = 0;
                        let screenHeight = 0;
                        if ($bugReportIncludeScreenshot.length > 0) {
                            let remoteController = getSelectedRemoteController();
                            if (remoteController != null) {
                                var vmSize = remoteController.getSize();
                                screenWidth = vmSize.width;
                                screenHeight = vmSize.height;
                                includeScreenshot = $bugReportIncludeScreenshot.prop("checked");
                            }                            
                        }
                        let data = {
                            name: $("#bugReportName").val(),
                            reproductionSteps: $("#bugReportReproductionSteps").val(),
                            expectedBehavior: $("#bugReportExpectedBehavior").val(),
                            actualBehavior: $("#bugReportActualBehavior").val(),
                            comments: $("#bugReportComments").val(),
                            machineId: selectedMachineId,
                            screenWidth: screenWidth,
                            screenHeight: screenHeight,
                            includeScreenshot: includeScreenshot
                        };
                        if (data.name.length === 0) {
                            alert("Please provide a one-line summary");
                            return;
                        }
                        if (data.reproductionSteps.length === 0) {
                            alert("Please provide steps to reproduce the problem");
                            return;
                        }
                        if (data.actualBehavior.length === 0) {
                            alert("Please provide a description of what went wrong");
                            return;
                        }
                        $.ajax({
                            url: "/Lab/SubmitBugReport/" + model.labInstanceId,
                            type: "POST",
                            dataType: "json",
                            data: data,
                            cache: false
                        }).always(function (response) {
                            if (response?.Success) {
                                showDialog("Your bug report has been successfully submitted. Thanks for your feedback!", {
                                    width: 700,
                                    height: 400,
                                    buttons: {
                                        "OK": closeDialog
                                    }
                                });
                            } else {
                                dialog.close();
                                alert(response?.Error ? response.Error : "Sorry an error occurred");
                            }
                        });
                    },
                    "Cancel": closeDialog
                }
            });
        });

        $("#endLab").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (labData.CanBeMarkedComplete) {
                showDialog("<div style='margin-top:10px;'><label style='font-size:150%;'><input type='radio' name='endLabChoice' id='endLabComplete' checked/>End my lab and mark it as complete</label><div style='margin-left:22px;'>You will receive credit for completing the lab, but all work you have done in the virtual machines will be lost.</div></div><div style='margin-top:8px;'><label style='font-size:150%;'><input type='radio' name='endLabChoice' id='endLabCancel'/>Cancel my lab</label><div style='margin-left:22px;'>You will not receive credit for completing the lab and the lab will be deleted.</div></div><div id='endLabMakeSelection' style='margin-top:20px; display:none;'>Please make a selection</div>", {
                    title: "End Lab",
                    width: 620,
                    height: 250,
                    buttons: {
                        "OK": function () {
                            if ($("#endLabComplete").prop("checked")) {
                                showFullScreenMessage(Text.ClosingLab, "", true);
                                var setCompleteUrl = "/Lab/End/" + model.labInstanceId + "?complete=1";
                                if (model.impersonatorName) {
                                    setCompleteUrl += "?impersonatorName=" + encodeURIComponent(model.impersonatorName);
                                } else if (model.monitorName) {
                                    setCompleteUrl += "?monitorName=" + encodeURIComponent(model.monitorName);
                                }
                                ajaxPost(setCompleteUrl,
                                    function (response) {
                                        if (response.Success) {
                                            labIsComplete();
                                            sendLabDoneMessageToOpener();
                                            gotoPostLabActivity(Text.LabCompleteTitle, Text.LabCompleteMessage.format(labData.DisplayName));
                                        } else if (response.Error) {
                                            alert(response.Error);
                                            hideFullScreenMessage();
                                        } else {
                                            alert(Text.SorryAnErrorOccurred);
                                            hideFullScreenMessage();
                                        }
                                    },
                                    function () {
                                        alert(Text.SorryAnErrorOccurred);
                                        hideFullScreenMessage();
                                    }
                                );
                            } else if ($("#endLabCancel").prop("checked")) {
                                cancelLab(Text.CancellingLab, Text.LabCancelledTitle, Text.LabCancelledMessage);
                            } else {
                                $("#endLabMakeSelection").show();
                            }
                        },
                        "Cancel": closeDialog
                    }
                });
            } else {
                showDialog("<div style='margin-top:10px;'>Are you sure you want to end this lab? Your lab environment will be permanently discarded.</div>", {
                    title: "End Lab",
                    width: 620,
                    height: 250,
                    buttons: {
                        "Yes, end my lab": function () {
                            cancelLab(Text.ClosingLab, Text.LabClosedTitle, Text.LabClosedMessage);
                        },
                        "No, not yet": closeDialog
                    }
                });
            }
        });

        if (model.hasSideBySideResources) {
            var $sideBySideResourceFrame = $("#sideBySideResourceFrame");
            var $sideBySideResourceZoomValue = $("#sideBySideResourceZoomValue");
            $("#sideBySideResourceZoom").on("input change", function () {
                $(this).attr("aria-valuenow", this.value);
                $sideBySideResourceZoomValue.html(this.value + "%");
                var zoom = this.value / 100.00;
                var size = 100.0 / zoom;
                $sideBySideResourceFrame.css({
                    "width": size + "%",
                    "height": size + "%",
                    "zoom": zoom,
                    "-moz-transform": "scale(" + zoom + ")",
                    "-webkit-transform": "scale(" + zoom + ")",
                    "-o-transform": "scale(" + zoom + ")"
                });
            });
        }

        $("#closeMachineWindow").on("click keypress", function (e) {
            if (!a11yClick(e)) return;
            if (selectedMachine && selectedMachine.window && !selectedMachine.window.closed) {
                selectedMachine.window.close();
            }
        });

        window.addEventListener("message", receiveMessage, false);

        function receiveMessage(e) {
            if (!e || !e.data) {
                return;
            }
            switch (e.data) {
                case "closeDialog":
                    closeDialog();
                    break;
            }
        }

    }

    function a11yClick(event) {
        if (event.type === 'click') {
            return true;
        }
        else if (event.type === 'keypress') {
            var code = event.charCode || event.keyCode;
            if ((code === 32) || (code === 13)) {
                return true;
            }
        }
        else {
            return false;
        }
    }

    return {
        initialize: initialize,
        refreshDisplay: refreshDisplay,
        refreshVmWrapperLayout: refreshVmWrapperLayout,
        showFullScreenMessage: showFullScreenMessage,
        hideFullScreenMessage: hideFullScreenMessage,
        getConsoleSize: getConsoleSize,
        getVmSize: function () {
            let remoteController = getSelectedRemoteController();
            return remoteController != null ? remoteController.getSize() : { width: 1024, height: 768 };
        },
        showDialog: showDialog,
        closeDialog: closeDialog,
        refreshDialogScrollbars: refreshDialogScrollbars,
        showNotification: showNotification,
        closing: false,
        fullScreenMessageShown: false,
        dialogShown: false,
        contentDialogShown: false,
        remoteStateChangeInProgress: false,
        internalStateChangeInProgress: false,
        hostIsOnline: true,
        complete: false,
        getMachineByProfileId: getMachineByProfileId,
        getMachines: getMachines,
        getRemovableMedia: getRemovableMedia,
        getSelectedMachine: function () {
            return selectedMachine;
        },
        reconnectToSelectedMachine: function () {
            refreshDisplay();
        },
        selectMachineById: selectMachineById,
        selectEndpointById: selectEndpointById,
        selectMachineBySelectionId: selectMachineBySelectionId,
        loadOpticalMediaOnSelectedMachine: loadOpticalMediaOnSelectedMachine,
        loadFloppyMediaOnSelectedMachine: loadFloppyMediaOnSelectedMachine,
        ejectOpticalMediaOnSelectedMachine: ejectOpticalMediaOnSelectedMachine,
        ejectFloppyMediaOnSelectedMachine: ejectFloppyMediaOnSelectedMachine,
        disableVmWrapperScrollbars: disableVmWrapperScrollbars,
        writeCookie: writeCookie,
        readCookie: readCookie,
        getVmWrapperSize: function () { return { width: $vmWrapper.width(), height: $vmWrapper.height() } },
        labIsComplete: labIsComplete,
        prepareForFullScreenMessage: prepareForFullScreenMessage,
        recoverFromFullScreenMessage: recoverFromFullScreenMessage,
        startServerSync: function (pollInterval) {
            if (syncInterval) { window.clearInterval(syncInterval); }
            syncInterval = window.setInterval(function () {
                synchronizeWithServer();
            }, pollInterval);
        },
        setLabState: function (state) {
            labData.State = state;
        },
        setNavigationTab: function (tab) {
            selectedNavigationTab = tab;
            if (selectedNavigationTab === 1 && !model.useStaticThumbnails) {
                updateMachineThumbnails();
            }
        },
        typeText: function (text, canUseVmClipboard) {
            if (selectedMachine) {
                sendPastedText(text, canUseVmClipboard);
            } else if (selectedEndpoint) {
                sendTextToEndpoint(selectedEndpoint, text);
            }
        },
        sendKeyCombo: function (keys) {
            if (selectedMachine) {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.sendKeyCombo(keys);
                }                
            }
        },
        executeCommandOnSelectedMachine: executeCommandOnSelectedMachine,
        sendCtrlAltDelete: function () {
            if (selectedMachine.window && !selectedMachine.window.closed) {
                selectedMachine.window.labConsole.sendCtrlAltDelete();
            } else {
                let remoteController = getSelectedRemoteController();
                if (remoteController != null) {
                    remoteController.sendCtrlAltDelete();
                }                
            }
        },
        pauseServerSync: function (val) { labConsole.pauseSync = val; },
        getLastLatency: function () { return lastLatency; },
        spawnedWindowClosed: function () {
            if (model.isChildClient && labData.Machines.length == 1) {
                window.parent.showConsole();
            }
            window.setTimeout(function () {
                let $machines = model.isChildClient
                    ? window.parent.getResourcesExtensionsPlaceHolder()
                    : $("#machines");
                for (let machine of labData.Machines) {
                    if (machine.window?.closed) {
                        $machines.find(`#machine${machine.ProfileId} .openInNewWindow`).removeClass("open").text("Open in New Window");
                        machine.window = null;
                        if (machine === selectedMachine) {
                            connectToSelectedMachine();
                        }
                    }
                }
            }, 100);
        },

        setTheme: function (themeName, themeStyleSheetUrl) {
            applyTheme(themeName, themeStyleSheetUrl);
        },

        getMachineRdpSessionId: function (machineProfileId, callback) {
            var machine = getMachineByProfileId(machineProfileId);
            if (machine === null) return;
            getMachineRdpSessionId(machine, function () {
                if (callback) {
                    callback(machine.RdpSessionId);
                }
            });
        },

        setIgnoreVirtualMachineStateDuringSync: function (ignore) {
            ignoreVirtualMachineStateDuringSync = ignore;
        },

        openMachineInNewWindow: function (machineId) {
            var machine = getMachineByProfileId(machineId);
            if (machine === null) return;
            if (machine.window && !machine.window.closed) {
                machine.window.focus();
            } else {
                openMachineWindow(machine);
            }
        },

        isChildClient: function () {
            return model.isChildClient;
        },

        instructionsHaveLoaded: function () {
            if (model.isChildClient && typeof api !== 'undefined' && typeof initialize_theme_script !== 'undefined') {
                initialize_theme_script();
            }
        },

        getSelectedRemoteController: getSelectedRemoteController,

        getSelectedMachineHistory: function () {
            return selectedMachineHistory;
        },

        getMinutesRemaining: function () {
            return labData?.MinutesRemaining ?? 0;
        },

    };

}();

$(function () {
    labConsole.initialize();
    if (model.isChildClient) {
        parent.window.consoleHasLoaded();
    } else if (typeof initialize_theme_script !== 'undefined') {
        initialize_theme_script();
    }
});

var Text = {
    ApplyingSnapshotTitle: "Applying Snapshot",
    ApplyingSnapshotMessage: "Please wait while your snapshot is applied. This can take several minutes.",
    AwaitingKeyPress: "Awaiting key press...",
    BrowserNoClipboardAccess: "We were unable to read text from your clipboard. However, you can paste text into the textbox below and it will be typed into the virtual machine.",
    Cancel: "Cancel",
    CancellingLab: "Cancelling Lab",
    CloningMessage: "Your lab is being cloned for use by another student. You will be able to access your lab environment again shortly.",
    CloningTitle: "Cloning In Progress",
    ClosingLab: "Closing Lab",
    ConnectionIssuesButtonText: "Retry Connection",
    ConnectionIssuesMessage: "The connection to your lab machines appears to have been interrupted.",
    ConnectionIssuesTitle: "Connection Issues?",
    ConfirmApplySnapshot: "Are you sure you want to apply this snapshot? All progress made since the snapshot was taken will be lost!",
    ConfirmSaveTitle: "Confirm Save",
    Continue: "Continue",
    CreatingSnapshotMessage: "Please wait while your snapshot is created.",
    CreatingSnapshotTitle: "Creating Snapshot",
    ErrorApplyingSnapshot: "Sorry, an error occurred. Your snapshot was not applied.",
    ErrorCreatingSnapshot: "Sorry, an error occurred. Your snapshot was not created.",
    ErrorDeletingSnapshot: "Sorry, an error occurred. Your snapshot was not deleted.",
    ErrorSavingLabTitle: "Error Saving Lab",
    ErrorSavingExamTitle: "Error Saving Exam",
    ErrorRetrievingSnapshots: "Sorry, and error occurred while retrieving your snapshots.",
    LabBuildTitle: "Your lab environment is being built",
    LabCancelledTitle: "Lab Cancelled",
    LabCancelledMessage: "Your lab has been cancelled.",
    LabClosedMessage: "Your lab has been closed.",
    LabClosedTitle: "Lab Closed",
    LabCompleteTitle: "Lab Complete",
    LabCompleteMessage: "Congratulations! You\'ve completed {0}. ",
    LabResumingTitle: "Your lab is being resumed",
    ExamResumingTitle: "Your exam is being resumed",
    LabSavedForXDaysExpiresY: "Your lab has been saved and will be available for you to resume for the next {0} days. It will expire {1}.",
    ExamSavedForXDaysExpiresY: "Your exam has been saved and will be available for you to resume for the next {0} days. It will expire {1}.",
    LabSavedMessage: "This lab is currently saved. Please restore it before continuing.",
    LabSavedTitle: "Lab Saved",
    ExamSavedTitle: "Exam Saved",
    ExamSavedMessage: "This exam is currently saved. Please restore it before continuing.",
    LabTimeExtensionQuestion: "You now have less than {0} minutes left in your lab. Would you like to extend your lab by {1} minutes?",
    LabTimeExtensionError: "Sorry, an error occurred. Your lab time was not extended.",
    LaunchErrorMessage: "Sorry, your lab could not be launched.",
    LaunchErrorTitle: "Launch Error",
    Loading: "Loading...",
    MaxPasteLengthError: "You can only paste up to 1000 characters.",
    MovingMessage: "Your lab is safely being moved to another server and will resume as soon as the move is complete. None of your work will be lost.",
    MovingTitle: "Your lab is being moved between servers",
    No: "No",
    Objective: "@Resources.Localization.Objective",
    OK: "OK",
    OneHourRemaining: "1 Hour Remaining",
    OneMinuteRemaining: "1 Minute Remaining",
    PleaseProvideSnapshotName: "Please provide a name for your snapshot.",
    SavingLabMessage: "Your lab is being saved.",
    SavingLabTitle: "Saving Lab",
    SavingExamTitle: "Saving Exam",
    SavingExamMessage: "Your exam is being saved.",
    Scenario: "Scenario",
    SorryAnErrorOccurred: "Sorry an error occurred",
    ThisCanTakeSeveralMinutes: "This can take several minutes.",
    TimeExpiredLabSaved: "Time Expired - Lab Saved",
    TimeExpiredMessage: "Your lab time has expired. ",
    TurnOffMachineConfirm: "Are you sure you want to turn off the current machine? This is equivalent to hitting the power button on a physical computer.",
    VmsStartingTitle: "Your virtual machines are starting",
    Yes: "Yes",
    XHoursRemaining: "{0} Hours Remaining",
    XHoursYMinutesRemaining: "{0} Hr {1} Min Remaining",
    XMinutesRemaining: "{0} Minutes Remaining",
    ThisShouldntTakeLong: "This shouldn\'t take long",
    LowerPerformanceController: "@Resources.Localization.LowerPerformanceController",
    LowPerformanceControllerMessage: "@Resources.Localization.LowPerformanceControllerMessage"
};
